#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_upper_case_globals)]

//! Keysyms defined in xkbcommon-keysyms.h
//!
//! Autogenerated by convert.lua.

use super::Keysym;


/* This file is autogenerated from Makefile.am; please do not commit directly. */

/// Special KeySym
pub const KEY_NoSymbol: Keysym =                      Keysym(0x000000u32);

/***********************************************************
Copyright 1987, 1994, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.


Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

/*
 * The "X11 Window System Protocol" standard defines in Appendix A the
 * keysym codes. These 29-bit integer values identify characters or
 * functions associated with each key (e.g., via the visible
 * engraving) of a keyboard layout. This file assigns mnemonic macro
 * names for these keysyms.
 *
 * This file is also compiled (by src/util/makekeys.c in libX11) into
 * hash tables that can be accessed with X11 library functions such as
 * XStringToKeysym() and XKeysymToString().
 *
 * Where a keysym corresponds one-to-one to an ISO 10646 / Unicode
 * character, this is noted in a comment that provides both the U+xxxx
 * Unicode position, as well as the official Unicode name of the
 * character.
 *
 * Where the correspondence is either not one-to-one or semantically
 * unclear, the Unicode position and name are enclosed in
 * parentheses. Such legacy keysyms should be considered deprecated
 * and are not recommended for use in future keyboard mappings.
 *
 * For any future extension of the keysyms with characters already
 * found in ISO 10646 / Unicode, the following algorithm shall be
 * used. The new keysym code position will simply be the character's
 * Unicode number plus 0x01000000. The keysym values in the range
 * 0x01000100 to 0x0110ffff are reserved to represent Unicode
 * characters in the range U+0100 to U+10FFFF.
 * 
 * While most newer Unicode-based X11 clients do already accept
 * Unicode-mapped keysyms in the range 0x01000100 to 0x0110ffff, it
 * will remain necessary for clients -- in the interest of
 * compatibility with existing servers -- to also understand the
 * existing legacy keysym values in the range 0x0100 to 0x20ff.
 *
 * Where several mnemonic names are defined for the same keysym in this
 * file, all but the first one listed should be considered deprecated.
 *
 * Mnemonic names for keysyms are defined in this file with lines
 * that match one of these Perl regular expressions:
 *
 *    /^\#define XKB_KEY_([a-zA-Z_0-9]+)\s+0x([0-9a-f]+)\s*\/\* U+([0-9A-F]{4,6}) (.*) \*\/\s*$/
 *    /^\#define XKB_KEY_([a-zA-Z_0-9]+)\s+0x([0-9a-f]+)\s*\/\*\(U+([0-9A-F]{4,6}) (.*)\)\*\/\s*$/
 *    /^\#define XKB_KEY_([a-zA-Z_0-9]+)\s+0x([0-9a-f]+)\s*(\/\*\s*(.*)\s*\*\/)?\s*$/
 *
 * Before adding new keysyms, please do consider the following: In
 * addition to the keysym names defined in this file, the
 * XStringToKeysym() and XKeysymToString() functions will also handle
 * any keysym string of the form "U0020" to "U007E" and "U00A0" to
 * "U10FFFF" for all possible Unicode characters. In other words,
 * every possible Unicode character has already a keysym string
 * defined algorithmically, even if it is not listed here. Therefore,
 * defining an additional keysym macro is only necessary where a
 * non-hexadecimal mnemonic name is needed, or where the new keysym
 * does not represent any existing Unicode character.
 *
 * When adding new keysyms to this file, do not forget to also update the
 * following as needed:
 *
 *   - the mappings in src/KeyBind.c in the repo
 *     git://anongit.freedesktop.org/xorg/lib/libX11.git
 *
 *   - the protocol specification in specs/keysyms.xml
 *     in the repo git://anongit.freedesktop.org/xorg/proto/x11proto.git
 *
 */

/// Void symbol
pub const KEY_VoidSymbol: Keysym =                    Keysym(0xffffffu32);

/*
 * TTY function keys, cleverly chosen to map to ASCII, for convenience of
 * programming, but could have been arbitrary (at the cost of lookup
 * tables in client code).
 */

pub const KEY_BackSpace: Keysym =                     Keysym(0xff08u32);
pub const KEY_Tab: Keysym =                           Keysym(0xff09u32);
pub const KEY_Linefeed: Keysym =                      Keysym(0xff0au32);
pub const KEY_Clear: Keysym =                         Keysym(0xff0bu32);
pub const KEY_Return: Keysym =                        Keysym(0xff0du32);
pub const KEY_Pause: Keysym =                         Keysym(0xff13u32);
pub const KEY_Scroll_Lock: Keysym =                   Keysym(0xff14u32);
pub const KEY_Sys_Req: Keysym =                       Keysym(0xff15u32);
pub const KEY_Escape: Keysym =                        Keysym(0xff1bu32);
pub const KEY_Delete: Keysym =                        Keysym(0xffffu32);



/* International & multi-key character composition */

pub const KEY_Multi_key: Keysym =                     Keysym(0xff20u32);
pub const KEY_Codeinput: Keysym =                     Keysym(0xff37u32);
pub const KEY_SingleCandidate: Keysym =               Keysym(0xff3cu32);
pub const KEY_MultipleCandidate: Keysym =             Keysym(0xff3du32);
pub const KEY_PreviousCandidate: Keysym =             Keysym(0xff3eu32);

/* Japanese keyboard support */

pub const KEY_Kanji: Keysym =                         Keysym(0xff21u32);
/// Cancel Conversion
pub const KEY_Muhenkan: Keysym =                      Keysym(0xff22u32);
pub const KEY_Henkan_Mode: Keysym =                   Keysym(0xff23u32);
/// Alias for Henkan_Mode
pub const KEY_Henkan: Keysym =                        Keysym(0xff23u32);
/// to Romaji
pub const KEY_Romaji: Keysym =                        Keysym(0xff24u32);
/// to Hiragana
pub const KEY_Hiragana: Keysym =                      Keysym(0xff25u32);
/// to Katakana
pub const KEY_Katakana: Keysym =                      Keysym(0xff26u32);
pub const KEY_Hiragana_Katakana: Keysym =             Keysym(0xff27u32);
/// to Zenkaku
pub const KEY_Zenkaku: Keysym =                       Keysym(0xff28u32);
/// to Hankaku
pub const KEY_Hankaku: Keysym =                       Keysym(0xff29u32);
pub const KEY_Zenkaku_Hankaku: Keysym =               Keysym(0xff2au32);
/// Add to Dictionary
pub const KEY_Touroku: Keysym =                       Keysym(0xff2bu32);
/// Delete from Dictionary
pub const KEY_Massyo: Keysym =                        Keysym(0xff2cu32);
/// Kana Lock
pub const KEY_Kana_Lock: Keysym =                     Keysym(0xff2du32);
/// Kana Shift
pub const KEY_Kana_Shift: Keysym =                    Keysym(0xff2eu32);
/// Alphanumeric Shift
pub const KEY_Eisu_Shift: Keysym =                    Keysym(0xff2fu32);
/// Alphanumeric toggle
pub const KEY_Eisu_toggle: Keysym =                   Keysym(0xff30u32);
/// Codeinput
pub const KEY_Kanji_Bangou: Keysym =                  Keysym(0xff37u32);
pub const KEY_Zen_Koho: Keysym =                      Keysym(0xff3du32);
/// Previous Candidate
pub const KEY_Mae_Koho: Keysym =                      Keysym(0xff3eu32);

/* 0xff31 thru 0xff3f are under XK_KOREAN */

/* Cursor control & motion */

pub const KEY_Home: Keysym =                          Keysym(0xff50u32);
pub const KEY_Left: Keysym =                          Keysym(0xff51u32);
pub const KEY_Up: Keysym =                            Keysym(0xff52u32);
pub const KEY_Right: Keysym =                         Keysym(0xff53u32);
pub const KEY_Down: Keysym =                          Keysym(0xff54u32);
pub const KEY_Prior: Keysym =                         Keysym(0xff55u32);
pub const KEY_Page_Up: Keysym =                       Keysym(0xff55u32);
/// Next
pub const KEY_Next: Keysym =                          Keysym(0xff56u32);
pub const KEY_Page_Down: Keysym =                     Keysym(0xff56u32);
/// EOL
pub const KEY_End: Keysym =                           Keysym(0xff57u32);
/// BOL
pub const KEY_Begin: Keysym =                         Keysym(0xff58u32);


/* Misc functions */

pub const KEY_Select: Keysym =                        Keysym(0xff60u32);
pub const KEY_Print: Keysym =                         Keysym(0xff61u32);
pub const KEY_Execute: Keysym =                       Keysym(0xff62u32);
pub const KEY_Insert: Keysym =                        Keysym(0xff63u32);
pub const KEY_Undo: Keysym =                          Keysym(0xff65u32);
pub const KEY_Redo: Keysym =                          Keysym(0xff66u32);
pub const KEY_Menu: Keysym =                          Keysym(0xff67u32);
pub const KEY_Find: Keysym =                          Keysym(0xff68u32);
pub const KEY_Cancel: Keysym =                        Keysym(0xff69u32);
/// Help
pub const KEY_Help: Keysym =                          Keysym(0xff6au32);
pub const KEY_Break: Keysym =                         Keysym(0xff6bu32);
/// Character set switch
pub const KEY_Mode_switch: Keysym =                   Keysym(0xff7eu32);
/// Alias for mode_switch
pub const KEY_script_switch: Keysym =                 Keysym(0xff7eu32);
pub const KEY_Num_Lock: Keysym =                      Keysym(0xff7fu32);

/* Keypad functions, keypad numbers cleverly chosen to map to ASCII */

/// Space
pub const KEY_KP_Space: Keysym =                      Keysym(0xff80u32);
pub const KEY_KP_Tab: Keysym =                        Keysym(0xff89u32);
/// Enter
pub const KEY_KP_Enter: Keysym =                      Keysym(0xff8du32);
pub const KEY_KP_F1: Keysym =                         Keysym(0xff91u32);
pub const KEY_KP_F2: Keysym =                         Keysym(0xff92u32);
pub const KEY_KP_F3: Keysym =                         Keysym(0xff93u32);
pub const KEY_KP_F4: Keysym =                         Keysym(0xff94u32);
pub const KEY_KP_Home: Keysym =                       Keysym(0xff95u32);
pub const KEY_KP_Left: Keysym =                       Keysym(0xff96u32);
pub const KEY_KP_Up: Keysym =                         Keysym(0xff97u32);
pub const KEY_KP_Right: Keysym =                      Keysym(0xff98u32);
pub const KEY_KP_Down: Keysym =                       Keysym(0xff99u32);
pub const KEY_KP_Prior: Keysym =                      Keysym(0xff9au32);
pub const KEY_KP_Page_Up: Keysym =                    Keysym(0xff9au32);
pub const KEY_KP_Next: Keysym =                       Keysym(0xff9bu32);
pub const KEY_KP_Page_Down: Keysym =                  Keysym(0xff9bu32);
pub const KEY_KP_End: Keysym =                        Keysym(0xff9cu32);
pub const KEY_KP_Begin: Keysym =                      Keysym(0xff9du32);
pub const KEY_KP_Insert: Keysym =                     Keysym(0xff9eu32);
pub const KEY_KP_Delete: Keysym =                     Keysym(0xff9fu32);
/// Equals
pub const KEY_KP_Equal: Keysym =                      Keysym(0xffbdu32);
pub const KEY_KP_Multiply: Keysym =                   Keysym(0xffaau32);
pub const KEY_KP_Add: Keysym =                        Keysym(0xffabu32);
pub const KEY_KP_Separator: Keysym =                  Keysym(0xffacu32);
pub const KEY_KP_Subtract: Keysym =                   Keysym(0xffadu32);
pub const KEY_KP_Decimal: Keysym =                    Keysym(0xffaeu32);
pub const KEY_KP_Divide: Keysym =                     Keysym(0xffafu32);

pub const KEY_KP_0: Keysym =                          Keysym(0xffb0u32);
pub const KEY_KP_1: Keysym =                          Keysym(0xffb1u32);
pub const KEY_KP_2: Keysym =                          Keysym(0xffb2u32);
pub const KEY_KP_3: Keysym =                          Keysym(0xffb3u32);
pub const KEY_KP_4: Keysym =                          Keysym(0xffb4u32);
pub const KEY_KP_5: Keysym =                          Keysym(0xffb5u32);
pub const KEY_KP_6: Keysym =                          Keysym(0xffb6u32);
pub const KEY_KP_7: Keysym =                          Keysym(0xffb7u32);
pub const KEY_KP_8: Keysym =                          Keysym(0xffb8u32);
pub const KEY_KP_9: Keysym =                          Keysym(0xffb9u32);



/*
 * Auxiliary functions; note the duplicate definitions for left and right
 * function keys;  Sun keyboards and a few other manufacturers have such
 * function key groups on the left and/or right sides of the keyboard.
 * We've not found a keyboard with more than 35 function keys total.
 */

pub const KEY_F1: Keysym =                            Keysym(0xffbeu32);
pub const KEY_F2: Keysym =                            Keysym(0xffbfu32);
pub const KEY_F3: Keysym =                            Keysym(0xffc0u32);
pub const KEY_F4: Keysym =                            Keysym(0xffc1u32);
pub const KEY_F5: Keysym =                            Keysym(0xffc2u32);
pub const KEY_F6: Keysym =                            Keysym(0xffc3u32);
pub const KEY_F7: Keysym =                            Keysym(0xffc4u32);
pub const KEY_F8: Keysym =                            Keysym(0xffc5u32);
pub const KEY_F9: Keysym =                            Keysym(0xffc6u32);
pub const KEY_F10: Keysym =                           Keysym(0xffc7u32);
pub const KEY_F11: Keysym =                           Keysym(0xffc8u32);
pub const KEY_L1: Keysym =                            Keysym(0xffc8u32);
pub const KEY_F12: Keysym =                           Keysym(0xffc9u32);
pub const KEY_L2: Keysym =                            Keysym(0xffc9u32);
pub const KEY_F13: Keysym =                           Keysym(0xffcau32);
pub const KEY_L3: Keysym =                            Keysym(0xffcau32);
pub const KEY_F14: Keysym =                           Keysym(0xffcbu32);
pub const KEY_L4: Keysym =                            Keysym(0xffcbu32);
pub const KEY_F15: Keysym =                           Keysym(0xffccu32);
pub const KEY_L5: Keysym =                            Keysym(0xffccu32);
pub const KEY_F16: Keysym =                           Keysym(0xffcdu32);
pub const KEY_L6: Keysym =                            Keysym(0xffcdu32);
pub const KEY_F17: Keysym =                           Keysym(0xffceu32);
pub const KEY_L7: Keysym =                            Keysym(0xffceu32);
pub const KEY_F18: Keysym =                           Keysym(0xffcfu32);
pub const KEY_L8: Keysym =                            Keysym(0xffcfu32);
pub const KEY_F19: Keysym =                           Keysym(0xffd0u32);
pub const KEY_L9: Keysym =                            Keysym(0xffd0u32);
pub const KEY_F20: Keysym =                           Keysym(0xffd1u32);
pub const KEY_L10: Keysym =                           Keysym(0xffd1u32);
pub const KEY_F21: Keysym =                           Keysym(0xffd2u32);
pub const KEY_R1: Keysym =                            Keysym(0xffd2u32);
pub const KEY_F22: Keysym =                           Keysym(0xffd3u32);
pub const KEY_R2: Keysym =                            Keysym(0xffd3u32);
pub const KEY_F23: Keysym =                           Keysym(0xffd4u32);
pub const KEY_R3: Keysym =                            Keysym(0xffd4u32);
pub const KEY_F24: Keysym =                           Keysym(0xffd5u32);
pub const KEY_R4: Keysym =                            Keysym(0xffd5u32);
pub const KEY_F25: Keysym =                           Keysym(0xffd6u32);
pub const KEY_R5: Keysym =                            Keysym(0xffd6u32);
pub const KEY_F26: Keysym =                           Keysym(0xffd7u32);
pub const KEY_R6: Keysym =                            Keysym(0xffd7u32);
pub const KEY_F27: Keysym =                           Keysym(0xffd8u32);
pub const KEY_R7: Keysym =                            Keysym(0xffd8u32);
pub const KEY_F28: Keysym =                           Keysym(0xffd9u32);
pub const KEY_R8: Keysym =                            Keysym(0xffd9u32);
pub const KEY_F29: Keysym =                           Keysym(0xffdau32);
pub const KEY_R9: Keysym =                            Keysym(0xffdau32);
pub const KEY_F30: Keysym =                           Keysym(0xffdbu32);
pub const KEY_R10: Keysym =                           Keysym(0xffdbu32);
pub const KEY_F31: Keysym =                           Keysym(0xffdcu32);
pub const KEY_R11: Keysym =                           Keysym(0xffdcu32);
pub const KEY_F32: Keysym =                           Keysym(0xffddu32);
pub const KEY_R12: Keysym =                           Keysym(0xffddu32);
pub const KEY_F33: Keysym =                           Keysym(0xffdeu32);
pub const KEY_R13: Keysym =                           Keysym(0xffdeu32);
pub const KEY_F34: Keysym =                           Keysym(0xffdfu32);
pub const KEY_R14: Keysym =                           Keysym(0xffdfu32);
pub const KEY_F35: Keysym =                           Keysym(0xffe0u32);
pub const KEY_R15: Keysym =                           Keysym(0xffe0u32);

/* Modifiers */

/// Left shift
pub const KEY_Shift_L: Keysym =                       Keysym(0xffe1u32);
/// Right shift
pub const KEY_Shift_R: Keysym =                       Keysym(0xffe2u32);
/// Left control
pub const KEY_Control_L: Keysym =                     Keysym(0xffe3u32);
/// Right control
pub const KEY_Control_R: Keysym =                     Keysym(0xffe4u32);
/// Caps lock
pub const KEY_Caps_Lock: Keysym =                     Keysym(0xffe5u32);
/// Shift lock
pub const KEY_Shift_Lock: Keysym =                    Keysym(0xffe6u32);

/// Left meta
pub const KEY_Meta_L: Keysym =                        Keysym(0xffe7u32);
/// Right meta
pub const KEY_Meta_R: Keysym =                        Keysym(0xffe8u32);
/// Left alt
pub const KEY_Alt_L: Keysym =                         Keysym(0xffe9u32);
/// Right alt
pub const KEY_Alt_R: Keysym =                         Keysym(0xffeau32);
/// Left super
pub const KEY_Super_L: Keysym =                       Keysym(0xffebu32);
/// Right super
pub const KEY_Super_R: Keysym =                       Keysym(0xffecu32);
/// Left hyper
pub const KEY_Hyper_L: Keysym =                       Keysym(0xffedu32);
/// Right hyper
pub const KEY_Hyper_R: Keysym =                       Keysym(0xffeeu32);

/*
 * Keyboard (XKB) Extension function and modifier keys
 * (from Appendix C of "The X Keyboard Extension: Protocol Specification")
 * Byte 3 = 0xfe
 */

pub const KEY_ISO_Lock: Keysym =                      Keysym(0xfe01u32);
pub const KEY_ISO_Level2_Latch: Keysym =              Keysym(0xfe02u32);
pub const KEY_ISO_Level3_Shift: Keysym =              Keysym(0xfe03u32);
pub const KEY_ISO_Level3_Latch: Keysym =              Keysym(0xfe04u32);
pub const KEY_ISO_Level3_Lock: Keysym =               Keysym(0xfe05u32);
pub const KEY_ISO_Level5_Shift: Keysym =              Keysym(0xfe11u32);
pub const KEY_ISO_Level5_Latch: Keysym =              Keysym(0xfe12u32);
pub const KEY_ISO_Level5_Lock: Keysym =               Keysym(0xfe13u32);
/// Alias for mode_switch
pub const KEY_ISO_Group_Shift: Keysym =               Keysym(0xff7eu32);
pub const KEY_ISO_Group_Latch: Keysym =               Keysym(0xfe06u32);
pub const KEY_ISO_Group_Lock: Keysym =                Keysym(0xfe07u32);
pub const KEY_ISO_Next_Group: Keysym =                Keysym(0xfe08u32);
pub const KEY_ISO_Next_Group_Lock: Keysym =           Keysym(0xfe09u32);
pub const KEY_ISO_Prev_Group: Keysym =                Keysym(0xfe0au32);
pub const KEY_ISO_Prev_Group_Lock: Keysym =           Keysym(0xfe0bu32);
pub const KEY_ISO_First_Group: Keysym =               Keysym(0xfe0cu32);
pub const KEY_ISO_First_Group_Lock: Keysym =          Keysym(0xfe0du32);
pub const KEY_ISO_Last_Group: Keysym =                Keysym(0xfe0eu32);
pub const KEY_ISO_Last_Group_Lock: Keysym =           Keysym(0xfe0fu32);

pub const KEY_ISO_Left_Tab: Keysym =                  Keysym(0xfe20u32);
pub const KEY_ISO_Move_Line_Up: Keysym =              Keysym(0xfe21u32);
pub const KEY_ISO_Move_Line_Down: Keysym =            Keysym(0xfe22u32);
pub const KEY_ISO_Partial_Line_Up: Keysym =           Keysym(0xfe23u32);
pub const KEY_ISO_Partial_Line_Down: Keysym =         Keysym(0xfe24u32);
pub const KEY_ISO_Partial_Space_Left: Keysym =        Keysym(0xfe25u32);
pub const KEY_ISO_Partial_Space_Right: Keysym =       Keysym(0xfe26u32);
pub const KEY_ISO_Set_Margin_Left: Keysym =           Keysym(0xfe27u32);
pub const KEY_ISO_Set_Margin_Right: Keysym =          Keysym(0xfe28u32);
pub const KEY_ISO_Release_Margin_Left: Keysym =       Keysym(0xfe29u32);
pub const KEY_ISO_Release_Margin_Right: Keysym =      Keysym(0xfe2au32);
pub const KEY_ISO_Release_Both_Margins: Keysym =      Keysym(0xfe2bu32);
pub const KEY_ISO_Fast_Cursor_Left: Keysym =          Keysym(0xfe2cu32);
pub const KEY_ISO_Fast_Cursor_Right: Keysym =         Keysym(0xfe2du32);
pub const KEY_ISO_Fast_Cursor_Up: Keysym =            Keysym(0xfe2eu32);
pub const KEY_ISO_Fast_Cursor_Down: Keysym =          Keysym(0xfe2fu32);
pub const KEY_ISO_Continuous_Underline: Keysym =      Keysym(0xfe30u32);
pub const KEY_ISO_Discontinuous_Underline: Keysym =   Keysym(0xfe31u32);
pub const KEY_ISO_Emphasize: Keysym =                 Keysym(0xfe32u32);
pub const KEY_ISO_Center_Object: Keysym =             Keysym(0xfe33u32);
pub const KEY_ISO_Enter: Keysym =                     Keysym(0xfe34u32);

pub const KEY_dead_grave: Keysym =                    Keysym(0xfe50u32);
pub const KEY_dead_acute: Keysym =                    Keysym(0xfe51u32);
pub const KEY_dead_circumflex: Keysym =               Keysym(0xfe52u32);
pub const KEY_dead_tilde: Keysym =                    Keysym(0xfe53u32);
/// alias for dead_tilde
pub const KEY_dead_perispomeni: Keysym =              Keysym(0xfe53u32);
pub const KEY_dead_macron: Keysym =                   Keysym(0xfe54u32);
pub const KEY_dead_breve: Keysym =                    Keysym(0xfe55u32);
pub const KEY_dead_abovedot: Keysym =                 Keysym(0xfe56u32);
pub const KEY_dead_diaeresis: Keysym =                Keysym(0xfe57u32);
pub const KEY_dead_abovering: Keysym =                Keysym(0xfe58u32);
pub const KEY_dead_doubleacute: Keysym =              Keysym(0xfe59u32);
pub const KEY_dead_caron: Keysym =                    Keysym(0xfe5au32);
pub const KEY_dead_cedilla: Keysym =                  Keysym(0xfe5bu32);
pub const KEY_dead_ogonek: Keysym =                   Keysym(0xfe5cu32);
pub const KEY_dead_iota: Keysym =                     Keysym(0xfe5du32);
pub const KEY_dead_voiced_sound: Keysym =             Keysym(0xfe5eu32);
pub const KEY_dead_semivoiced_sound: Keysym =         Keysym(0xfe5fu32);
pub const KEY_dead_belowdot: Keysym =                 Keysym(0xfe60u32);
pub const KEY_dead_hook: Keysym =                     Keysym(0xfe61u32);
pub const KEY_dead_horn: Keysym =                     Keysym(0xfe62u32);
pub const KEY_dead_stroke: Keysym =                   Keysym(0xfe63u32);
pub const KEY_dead_abovecomma: Keysym =               Keysym(0xfe64u32);
/// alias for dead_abovecomma
pub const KEY_dead_psili: Keysym =                    Keysym(0xfe64u32);
pub const KEY_dead_abovereversedcomma: Keysym =       Keysym(0xfe65u32);
/// alias for dead_abovereversedcomma
pub const KEY_dead_dasia: Keysym =                    Keysym(0xfe65u32);
pub const KEY_dead_doublegrave: Keysym =              Keysym(0xfe66u32);
pub const KEY_dead_belowring: Keysym =                Keysym(0xfe67u32);
pub const KEY_dead_belowmacron: Keysym =              Keysym(0xfe68u32);
pub const KEY_dead_belowcircumflex: Keysym =          Keysym(0xfe69u32);
pub const KEY_dead_belowtilde: Keysym =               Keysym(0xfe6au32);
pub const KEY_dead_belowbreve: Keysym =               Keysym(0xfe6bu32);
pub const KEY_dead_belowdiaeresis: Keysym =           Keysym(0xfe6cu32);
pub const KEY_dead_invertedbreve: Keysym =            Keysym(0xfe6du32);
pub const KEY_dead_belowcomma: Keysym =               Keysym(0xfe6eu32);
pub const KEY_dead_currency: Keysym =                 Keysym(0xfe6fu32);

/* extra dead elements for German T3 layout */
pub const KEY_dead_lowline: Keysym =                  Keysym(0xfe90u32);
pub const KEY_dead_aboveverticalline: Keysym =        Keysym(0xfe91u32);
pub const KEY_dead_belowverticalline: Keysym =        Keysym(0xfe92u32);
pub const KEY_dead_longsolidusoverlay: Keysym =       Keysym(0xfe93u32);

/* dead vowels for universal syllable entry */
pub const KEY_dead_a: Keysym =                        Keysym(0xfe80u32);
pub const KEY_dead_A: Keysym =                        Keysym(0xfe81u32);
pub const KEY_dead_e: Keysym =                        Keysym(0xfe82u32);
pub const KEY_dead_E: Keysym =                        Keysym(0xfe83u32);
pub const KEY_dead_i: Keysym =                        Keysym(0xfe84u32);
pub const KEY_dead_I: Keysym =                        Keysym(0xfe85u32);
pub const KEY_dead_o: Keysym =                        Keysym(0xfe86u32);
pub const KEY_dead_O: Keysym =                        Keysym(0xfe87u32);
pub const KEY_dead_u: Keysym =                        Keysym(0xfe88u32);
pub const KEY_dead_U: Keysym =                        Keysym(0xfe89u32);
pub const KEY_dead_small_schwa: Keysym =              Keysym(0xfe8au32);
pub const KEY_dead_capital_schwa: Keysym =            Keysym(0xfe8bu32);

pub const KEY_dead_greek: Keysym =                    Keysym(0xfe8cu32);

pub const KEY_First_Virtual_Screen: Keysym =          Keysym(0xfed0u32);
pub const KEY_Prev_Virtual_Screen: Keysym =           Keysym(0xfed1u32);
pub const KEY_Next_Virtual_Screen: Keysym =           Keysym(0xfed2u32);
pub const KEY_Last_Virtual_Screen: Keysym =           Keysym(0xfed4u32);
pub const KEY_Terminate_Server: Keysym =              Keysym(0xfed5u32);

pub const KEY_AccessX_Enable: Keysym =                Keysym(0xfe70u32);
pub const KEY_AccessX_Feedback_Enable: Keysym =       Keysym(0xfe71u32);
pub const KEY_RepeatKeys_Enable: Keysym =             Keysym(0xfe72u32);
pub const KEY_SlowKeys_Enable: Keysym =               Keysym(0xfe73u32);
pub const KEY_BounceKeys_Enable: Keysym =             Keysym(0xfe74u32);
pub const KEY_StickyKeys_Enable: Keysym =             Keysym(0xfe75u32);
pub const KEY_MouseKeys_Enable: Keysym =              Keysym(0xfe76u32);
pub const KEY_MouseKeys_Accel_Enable: Keysym =        Keysym(0xfe77u32);
pub const KEY_Overlay1_Enable: Keysym =               Keysym(0xfe78u32);
pub const KEY_Overlay2_Enable: Keysym =               Keysym(0xfe79u32);
pub const KEY_AudibleBell_Enable: Keysym =            Keysym(0xfe7au32);

pub const KEY_Pointer_Left: Keysym =                  Keysym(0xfee0u32);
pub const KEY_Pointer_Right: Keysym =                 Keysym(0xfee1u32);
pub const KEY_Pointer_Up: Keysym =                    Keysym(0xfee2u32);
pub const KEY_Pointer_Down: Keysym =                  Keysym(0xfee3u32);
pub const KEY_Pointer_UpLeft: Keysym =                Keysym(0xfee4u32);
pub const KEY_Pointer_UpRight: Keysym =               Keysym(0xfee5u32);
pub const KEY_Pointer_DownLeft: Keysym =              Keysym(0xfee6u32);
pub const KEY_Pointer_DownRight: Keysym =             Keysym(0xfee7u32);
pub const KEY_Pointer_Button_Dflt: Keysym =           Keysym(0xfee8u32);
pub const KEY_Pointer_Button1: Keysym =               Keysym(0xfee9u32);
pub const KEY_Pointer_Button2: Keysym =               Keysym(0xfeeau32);
pub const KEY_Pointer_Button3: Keysym =               Keysym(0xfeebu32);
pub const KEY_Pointer_Button4: Keysym =               Keysym(0xfeecu32);
pub const KEY_Pointer_Button5: Keysym =               Keysym(0xfeedu32);
pub const KEY_Pointer_DblClick_Dflt: Keysym =         Keysym(0xfeeeu32);
pub const KEY_Pointer_DblClick1: Keysym =             Keysym(0xfeefu32);
pub const KEY_Pointer_DblClick2: Keysym =             Keysym(0xfef0u32);
pub const KEY_Pointer_DblClick3: Keysym =             Keysym(0xfef1u32);
pub const KEY_Pointer_DblClick4: Keysym =             Keysym(0xfef2u32);
pub const KEY_Pointer_DblClick5: Keysym =             Keysym(0xfef3u32);
pub const KEY_Pointer_Drag_Dflt: Keysym =             Keysym(0xfef4u32);
pub const KEY_Pointer_Drag1: Keysym =                 Keysym(0xfef5u32);
pub const KEY_Pointer_Drag2: Keysym =                 Keysym(0xfef6u32);
pub const KEY_Pointer_Drag3: Keysym =                 Keysym(0xfef7u32);
pub const KEY_Pointer_Drag4: Keysym =                 Keysym(0xfef8u32);
pub const KEY_Pointer_Drag5: Keysym =                 Keysym(0xfefdu32);

pub const KEY_Pointer_EnableKeys: Keysym =            Keysym(0xfef9u32);
pub const KEY_Pointer_Accelerate: Keysym =            Keysym(0xfefau32);
pub const KEY_Pointer_DfltBtnNext: Keysym =           Keysym(0xfefbu32);
pub const KEY_Pointer_DfltBtnPrev: Keysym =           Keysym(0xfefcu32);

/* Single-Stroke Multiple-Character N-Graph Keysyms For The X Input Method */

pub const KEY_ch: Keysym =                            Keysym(0xfea0u32);
pub const KEY_Ch: Keysym =                            Keysym(0xfea1u32);
pub const KEY_CH: Keysym =                            Keysym(0xfea2u32);
pub const KEY_c_h: Keysym =                           Keysym(0xfea3u32);
pub const KEY_C_h: Keysym =                           Keysym(0xfea4u32);
pub const KEY_C_H: Keysym =                           Keysym(0xfea5u32);


/*
 * 3270 Terminal Keys
 * Byte 3 = 0xfd
 */

pub const KEY_3270_Duplicate: Keysym =                Keysym(0xfd01u32);
pub const KEY_3270_FieldMark: Keysym =                Keysym(0xfd02u32);
pub const KEY_3270_Right2: Keysym =                   Keysym(0xfd03u32);
pub const KEY_3270_Left2: Keysym =                    Keysym(0xfd04u32);
pub const KEY_3270_BackTab: Keysym =                  Keysym(0xfd05u32);
pub const KEY_3270_EraseEOF: Keysym =                 Keysym(0xfd06u32);
pub const KEY_3270_EraseInput: Keysym =               Keysym(0xfd07u32);
pub const KEY_3270_Reset: Keysym =                    Keysym(0xfd08u32);
pub const KEY_3270_Quit: Keysym =                     Keysym(0xfd09u32);
pub const KEY_3270_PA1: Keysym =                      Keysym(0xfd0au32);
pub const KEY_3270_PA2: Keysym =                      Keysym(0xfd0bu32);
pub const KEY_3270_PA3: Keysym =                      Keysym(0xfd0cu32);
pub const KEY_3270_Test: Keysym =                     Keysym(0xfd0du32);
pub const KEY_3270_Attn: Keysym =                     Keysym(0xfd0eu32);
pub const KEY_3270_CursorBlink: Keysym =              Keysym(0xfd0fu32);
pub const KEY_3270_AltCursor: Keysym =                Keysym(0xfd10u32);
pub const KEY_3270_KeyClick: Keysym =                 Keysym(0xfd11u32);
pub const KEY_3270_Jump: Keysym =                     Keysym(0xfd12u32);
pub const KEY_3270_Ident: Keysym =                    Keysym(0xfd13u32);
pub const KEY_3270_Rule: Keysym =                     Keysym(0xfd14u32);
pub const KEY_3270_Copy: Keysym =                     Keysym(0xfd15u32);
pub const KEY_3270_Play: Keysym =                     Keysym(0xfd16u32);
pub const KEY_3270_Setup: Keysym =                    Keysym(0xfd17u32);
pub const KEY_3270_Record: Keysym =                   Keysym(0xfd18u32);
pub const KEY_3270_ChangeScreen: Keysym =             Keysym(0xfd19u32);
pub const KEY_3270_DeleteWord: Keysym =               Keysym(0xfd1au32);
pub const KEY_3270_ExSelect: Keysym =                 Keysym(0xfd1bu32);
pub const KEY_3270_CursorSelect: Keysym =             Keysym(0xfd1cu32);
pub const KEY_3270_PrintScreen: Keysym =              Keysym(0xfd1du32);
pub const KEY_3270_Enter: Keysym =                    Keysym(0xfd1eu32);

/*
 * Latin 1
 * (ISO/IEC 8859-1 = Unicode U+0020..U+00FF)
 * Byte 3 = 0
 */
/// U+0020 SPACE
pub const KEY_space: Keysym =                         Keysym(0x0020u32);
/// U+0021 EXCLAMATION MARK
pub const KEY_exclam: Keysym =                        Keysym(0x0021u32);
/// U+0022 QUOTATION MARK
pub const KEY_quotedbl: Keysym =                      Keysym(0x0022u32);
/// U+0023 NUMBER SIGN
pub const KEY_numbersign: Keysym =                    Keysym(0x0023u32);
/// U+0024 DOLLAR SIGN
pub const KEY_dollar: Keysym =                        Keysym(0x0024u32);
/// U+0025 PERCENT SIGN
pub const KEY_percent: Keysym =                       Keysym(0x0025u32);
/// U+0026 AMPERSAND
pub const KEY_ampersand: Keysym =                     Keysym(0x0026u32);
/// U+0027 APOSTROPHE
pub const KEY_apostrophe: Keysym =                    Keysym(0x0027u32);
/// deprecated
pub const KEY_quoteright: Keysym =                    Keysym(0x0027u32);
/// U+0028 LEFT PARENTHESIS
pub const KEY_parenleft: Keysym =                     Keysym(0x0028u32);
/// U+0029 RIGHT PARENTHESIS
pub const KEY_parenright: Keysym =                    Keysym(0x0029u32);
/// U+002A ASTERISK
pub const KEY_asterisk: Keysym =                      Keysym(0x002au32);
/// U+002B PLUS SIGN
pub const KEY_plus: Keysym =                          Keysym(0x002bu32);
/// U+002C COMMA
pub const KEY_comma: Keysym =                         Keysym(0x002cu32);
pub const KEY_minus: Keysym =                         Keysym(0x002du32);
/// U+002E FULL STOP
pub const KEY_period: Keysym =                        Keysym(0x002eu32);
/// U+002F SOLIDUS
pub const KEY_slash: Keysym =                         Keysym(0x002fu32);
/// U+0030 DIGIT ZERO
pub const KEY_0: Keysym =                             Keysym(0x0030u32);
/// U+0031 DIGIT ONE
pub const KEY_1: Keysym =                             Keysym(0x0031u32);
/// U+0032 DIGIT TWO
pub const KEY_2: Keysym =                             Keysym(0x0032u32);
/// U+0033 DIGIT THREE
pub const KEY_3: Keysym =                             Keysym(0x0033u32);
/// U+0034 DIGIT FOUR
pub const KEY_4: Keysym =                             Keysym(0x0034u32);
/// U+0035 DIGIT FIVE
pub const KEY_5: Keysym =                             Keysym(0x0035u32);
/// U+0036 DIGIT SIX
pub const KEY_6: Keysym =                             Keysym(0x0036u32);
/// U+0037 DIGIT SEVEN
pub const KEY_7: Keysym =                             Keysym(0x0037u32);
/// U+0038 DIGIT EIGHT
pub const KEY_8: Keysym =                             Keysym(0x0038u32);
/// U+0039 DIGIT NINE
pub const KEY_9: Keysym =                             Keysym(0x0039u32);
/// U+003A COLON
pub const KEY_colon: Keysym =                         Keysym(0x003au32);
/// U+003B SEMICOLON
pub const KEY_semicolon: Keysym =                     Keysym(0x003bu32);
pub const KEY_less: Keysym =                          Keysym(0x003cu32);
/// U+003D EQUALS SIGN
pub const KEY_equal: Keysym =                         Keysym(0x003du32);
pub const KEY_greater: Keysym =                       Keysym(0x003eu32);
/// U+003F QUESTION MARK
pub const KEY_question: Keysym =                      Keysym(0x003fu32);
/// U+0040 COMMERCIAL AT
pub const KEY_at: Keysym =                            Keysym(0x0040u32);
/// U+0041 LATIN CAPITAL LETTER A
pub const KEY_A: Keysym =                             Keysym(0x0041u32);
/// U+0042 LATIN CAPITAL LETTER B
pub const KEY_B: Keysym =                             Keysym(0x0042u32);
/// U+0043 LATIN CAPITAL LETTER C
pub const KEY_C: Keysym =                             Keysym(0x0043u32);
/// U+0044 LATIN CAPITAL LETTER D
pub const KEY_D: Keysym =                             Keysym(0x0044u32);
/// U+0045 LATIN CAPITAL LETTER E
pub const KEY_E: Keysym =                             Keysym(0x0045u32);
/// U+0046 LATIN CAPITAL LETTER F
pub const KEY_F: Keysym =                             Keysym(0x0046u32);
/// U+0047 LATIN CAPITAL LETTER G
pub const KEY_G: Keysym =                             Keysym(0x0047u32);
/// U+0048 LATIN CAPITAL LETTER H
pub const KEY_H: Keysym =                             Keysym(0x0048u32);
/// U+0049 LATIN CAPITAL LETTER I
pub const KEY_I: Keysym =                             Keysym(0x0049u32);
/// U+004A LATIN CAPITAL LETTER J
pub const KEY_J: Keysym =                             Keysym(0x004au32);
/// U+004B LATIN CAPITAL LETTER K
pub const KEY_K: Keysym =                             Keysym(0x004bu32);
/// U+004C LATIN CAPITAL LETTER L
pub const KEY_L: Keysym =                             Keysym(0x004cu32);
/// U+004D LATIN CAPITAL LETTER M
pub const KEY_M: Keysym =                             Keysym(0x004du32);
/// U+004E LATIN CAPITAL LETTER N
pub const KEY_N: Keysym =                             Keysym(0x004eu32);
/// U+004F LATIN CAPITAL LETTER O
pub const KEY_O: Keysym =                             Keysym(0x004fu32);
/// U+0050 LATIN CAPITAL LETTER P
pub const KEY_P: Keysym =                             Keysym(0x0050u32);
/// U+0051 LATIN CAPITAL LETTER Q
pub const KEY_Q: Keysym =                             Keysym(0x0051u32);
/// U+0052 LATIN CAPITAL LETTER R
pub const KEY_R: Keysym =                             Keysym(0x0052u32);
/// U+0053 LATIN CAPITAL LETTER S
pub const KEY_S: Keysym =                             Keysym(0x0053u32);
/// U+0054 LATIN CAPITAL LETTER T
pub const KEY_T: Keysym =                             Keysym(0x0054u32);
/// U+0055 LATIN CAPITAL LETTER U
pub const KEY_U: Keysym =                             Keysym(0x0055u32);
/// U+0056 LATIN CAPITAL LETTER V
pub const KEY_V: Keysym =                             Keysym(0x0056u32);
/// U+0057 LATIN CAPITAL LETTER W
pub const KEY_W: Keysym =                             Keysym(0x0057u32);
/// U+0058 LATIN CAPITAL LETTER X
pub const KEY_X: Keysym =                             Keysym(0x0058u32);
/// U+0059 LATIN CAPITAL LETTER Y
pub const KEY_Y: Keysym =                             Keysym(0x0059u32);
/// U+005A LATIN CAPITAL LETTER Z
pub const KEY_Z: Keysym =                             Keysym(0x005au32);
/// U+005B LEFT SQUARE BRACKET
pub const KEY_bracketleft: Keysym =                   Keysym(0x005bu32);
/// U+005C REVERSE SOLIDUS
pub const KEY_backslash: Keysym =                     Keysym(0x005cu32);
/// U+005D RIGHT SQUARE BRACKET
pub const KEY_bracketright: Keysym =                  Keysym(0x005du32);
/// U+005E CIRCUMFLEX ACCENT
pub const KEY_asciicircum: Keysym =                   Keysym(0x005eu32);
/// U+005F LOW LINE
pub const KEY_underscore: Keysym =                    Keysym(0x005fu32);
/// U+0060 GRAVE ACCENT
pub const KEY_grave: Keysym =                         Keysym(0x0060u32);
/// deprecated
pub const KEY_quoteleft: Keysym =                     Keysym(0x0060u32);
/// U+0061 LATIN SMALL LETTER A
pub const KEY_a: Keysym =                             Keysym(0x0061u32);
/// U+0062 LATIN SMALL LETTER B
pub const KEY_b: Keysym =                             Keysym(0x0062u32);
/// U+0063 LATIN SMALL LETTER C
pub const KEY_c: Keysym =                             Keysym(0x0063u32);
/// U+0064 LATIN SMALL LETTER D
pub const KEY_d: Keysym =                             Keysym(0x0064u32);
/// U+0065 LATIN SMALL LETTER E
pub const KEY_e: Keysym =                             Keysym(0x0065u32);
/// U+0066 LATIN SMALL LETTER F
pub const KEY_f: Keysym =                             Keysym(0x0066u32);
/// U+0067 LATIN SMALL LETTER G
pub const KEY_g: Keysym =                             Keysym(0x0067u32);
/// U+0068 LATIN SMALL LETTER H
pub const KEY_h: Keysym =                             Keysym(0x0068u32);
/// U+0069 LATIN SMALL LETTER I
pub const KEY_i: Keysym =                             Keysym(0x0069u32);
/// U+006A LATIN SMALL LETTER J
pub const KEY_j: Keysym =                             Keysym(0x006au32);
/// U+006B LATIN SMALL LETTER K
pub const KEY_k: Keysym =                             Keysym(0x006bu32);
/// U+006C LATIN SMALL LETTER L
pub const KEY_l: Keysym =                             Keysym(0x006cu32);
/// U+006D LATIN SMALL LETTER M
pub const KEY_m: Keysym =                             Keysym(0x006du32);
/// U+006E LATIN SMALL LETTER N
pub const KEY_n: Keysym =                             Keysym(0x006eu32);
/// U+006F LATIN SMALL LETTER O
pub const KEY_o: Keysym =                             Keysym(0x006fu32);
/// U+0070 LATIN SMALL LETTER P
pub const KEY_p: Keysym =                             Keysym(0x0070u32);
/// U+0071 LATIN SMALL LETTER Q
pub const KEY_q: Keysym =                             Keysym(0x0071u32);
/// U+0072 LATIN SMALL LETTER R
pub const KEY_r: Keysym =                             Keysym(0x0072u32);
/// U+0073 LATIN SMALL LETTER S
pub const KEY_s: Keysym =                             Keysym(0x0073u32);
/// U+0074 LATIN SMALL LETTER T
pub const KEY_t: Keysym =                             Keysym(0x0074u32);
/// U+0075 LATIN SMALL LETTER U
pub const KEY_u: Keysym =                             Keysym(0x0075u32);
/// U+0076 LATIN SMALL LETTER V
pub const KEY_v: Keysym =                             Keysym(0x0076u32);
/// U+0077 LATIN SMALL LETTER W
pub const KEY_w: Keysym =                             Keysym(0x0077u32);
/// U+0078 LATIN SMALL LETTER X
pub const KEY_x: Keysym =                             Keysym(0x0078u32);
/// U+0079 LATIN SMALL LETTER Y
pub const KEY_y: Keysym =                             Keysym(0x0079u32);
/// U+007A LATIN SMALL LETTER Z
pub const KEY_z: Keysym =                             Keysym(0x007au32);
/// U+007B LEFT CURLY BRACKET
pub const KEY_braceleft: Keysym =                     Keysym(0x007bu32);
/// U+007C VERTICAL LINE
pub const KEY_bar: Keysym =                           Keysym(0x007cu32);
/// U+007D RIGHT CURLY BRACKET
pub const KEY_braceright: Keysym =                    Keysym(0x007du32);
/// U+007E TILDE
pub const KEY_asciitilde: Keysym =                    Keysym(0x007eu32);

pub const KEY_nobreakspace: Keysym =                  Keysym(0x00a0u32);
/// U+00A1 INVERTED EXCLAMATION MARK
pub const KEY_exclamdown: Keysym =                    Keysym(0x00a1u32);
/// U+00A2 CENT SIGN
pub const KEY_cent: Keysym =                          Keysym(0x00a2u32);
/// U+00A3 POUND SIGN
pub const KEY_sterling: Keysym =                      Keysym(0x00a3u32);
/// U+00A4 CURRENCY SIGN
pub const KEY_currency: Keysym =                      Keysym(0x00a4u32);
/// U+00A5 YEN SIGN
pub const KEY_yen: Keysym =                           Keysym(0x00a5u32);
/// U+00A6 BROKEN BAR
pub const KEY_brokenbar: Keysym =                     Keysym(0x00a6u32);
/// U+00A7 SECTION SIGN
pub const KEY_section: Keysym =                       Keysym(0x00a7u32);
/// U+00A8 DIAERESIS
pub const KEY_diaeresis: Keysym =                     Keysym(0x00a8u32);
/// U+00A9 COPYRIGHT SIGN
pub const KEY_copyright: Keysym =                     Keysym(0x00a9u32);
/// U+00AA FEMININE ORDINAL INDICATOR
pub const KEY_ordfeminine: Keysym =                   Keysym(0x00aau32);
pub const KEY_guillemotleft: Keysym =                 Keysym(0x00abu32);
/// U+00AC NOT SIGN
pub const KEY_notsign: Keysym =                       Keysym(0x00acu32);
/// U+00AD SOFT HYPHEN
pub const KEY_hyphen: Keysym =                        Keysym(0x00adu32);
/// U+00AE REGISTERED SIGN
pub const KEY_registered: Keysym =                    Keysym(0x00aeu32);
/// U+00AF MACRON
pub const KEY_macron: Keysym =                        Keysym(0x00afu32);
/// U+00B0 DEGREE SIGN
pub const KEY_degree: Keysym =                        Keysym(0x00b0u32);
pub const KEY_plusminus: Keysym =                     Keysym(0x00b1u32);
/// U+00B2 SUPERSCRIPT TWO
pub const KEY_twosuperior: Keysym =                   Keysym(0x00b2u32);
/// U+00B3 SUPERSCRIPT THREE
pub const KEY_threesuperior: Keysym =                 Keysym(0x00b3u32);
/// U+00B4 ACUTE ACCENT
pub const KEY_acute: Keysym =                         Keysym(0x00b4u32);
/// U+00B5 MICRO SIGN
pub const KEY_mu: Keysym =                            Keysym(0x00b5u32);
/// U+00B6 PILCROW SIGN
pub const KEY_paragraph: Keysym =                     Keysym(0x00b6u32);
/// U+00B7 MIDDLE DOT
pub const KEY_periodcentered: Keysym =                Keysym(0x00b7u32);
/// U+00B8 CEDILLA
pub const KEY_cedilla: Keysym =                       Keysym(0x00b8u32);
/// U+00B9 SUPERSCRIPT ONE
pub const KEY_onesuperior: Keysym =                   Keysym(0x00b9u32);
/// U+00BA MASCULINE ORDINAL INDICATOR
pub const KEY_masculine: Keysym =                     Keysym(0x00bau32);
pub const KEY_guillemotright: Keysym =                Keysym(0x00bbu32);
/// U+00BC VULGAR FRACTION ONE QUARTER
pub const KEY_onequarter: Keysym =                    Keysym(0x00bcu32);
/// U+00BD VULGAR FRACTION ONE HALF
pub const KEY_onehalf: Keysym =                       Keysym(0x00bdu32);
/// U+00BE VULGAR FRACTION THREE QUARTERS
pub const KEY_threequarters: Keysym =                 Keysym(0x00beu32);
/// U+00BF INVERTED QUESTION MARK
pub const KEY_questiondown: Keysym =                  Keysym(0x00bfu32);
/// U+00C0 LATIN CAPITAL LETTER A WITH GRAVE
pub const KEY_Agrave: Keysym =                        Keysym(0x00c0u32);
/// U+00C1 LATIN CAPITAL LETTER A WITH ACUTE
pub const KEY_Aacute: Keysym =                        Keysym(0x00c1u32);
/// U+00C2 LATIN CAPITAL LETTER A WITH CIRCUMFLEX
pub const KEY_Acircumflex: Keysym =                   Keysym(0x00c2u32);
/// U+00C3 LATIN CAPITAL LETTER A WITH TILDE
pub const KEY_Atilde: Keysym =                        Keysym(0x00c3u32);
/// U+00C4 LATIN CAPITAL LETTER A WITH DIAERESIS
pub const KEY_Adiaeresis: Keysym =                    Keysym(0x00c4u32);
/// U+00C5 LATIN CAPITAL LETTER A WITH RING ABOVE
pub const KEY_Aring: Keysym =                         Keysym(0x00c5u32);
/// U+00C6 LATIN CAPITAL LETTER AE
pub const KEY_AE: Keysym =                            Keysym(0x00c6u32);
/// U+00C7 LATIN CAPITAL LETTER C WITH CEDILLA
pub const KEY_Ccedilla: Keysym =                      Keysym(0x00c7u32);
/// U+00C8 LATIN CAPITAL LETTER E WITH GRAVE
pub const KEY_Egrave: Keysym =                        Keysym(0x00c8u32);
/// U+00C9 LATIN CAPITAL LETTER E WITH ACUTE
pub const KEY_Eacute: Keysym =                        Keysym(0x00c9u32);
/// U+00CA LATIN CAPITAL LETTER E WITH CIRCUMFLEX
pub const KEY_Ecircumflex: Keysym =                   Keysym(0x00cau32);
/// U+00CB LATIN CAPITAL LETTER E WITH DIAERESIS
pub const KEY_Ediaeresis: Keysym =                    Keysym(0x00cbu32);
/// U+00CC LATIN CAPITAL LETTER I WITH GRAVE
pub const KEY_Igrave: Keysym =                        Keysym(0x00ccu32);
/// U+00CD LATIN CAPITAL LETTER I WITH ACUTE
pub const KEY_Iacute: Keysym =                        Keysym(0x00cdu32);
/// U+00CE LATIN CAPITAL LETTER I WITH CIRCUMFLEX
pub const KEY_Icircumflex: Keysym =                   Keysym(0x00ceu32);
/// U+00CF LATIN CAPITAL LETTER I WITH DIAERESIS
pub const KEY_Idiaeresis: Keysym =                    Keysym(0x00cfu32);
/// U+00D0 LATIN CAPITAL LETTER ETH
pub const KEY_ETH: Keysym =                           Keysym(0x00d0u32);
/// deprecated
pub const KEY_Eth: Keysym =                           Keysym(0x00d0u32);
/// U+00D1 LATIN CAPITAL LETTER N WITH TILDE
pub const KEY_Ntilde: Keysym =                        Keysym(0x00d1u32);
/// U+00D2 LATIN CAPITAL LETTER O WITH GRAVE
pub const KEY_Ograve: Keysym =                        Keysym(0x00d2u32);
/// U+00D3 LATIN CAPITAL LETTER O WITH ACUTE
pub const KEY_Oacute: Keysym =                        Keysym(0x00d3u32);
/// U+00D4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX
pub const KEY_Ocircumflex: Keysym =                   Keysym(0x00d4u32);
/// U+00D5 LATIN CAPITAL LETTER O WITH TILDE
pub const KEY_Otilde: Keysym =                        Keysym(0x00d5u32);
/// U+00D6 LATIN CAPITAL LETTER O WITH DIAERESIS
pub const KEY_Odiaeresis: Keysym =                    Keysym(0x00d6u32);
/// U+00D7 MULTIPLICATION SIGN
pub const KEY_multiply: Keysym =                      Keysym(0x00d7u32);
/// U+00D8 LATIN CAPITAL LETTER O WITH STROKE
pub const KEY_Oslash: Keysym =                        Keysym(0x00d8u32);
/// U+00D8 LATIN CAPITAL LETTER O WITH STROKE
pub const KEY_Ooblique: Keysym =                      Keysym(0x00d8u32);
/// U+00D9 LATIN CAPITAL LETTER U WITH GRAVE
pub const KEY_Ugrave: Keysym =                        Keysym(0x00d9u32);
/// U+00DA LATIN CAPITAL LETTER U WITH ACUTE
pub const KEY_Uacute: Keysym =                        Keysym(0x00dau32);
/// U+00DB LATIN CAPITAL LETTER U WITH CIRCUMFLEX
pub const KEY_Ucircumflex: Keysym =                   Keysym(0x00dbu32);
/// U+00DC LATIN CAPITAL LETTER U WITH DIAERESIS
pub const KEY_Udiaeresis: Keysym =                    Keysym(0x00dcu32);
/// U+00DD LATIN CAPITAL LETTER Y WITH ACUTE
pub const KEY_Yacute: Keysym =                        Keysym(0x00ddu32);
/// U+00DE LATIN CAPITAL LETTER THORN
pub const KEY_THORN: Keysym =                         Keysym(0x00deu32);
/// deprecated
pub const KEY_Thorn: Keysym =                         Keysym(0x00deu32);
/// U+00DF LATIN SMALL LETTER SHARP S
pub const KEY_ssharp: Keysym =                        Keysym(0x00dfu32);
/// U+00E0 LATIN SMALL LETTER A WITH GRAVE
pub const KEY_agrave: Keysym =                        Keysym(0x00e0u32);
/// U+00E1 LATIN SMALL LETTER A WITH ACUTE
pub const KEY_aacute: Keysym =                        Keysym(0x00e1u32);
/// U+00E2 LATIN SMALL LETTER A WITH CIRCUMFLEX
pub const KEY_acircumflex: Keysym =                   Keysym(0x00e2u32);
/// U+00E3 LATIN SMALL LETTER A WITH TILDE
pub const KEY_atilde: Keysym =                        Keysym(0x00e3u32);
/// U+00E4 LATIN SMALL LETTER A WITH DIAERESIS
pub const KEY_adiaeresis: Keysym =                    Keysym(0x00e4u32);
/// U+00E5 LATIN SMALL LETTER A WITH RING ABOVE
pub const KEY_aring: Keysym =                         Keysym(0x00e5u32);
/// U+00E6 LATIN SMALL LETTER AE
pub const KEY_ae: Keysym =                            Keysym(0x00e6u32);
/// U+00E7 LATIN SMALL LETTER C WITH CEDILLA
pub const KEY_ccedilla: Keysym =                      Keysym(0x00e7u32);
/// U+00E8 LATIN SMALL LETTER E WITH GRAVE
pub const KEY_egrave: Keysym =                        Keysym(0x00e8u32);
/// U+00E9 LATIN SMALL LETTER E WITH ACUTE
pub const KEY_eacute: Keysym =                        Keysym(0x00e9u32);
/// U+00EA LATIN SMALL LETTER E WITH CIRCUMFLEX
pub const KEY_ecircumflex: Keysym =                   Keysym(0x00eau32);
/// U+00EB LATIN SMALL LETTER E WITH DIAERESIS
pub const KEY_ediaeresis: Keysym =                    Keysym(0x00ebu32);
/// U+00EC LATIN SMALL LETTER I WITH GRAVE
pub const KEY_igrave: Keysym =                        Keysym(0x00ecu32);
/// U+00ED LATIN SMALL LETTER I WITH ACUTE
pub const KEY_iacute: Keysym =                        Keysym(0x00edu32);
/// U+00EE LATIN SMALL LETTER I WITH CIRCUMFLEX
pub const KEY_icircumflex: Keysym =                   Keysym(0x00eeu32);
/// U+00EF LATIN SMALL LETTER I WITH DIAERESIS
pub const KEY_idiaeresis: Keysym =                    Keysym(0x00efu32);
/// U+00F0 LATIN SMALL LETTER ETH
pub const KEY_eth: Keysym =                           Keysym(0x00f0u32);
/// U+00F1 LATIN SMALL LETTER N WITH TILDE
pub const KEY_ntilde: Keysym =                        Keysym(0x00f1u32);
/// U+00F2 LATIN SMALL LETTER O WITH GRAVE
pub const KEY_ograve: Keysym =                        Keysym(0x00f2u32);
/// U+00F3 LATIN SMALL LETTER O WITH ACUTE
pub const KEY_oacute: Keysym =                        Keysym(0x00f3u32);
/// U+00F4 LATIN SMALL LETTER O WITH CIRCUMFLEX
pub const KEY_ocircumflex: Keysym =                   Keysym(0x00f4u32);
/// U+00F5 LATIN SMALL LETTER O WITH TILDE
pub const KEY_otilde: Keysym =                        Keysym(0x00f5u32);
/// U+00F6 LATIN SMALL LETTER O WITH DIAERESIS
pub const KEY_odiaeresis: Keysym =                    Keysym(0x00f6u32);
/// U+00F7 DIVISION SIGN
pub const KEY_division: Keysym =                      Keysym(0x00f7u32);
/// U+00F8 LATIN SMALL LETTER O WITH STROKE
pub const KEY_oslash: Keysym =                        Keysym(0x00f8u32);
/// U+00F8 LATIN SMALL LETTER O WITH STROKE
pub const KEY_ooblique: Keysym =                      Keysym(0x00f8u32);
/// U+00F9 LATIN SMALL LETTER U WITH GRAVE
pub const KEY_ugrave: Keysym =                        Keysym(0x00f9u32);
/// U+00FA LATIN SMALL LETTER U WITH ACUTE
pub const KEY_uacute: Keysym =                        Keysym(0x00fau32);
/// U+00FB LATIN SMALL LETTER U WITH CIRCUMFLEX
pub const KEY_ucircumflex: Keysym =                   Keysym(0x00fbu32);
/// U+00FC LATIN SMALL LETTER U WITH DIAERESIS
pub const KEY_udiaeresis: Keysym =                    Keysym(0x00fcu32);
/// U+00FD LATIN SMALL LETTER Y WITH ACUTE
pub const KEY_yacute: Keysym =                        Keysym(0x00fdu32);
/// U+00FE LATIN SMALL LETTER THORN
pub const KEY_thorn: Keysym =                         Keysym(0x00feu32);
/// U+00FF LATIN SMALL LETTER Y WITH DIAERESIS
pub const KEY_ydiaeresis: Keysym =                    Keysym(0x00ffu32);

/*
 * Latin 2
 * Byte 3 = 1
 */

/// U+0104 LATIN CAPITAL LETTER A WITH OGONEK
pub const KEY_Aogonek: Keysym =                       Keysym(0x01a1u32);
/// U+02D8 BREVE
pub const KEY_breve: Keysym =                         Keysym(0x01a2u32);
/// U+0141 LATIN CAPITAL LETTER L WITH STROKE
pub const KEY_Lstroke: Keysym =                       Keysym(0x01a3u32);
/// U+013D LATIN CAPITAL LETTER L WITH CARON
pub const KEY_Lcaron: Keysym =                        Keysym(0x01a5u32);
/// U+015A LATIN CAPITAL LETTER S WITH ACUTE
pub const KEY_Sacute: Keysym =                        Keysym(0x01a6u32);
/// U+0160 LATIN CAPITAL LETTER S WITH CARON
pub const KEY_Scaron: Keysym =                        Keysym(0x01a9u32);
/// U+015E LATIN CAPITAL LETTER S WITH CEDILLA
pub const KEY_Scedilla: Keysym =                      Keysym(0x01aau32);
/// U+0164 LATIN CAPITAL LETTER T WITH CARON
pub const KEY_Tcaron: Keysym =                        Keysym(0x01abu32);
/// U+0179 LATIN CAPITAL LETTER Z WITH ACUTE
pub const KEY_Zacute: Keysym =                        Keysym(0x01acu32);
/// U+017D LATIN CAPITAL LETTER Z WITH CARON
pub const KEY_Zcaron: Keysym =                        Keysym(0x01aeu32);
/// U+017B LATIN CAPITAL LETTER Z WITH DOT ABOVE
pub const KEY_Zabovedot: Keysym =                     Keysym(0x01afu32);
/// U+0105 LATIN SMALL LETTER A WITH OGONEK
pub const KEY_aogonek: Keysym =                       Keysym(0x01b1u32);
/// U+02DB OGONEK
pub const KEY_ogonek: Keysym =                        Keysym(0x01b2u32);
/// U+0142 LATIN SMALL LETTER L WITH STROKE
pub const KEY_lstroke: Keysym =                       Keysym(0x01b3u32);
/// U+013E LATIN SMALL LETTER L WITH CARON
pub const KEY_lcaron: Keysym =                        Keysym(0x01b5u32);
/// U+015B LATIN SMALL LETTER S WITH ACUTE
pub const KEY_sacute: Keysym =                        Keysym(0x01b6u32);
/// U+02C7 CARON
pub const KEY_caron: Keysym =                         Keysym(0x01b7u32);
/// U+0161 LATIN SMALL LETTER S WITH CARON
pub const KEY_scaron: Keysym =                        Keysym(0x01b9u32);
/// U+015F LATIN SMALL LETTER S WITH CEDILLA
pub const KEY_scedilla: Keysym =                      Keysym(0x01bau32);
/// U+0165 LATIN SMALL LETTER T WITH CARON
pub const KEY_tcaron: Keysym =                        Keysym(0x01bbu32);
/// U+017A LATIN SMALL LETTER Z WITH ACUTE
pub const KEY_zacute: Keysym =                        Keysym(0x01bcu32);
/// U+02DD DOUBLE ACUTE ACCENT
pub const KEY_doubleacute: Keysym =                   Keysym(0x01bdu32);
/// U+017E LATIN SMALL LETTER Z WITH CARON
pub const KEY_zcaron: Keysym =                        Keysym(0x01beu32);
/// U+017C LATIN SMALL LETTER Z WITH DOT ABOVE
pub const KEY_zabovedot: Keysym =                     Keysym(0x01bfu32);
/// U+0154 LATIN CAPITAL LETTER R WITH ACUTE
pub const KEY_Racute: Keysym =                        Keysym(0x01c0u32);
/// U+0102 LATIN CAPITAL LETTER A WITH BREVE
pub const KEY_Abreve: Keysym =                        Keysym(0x01c3u32);
/// U+0139 LATIN CAPITAL LETTER L WITH ACUTE
pub const KEY_Lacute: Keysym =                        Keysym(0x01c5u32);
/// U+0106 LATIN CAPITAL LETTER C WITH ACUTE
pub const KEY_Cacute: Keysym =                        Keysym(0x01c6u32);
/// U+010C LATIN CAPITAL LETTER C WITH CARON
pub const KEY_Ccaron: Keysym =                        Keysym(0x01c8u32);
/// U+0118 LATIN CAPITAL LETTER E WITH OGONEK
pub const KEY_Eogonek: Keysym =                       Keysym(0x01cau32);
/// U+011A LATIN CAPITAL LETTER E WITH CARON
pub const KEY_Ecaron: Keysym =                        Keysym(0x01ccu32);
/// U+010E LATIN CAPITAL LETTER D WITH CARON
pub const KEY_Dcaron: Keysym =                        Keysym(0x01cfu32);
/// U+0110 LATIN CAPITAL LETTER D WITH STROKE
pub const KEY_Dstroke: Keysym =                       Keysym(0x01d0u32);
/// U+0143 LATIN CAPITAL LETTER N WITH ACUTE
pub const KEY_Nacute: Keysym =                        Keysym(0x01d1u32);
/// U+0147 LATIN CAPITAL LETTER N WITH CARON
pub const KEY_Ncaron: Keysym =                        Keysym(0x01d2u32);
/// U+0150 LATIN CAPITAL LETTER O WITH DOUBLE ACUTE
pub const KEY_Odoubleacute: Keysym =                  Keysym(0x01d5u32);
/// U+0158 LATIN CAPITAL LETTER R WITH CARON
pub const KEY_Rcaron: Keysym =                        Keysym(0x01d8u32);
/// U+016E LATIN CAPITAL LETTER U WITH RING ABOVE
pub const KEY_Uring: Keysym =                         Keysym(0x01d9u32);
/// U+0170 LATIN CAPITAL LETTER U WITH DOUBLE ACUTE
pub const KEY_Udoubleacute: Keysym =                  Keysym(0x01dbu32);
/// U+0162 LATIN CAPITAL LETTER T WITH CEDILLA
pub const KEY_Tcedilla: Keysym =                      Keysym(0x01deu32);
/// U+0155 LATIN SMALL LETTER R WITH ACUTE
pub const KEY_racute: Keysym =                        Keysym(0x01e0u32);
/// U+0103 LATIN SMALL LETTER A WITH BREVE
pub const KEY_abreve: Keysym =                        Keysym(0x01e3u32);
/// U+013A LATIN SMALL LETTER L WITH ACUTE
pub const KEY_lacute: Keysym =                        Keysym(0x01e5u32);
/// U+0107 LATIN SMALL LETTER C WITH ACUTE
pub const KEY_cacute: Keysym =                        Keysym(0x01e6u32);
/// U+010D LATIN SMALL LETTER C WITH CARON
pub const KEY_ccaron: Keysym =                        Keysym(0x01e8u32);
/// U+0119 LATIN SMALL LETTER E WITH OGONEK
pub const KEY_eogonek: Keysym =                       Keysym(0x01eau32);
/// U+011B LATIN SMALL LETTER E WITH CARON
pub const KEY_ecaron: Keysym =                        Keysym(0x01ecu32);
/// U+010F LATIN SMALL LETTER D WITH CARON
pub const KEY_dcaron: Keysym =                        Keysym(0x01efu32);
/// U+0111 LATIN SMALL LETTER D WITH STROKE
pub const KEY_dstroke: Keysym =                       Keysym(0x01f0u32);
/// U+0144 LATIN SMALL LETTER N WITH ACUTE
pub const KEY_nacute: Keysym =                        Keysym(0x01f1u32);
/// U+0148 LATIN SMALL LETTER N WITH CARON
pub const KEY_ncaron: Keysym =                        Keysym(0x01f2u32);
/// U+0151 LATIN SMALL LETTER O WITH DOUBLE ACUTE
pub const KEY_odoubleacute: Keysym =                  Keysym(0x01f5u32);
/// U+0159 LATIN SMALL LETTER R WITH CARON
pub const KEY_rcaron: Keysym =                        Keysym(0x01f8u32);
/// U+016F LATIN SMALL LETTER U WITH RING ABOVE
pub const KEY_uring: Keysym =                         Keysym(0x01f9u32);
/// U+0171 LATIN SMALL LETTER U WITH DOUBLE ACUTE
pub const KEY_udoubleacute: Keysym =                  Keysym(0x01fbu32);
/// U+0163 LATIN SMALL LETTER T WITH CEDILLA
pub const KEY_tcedilla: Keysym =                      Keysym(0x01feu32);
/// U+02D9 DOT ABOVE
pub const KEY_abovedot: Keysym =                      Keysym(0x01ffu32);

/*
 * Latin 3
 * Byte 3 = 2
 */

/// U+0126 LATIN CAPITAL LETTER H WITH STROKE
pub const KEY_Hstroke: Keysym =                       Keysym(0x02a1u32);
/// U+0124 LATIN CAPITAL LETTER H WITH CIRCUMFLEX
pub const KEY_Hcircumflex: Keysym =                   Keysym(0x02a6u32);
/// U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE
pub const KEY_Iabovedot: Keysym =                     Keysym(0x02a9u32);
/// U+011E LATIN CAPITAL LETTER G WITH BREVE
pub const KEY_Gbreve: Keysym =                        Keysym(0x02abu32);
/// U+0134 LATIN CAPITAL LETTER J WITH CIRCUMFLEX
pub const KEY_Jcircumflex: Keysym =                   Keysym(0x02acu32);
/// U+0127 LATIN SMALL LETTER H WITH STROKE
pub const KEY_hstroke: Keysym =                       Keysym(0x02b1u32);
/// U+0125 LATIN SMALL LETTER H WITH CIRCUMFLEX
pub const KEY_hcircumflex: Keysym =                   Keysym(0x02b6u32);
/// U+0131 LATIN SMALL LETTER DOTLESS I
pub const KEY_idotless: Keysym =                      Keysym(0x02b9u32);
/// U+011F LATIN SMALL LETTER G WITH BREVE
pub const KEY_gbreve: Keysym =                        Keysym(0x02bbu32);
/// U+0135 LATIN SMALL LETTER J WITH CIRCUMFLEX
pub const KEY_jcircumflex: Keysym =                   Keysym(0x02bcu32);
/// U+010A LATIN CAPITAL LETTER C WITH DOT ABOVE
pub const KEY_Cabovedot: Keysym =                     Keysym(0x02c5u32);
/// U+0108 LATIN CAPITAL LETTER C WITH CIRCUMFLEX
pub const KEY_Ccircumflex: Keysym =                   Keysym(0x02c6u32);
/// U+0120 LATIN CAPITAL LETTER G WITH DOT ABOVE
pub const KEY_Gabovedot: Keysym =                     Keysym(0x02d5u32);
/// U+011C LATIN CAPITAL LETTER G WITH CIRCUMFLEX
pub const KEY_Gcircumflex: Keysym =                   Keysym(0x02d8u32);
/// U+016C LATIN CAPITAL LETTER U WITH BREVE
pub const KEY_Ubreve: Keysym =                        Keysym(0x02ddu32);
/// U+015C LATIN CAPITAL LETTER S WITH CIRCUMFLEX
pub const KEY_Scircumflex: Keysym =                   Keysym(0x02deu32);
/// U+010B LATIN SMALL LETTER C WITH DOT ABOVE
pub const KEY_cabovedot: Keysym =                     Keysym(0x02e5u32);
/// U+0109 LATIN SMALL LETTER C WITH CIRCUMFLEX
pub const KEY_ccircumflex: Keysym =                   Keysym(0x02e6u32);
/// U+0121 LATIN SMALL LETTER G WITH DOT ABOVE
pub const KEY_gabovedot: Keysym =                     Keysym(0x02f5u32);
/// U+011D LATIN SMALL LETTER G WITH CIRCUMFLEX
pub const KEY_gcircumflex: Keysym =                   Keysym(0x02f8u32);
/// U+016D LATIN SMALL LETTER U WITH BREVE
pub const KEY_ubreve: Keysym =                        Keysym(0x02fdu32);
/// U+015D LATIN SMALL LETTER S WITH CIRCUMFLEX
pub const KEY_scircumflex: Keysym =                   Keysym(0x02feu32);


/*
 * Latin 4
 * Byte 3 = 3
 */

/// U+0138 LATIN SMALL LETTER KRA
pub const KEY_kra: Keysym =                           Keysym(0x03a2u32);
/// deprecated
pub const KEY_kappa: Keysym =                         Keysym(0x03a2u32);
/// U+0156 LATIN CAPITAL LETTER R WITH CEDILLA
pub const KEY_Rcedilla: Keysym =                      Keysym(0x03a3u32);
/// U+0128 LATIN CAPITAL LETTER I WITH TILDE
pub const KEY_Itilde: Keysym =                        Keysym(0x03a5u32);
/// U+013B LATIN CAPITAL LETTER L WITH CEDILLA
pub const KEY_Lcedilla: Keysym =                      Keysym(0x03a6u32);
/// U+0112 LATIN CAPITAL LETTER E WITH MACRON
pub const KEY_Emacron: Keysym =                       Keysym(0x03aau32);
/// U+0122 LATIN CAPITAL LETTER G WITH CEDILLA
pub const KEY_Gcedilla: Keysym =                      Keysym(0x03abu32);
/// U+0166 LATIN CAPITAL LETTER T WITH STROKE
pub const KEY_Tslash: Keysym =                        Keysym(0x03acu32);
/// U+0157 LATIN SMALL LETTER R WITH CEDILLA
pub const KEY_rcedilla: Keysym =                      Keysym(0x03b3u32);
/// U+0129 LATIN SMALL LETTER I WITH TILDE
pub const KEY_itilde: Keysym =                        Keysym(0x03b5u32);
/// U+013C LATIN SMALL LETTER L WITH CEDILLA
pub const KEY_lcedilla: Keysym =                      Keysym(0x03b6u32);
/// U+0113 LATIN SMALL LETTER E WITH MACRON
pub const KEY_emacron: Keysym =                       Keysym(0x03bau32);
/// U+0123 LATIN SMALL LETTER G WITH CEDILLA
pub const KEY_gcedilla: Keysym =                      Keysym(0x03bbu32);
/// U+0167 LATIN SMALL LETTER T WITH STROKE
pub const KEY_tslash: Keysym =                        Keysym(0x03bcu32);
/// U+014A LATIN CAPITAL LETTER ENG
pub const KEY_ENG: Keysym =                           Keysym(0x03bdu32);
/// U+014B LATIN SMALL LETTER ENG
pub const KEY_eng: Keysym =                           Keysym(0x03bfu32);
/// U+0100 LATIN CAPITAL LETTER A WITH MACRON
pub const KEY_Amacron: Keysym =                       Keysym(0x03c0u32);
/// U+012E LATIN CAPITAL LETTER I WITH OGONEK
pub const KEY_Iogonek: Keysym =                       Keysym(0x03c7u32);
/// U+0116 LATIN CAPITAL LETTER E WITH DOT ABOVE
pub const KEY_Eabovedot: Keysym =                     Keysym(0x03ccu32);
/// U+012A LATIN CAPITAL LETTER I WITH MACRON
pub const KEY_Imacron: Keysym =                       Keysym(0x03cfu32);
/// U+0145 LATIN CAPITAL LETTER N WITH CEDILLA
pub const KEY_Ncedilla: Keysym =                      Keysym(0x03d1u32);
/// U+014C LATIN CAPITAL LETTER O WITH MACRON
pub const KEY_Omacron: Keysym =                       Keysym(0x03d2u32);
/// U+0136 LATIN CAPITAL LETTER K WITH CEDILLA
pub const KEY_Kcedilla: Keysym =                      Keysym(0x03d3u32);
/// U+0172 LATIN CAPITAL LETTER U WITH OGONEK
pub const KEY_Uogonek: Keysym =                       Keysym(0x03d9u32);
/// U+0168 LATIN CAPITAL LETTER U WITH TILDE
pub const KEY_Utilde: Keysym =                        Keysym(0x03ddu32);
/// U+016A LATIN CAPITAL LETTER U WITH MACRON
pub const KEY_Umacron: Keysym =                       Keysym(0x03deu32);
/// U+0101 LATIN SMALL LETTER A WITH MACRON
pub const KEY_amacron: Keysym =                       Keysym(0x03e0u32);
/// U+012F LATIN SMALL LETTER I WITH OGONEK
pub const KEY_iogonek: Keysym =                       Keysym(0x03e7u32);
/// U+0117 LATIN SMALL LETTER E WITH DOT ABOVE
pub const KEY_eabovedot: Keysym =                     Keysym(0x03ecu32);
/// U+012B LATIN SMALL LETTER I WITH MACRON
pub const KEY_imacron: Keysym =                       Keysym(0x03efu32);
/// U+0146 LATIN SMALL LETTER N WITH CEDILLA
pub const KEY_ncedilla: Keysym =                      Keysym(0x03f1u32);
/// U+014D LATIN SMALL LETTER O WITH MACRON
pub const KEY_omacron: Keysym =                       Keysym(0x03f2u32);
/// U+0137 LATIN SMALL LETTER K WITH CEDILLA
pub const KEY_kcedilla: Keysym =                      Keysym(0x03f3u32);
/// U+0173 LATIN SMALL LETTER U WITH OGONEK
pub const KEY_uogonek: Keysym =                       Keysym(0x03f9u32);
/// U+0169 LATIN SMALL LETTER U WITH TILDE
pub const KEY_utilde: Keysym =                        Keysym(0x03fdu32);
/// U+016B LATIN SMALL LETTER U WITH MACRON
pub const KEY_umacron: Keysym =                       Keysym(0x03feu32);

/*
 * Latin 8
 */
/// U+0174 LATIN CAPITAL LETTER W WITH CIRCUMFLEX
pub const KEY_Wcircumflex: Keysym =                   Keysym(0x1000174u32);
/// U+0175 LATIN SMALL LETTER W WITH CIRCUMFLEX
pub const KEY_wcircumflex: Keysym =                   Keysym(0x1000175u32);
/// U+0176 LATIN CAPITAL LETTER Y WITH CIRCUMFLEX
pub const KEY_Ycircumflex: Keysym =                   Keysym(0x1000176u32);
/// U+0177 LATIN SMALL LETTER Y WITH CIRCUMFLEX
pub const KEY_ycircumflex: Keysym =                   Keysym(0x1000177u32);
/// U+1E02 LATIN CAPITAL LETTER B WITH DOT ABOVE
pub const KEY_Babovedot: Keysym =                     Keysym(0x1001e02u32);
/// U+1E03 LATIN SMALL LETTER B WITH DOT ABOVE
pub const KEY_babovedot: Keysym =                     Keysym(0x1001e03u32);
/// U+1E0A LATIN CAPITAL LETTER D WITH DOT ABOVE
pub const KEY_Dabovedot: Keysym =                     Keysym(0x1001e0au32);
/// U+1E0B LATIN SMALL LETTER D WITH DOT ABOVE
pub const KEY_dabovedot: Keysym =                     Keysym(0x1001e0bu32);
/// U+1E1E LATIN CAPITAL LETTER F WITH DOT ABOVE
pub const KEY_Fabovedot: Keysym =                     Keysym(0x1001e1eu32);
/// U+1E1F LATIN SMALL LETTER F WITH DOT ABOVE
pub const KEY_fabovedot: Keysym =                     Keysym(0x1001e1fu32);
/// U+1E40 LATIN CAPITAL LETTER M WITH DOT ABOVE
pub const KEY_Mabovedot: Keysym =                     Keysym(0x1001e40u32);
/// U+1E41 LATIN SMALL LETTER M WITH DOT ABOVE
pub const KEY_mabovedot: Keysym =                     Keysym(0x1001e41u32);
/// U+1E56 LATIN CAPITAL LETTER P WITH DOT ABOVE
pub const KEY_Pabovedot: Keysym =                     Keysym(0x1001e56u32);
/// U+1E57 LATIN SMALL LETTER P WITH DOT ABOVE
pub const KEY_pabovedot: Keysym =                     Keysym(0x1001e57u32);
/// U+1E60 LATIN CAPITAL LETTER S WITH DOT ABOVE
pub const KEY_Sabovedot: Keysym =                     Keysym(0x1001e60u32);
/// U+1E61 LATIN SMALL LETTER S WITH DOT ABOVE
pub const KEY_sabovedot: Keysym =                     Keysym(0x1001e61u32);
/// U+1E6A LATIN CAPITAL LETTER T WITH DOT ABOVE
pub const KEY_Tabovedot: Keysym =                     Keysym(0x1001e6au32);
/// U+1E6B LATIN SMALL LETTER T WITH DOT ABOVE
pub const KEY_tabovedot: Keysym =                     Keysym(0x1001e6bu32);
/// U+1E80 LATIN CAPITAL LETTER W WITH GRAVE
pub const KEY_Wgrave: Keysym =                        Keysym(0x1001e80u32);
/// U+1E81 LATIN SMALL LETTER W WITH GRAVE
pub const KEY_wgrave: Keysym =                        Keysym(0x1001e81u32);
/// U+1E82 LATIN CAPITAL LETTER W WITH ACUTE
pub const KEY_Wacute: Keysym =                        Keysym(0x1001e82u32);
/// U+1E83 LATIN SMALL LETTER W WITH ACUTE
pub const KEY_wacute: Keysym =                        Keysym(0x1001e83u32);
/// U+1E84 LATIN CAPITAL LETTER W WITH DIAERESIS
pub const KEY_Wdiaeresis: Keysym =                    Keysym(0x1001e84u32);
/// U+1E85 LATIN SMALL LETTER W WITH DIAERESIS
pub const KEY_wdiaeresis: Keysym =                    Keysym(0x1001e85u32);
/// U+1EF2 LATIN CAPITAL LETTER Y WITH GRAVE
pub const KEY_Ygrave: Keysym =                        Keysym(0x1001ef2u32);
/// U+1EF3 LATIN SMALL LETTER Y WITH GRAVE
pub const KEY_ygrave: Keysym =                        Keysym(0x1001ef3u32);

/*
 * Latin 9
 * Byte 3 = 0x13
 */

/// U+0152 LATIN CAPITAL LIGATURE OE
pub const KEY_OE: Keysym =                            Keysym(0x13bcu32);
/// U+0153 LATIN SMALL LIGATURE OE
pub const KEY_oe: Keysym =                            Keysym(0x13bdu32);
/// U+0178 LATIN CAPITAL LETTER Y WITH DIAERESIS
pub const KEY_Ydiaeresis: Keysym =                    Keysym(0x13beu32);

/*
 * Katakana
 * Byte 3 = 4
 */

/// U+203E OVERLINE
pub const KEY_overline: Keysym =                      Keysym(0x047eu32);
/// U+3002 IDEOGRAPHIC FULL STOP
pub const KEY_kana_fullstop: Keysym =                 Keysym(0x04a1u32);
/// U+300C LEFT CORNER BRACKET
pub const KEY_kana_openingbracket: Keysym =           Keysym(0x04a2u32);
/// U+300D RIGHT CORNER BRACKET
pub const KEY_kana_closingbracket: Keysym =           Keysym(0x04a3u32);
/// U+3001 IDEOGRAPHIC COMMA
pub const KEY_kana_comma: Keysym =                    Keysym(0x04a4u32);
/// U+30FB KATAKANA MIDDLE DOT
pub const KEY_kana_conjunctive: Keysym =              Keysym(0x04a5u32);
/// deprecated
pub const KEY_kana_middledot: Keysym =                Keysym(0x04a5u32);
/// U+30F2 KATAKANA LETTER WO
pub const KEY_kana_WO: Keysym =                       Keysym(0x04a6u32);
/// U+30A1 KATAKANA LETTER SMALL A
pub const KEY_kana_a: Keysym =                        Keysym(0x04a7u32);
/// U+30A3 KATAKANA LETTER SMALL I
pub const KEY_kana_i: Keysym =                        Keysym(0x04a8u32);
/// U+30A5 KATAKANA LETTER SMALL U
pub const KEY_kana_u: Keysym =                        Keysym(0x04a9u32);
/// U+30A7 KATAKANA LETTER SMALL E
pub const KEY_kana_e: Keysym =                        Keysym(0x04aau32);
/// U+30A9 KATAKANA LETTER SMALL O
pub const KEY_kana_o: Keysym =                        Keysym(0x04abu32);
/// U+30E3 KATAKANA LETTER SMALL YA
pub const KEY_kana_ya: Keysym =                       Keysym(0x04acu32);
/// U+30E5 KATAKANA LETTER SMALL YU
pub const KEY_kana_yu: Keysym =                       Keysym(0x04adu32);
/// U+30E7 KATAKANA LETTER SMALL YO
pub const KEY_kana_yo: Keysym =                       Keysym(0x04aeu32);
/// U+30C3 KATAKANA LETTER SMALL TU
pub const KEY_kana_tsu: Keysym =                      Keysym(0x04afu32);
/// deprecated
pub const KEY_kana_tu: Keysym =                       Keysym(0x04afu32);
pub const KEY_prolongedsound: Keysym =                Keysym(0x04b0u32);
/// U+30A2 KATAKANA LETTER A
pub const KEY_kana_A: Keysym =                        Keysym(0x04b1u32);
/// U+30A4 KATAKANA LETTER I
pub const KEY_kana_I: Keysym =                        Keysym(0x04b2u32);
/// U+30A6 KATAKANA LETTER U
pub const KEY_kana_U: Keysym =                        Keysym(0x04b3u32);
/// U+30A8 KATAKANA LETTER E
pub const KEY_kana_E: Keysym =                        Keysym(0x04b4u32);
/// U+30AA KATAKANA LETTER O
pub const KEY_kana_O: Keysym =                        Keysym(0x04b5u32);
/// U+30AB KATAKANA LETTER KA
pub const KEY_kana_KA: Keysym =                       Keysym(0x04b6u32);
/// U+30AD KATAKANA LETTER KI
pub const KEY_kana_KI: Keysym =                       Keysym(0x04b7u32);
/// U+30AF KATAKANA LETTER KU
pub const KEY_kana_KU: Keysym =                       Keysym(0x04b8u32);
/// U+30B1 KATAKANA LETTER KE
pub const KEY_kana_KE: Keysym =                       Keysym(0x04b9u32);
/// U+30B3 KATAKANA LETTER KO
pub const KEY_kana_KO: Keysym =                       Keysym(0x04bau32);
/// U+30B5 KATAKANA LETTER SA
pub const KEY_kana_SA: Keysym =                       Keysym(0x04bbu32);
/// U+30B7 KATAKANA LETTER SI
pub const KEY_kana_SHI: Keysym =                      Keysym(0x04bcu32);
/// U+30B9 KATAKANA LETTER SU
pub const KEY_kana_SU: Keysym =                       Keysym(0x04bdu32);
/// U+30BB KATAKANA LETTER SE
pub const KEY_kana_SE: Keysym =                       Keysym(0x04beu32);
/// U+30BD KATAKANA LETTER SO
pub const KEY_kana_SO: Keysym =                       Keysym(0x04bfu32);
/// U+30BF KATAKANA LETTER TA
pub const KEY_kana_TA: Keysym =                       Keysym(0x04c0u32);
/// U+30C1 KATAKANA LETTER TI
pub const KEY_kana_CHI: Keysym =                      Keysym(0x04c1u32);
/// deprecated
pub const KEY_kana_TI: Keysym =                       Keysym(0x04c1u32);
/// U+30C4 KATAKANA LETTER TU
pub const KEY_kana_TSU: Keysym =                      Keysym(0x04c2u32);
/// deprecated
pub const KEY_kana_TU: Keysym =                       Keysym(0x04c2u32);
/// U+30C6 KATAKANA LETTER TE
pub const KEY_kana_TE: Keysym =                       Keysym(0x04c3u32);
/// U+30C8 KATAKANA LETTER TO
pub const KEY_kana_TO: Keysym =                       Keysym(0x04c4u32);
/// U+30CA KATAKANA LETTER NA
pub const KEY_kana_NA: Keysym =                       Keysym(0x04c5u32);
/// U+30CB KATAKANA LETTER NI
pub const KEY_kana_NI: Keysym =                       Keysym(0x04c6u32);
/// U+30CC KATAKANA LETTER NU
pub const KEY_kana_NU: Keysym =                       Keysym(0x04c7u32);
/// U+30CD KATAKANA LETTER NE
pub const KEY_kana_NE: Keysym =                       Keysym(0x04c8u32);
/// U+30CE KATAKANA LETTER NO
pub const KEY_kana_NO: Keysym =                       Keysym(0x04c9u32);
/// U+30CF KATAKANA LETTER HA
pub const KEY_kana_HA: Keysym =                       Keysym(0x04cau32);
/// U+30D2 KATAKANA LETTER HI
pub const KEY_kana_HI: Keysym =                       Keysym(0x04cbu32);
/// U+30D5 KATAKANA LETTER HU
pub const KEY_kana_FU: Keysym =                       Keysym(0x04ccu32);
/// deprecated
pub const KEY_kana_HU: Keysym =                       Keysym(0x04ccu32);
/// U+30D8 KATAKANA LETTER HE
pub const KEY_kana_HE: Keysym =                       Keysym(0x04cdu32);
/// U+30DB KATAKANA LETTER HO
pub const KEY_kana_HO: Keysym =                       Keysym(0x04ceu32);
/// U+30DE KATAKANA LETTER MA
pub const KEY_kana_MA: Keysym =                       Keysym(0x04cfu32);
/// U+30DF KATAKANA LETTER MI
pub const KEY_kana_MI: Keysym =                       Keysym(0x04d0u32);
/// U+30E0 KATAKANA LETTER MU
pub const KEY_kana_MU: Keysym =                       Keysym(0x04d1u32);
/// U+30E1 KATAKANA LETTER ME
pub const KEY_kana_ME: Keysym =                       Keysym(0x04d2u32);
/// U+30E2 KATAKANA LETTER MO
pub const KEY_kana_MO: Keysym =                       Keysym(0x04d3u32);
/// U+30E4 KATAKANA LETTER YA
pub const KEY_kana_YA: Keysym =                       Keysym(0x04d4u32);
/// U+30E6 KATAKANA LETTER YU
pub const KEY_kana_YU: Keysym =                       Keysym(0x04d5u32);
/// U+30E8 KATAKANA LETTER YO
pub const KEY_kana_YO: Keysym =                       Keysym(0x04d6u32);
/// U+30E9 KATAKANA LETTER RA
pub const KEY_kana_RA: Keysym =                       Keysym(0x04d7u32);
/// U+30EA KATAKANA LETTER RI
pub const KEY_kana_RI: Keysym =                       Keysym(0x04d8u32);
/// U+30EB KATAKANA LETTER RU
pub const KEY_kana_RU: Keysym =                       Keysym(0x04d9u32);
/// U+30EC KATAKANA LETTER RE
pub const KEY_kana_RE: Keysym =                       Keysym(0x04dau32);
/// U+30ED KATAKANA LETTER RO
pub const KEY_kana_RO: Keysym =                       Keysym(0x04dbu32);
/// U+30EF KATAKANA LETTER WA
pub const KEY_kana_WA: Keysym =                       Keysym(0x04dcu32);
/// U+30F3 KATAKANA LETTER N
pub const KEY_kana_N: Keysym =                        Keysym(0x04ddu32);
pub const KEY_voicedsound: Keysym =                   Keysym(0x04deu32);
pub const KEY_semivoicedsound: Keysym =               Keysym(0x04dfu32);
/// Alias for mode_switch
pub const KEY_kana_switch: Keysym =                   Keysym(0xff7eu32);

/*
 * Arabic
 * Byte 3 = 5
 */

pub const KEY_Farsi_0: Keysym =                       Keysym(0x10006f0u32);
pub const KEY_Farsi_1: Keysym =                       Keysym(0x10006f1u32);
pub const KEY_Farsi_2: Keysym =                       Keysym(0x10006f2u32);
pub const KEY_Farsi_3: Keysym =                       Keysym(0x10006f3u32);
pub const KEY_Farsi_4: Keysym =                       Keysym(0x10006f4u32);
pub const KEY_Farsi_5: Keysym =                       Keysym(0x10006f5u32);
pub const KEY_Farsi_6: Keysym =                       Keysym(0x10006f6u32);
pub const KEY_Farsi_7: Keysym =                       Keysym(0x10006f7u32);
pub const KEY_Farsi_8: Keysym =                       Keysym(0x10006f8u32);
pub const KEY_Farsi_9: Keysym =                       Keysym(0x10006f9u32);
/// U+066A ARABIC PERCENT SIGN
pub const KEY_Arabic_percent: Keysym =                Keysym(0x100066au32);
/// U+0670 ARABIC LETTER SUPERSCRIPT ALEF
pub const KEY_Arabic_superscript_alef: Keysym =       Keysym(0x1000670u32);
/// U+0679 ARABIC LETTER TTEH
pub const KEY_Arabic_tteh: Keysym =                   Keysym(0x1000679u32);
/// U+067E ARABIC LETTER PEH
pub const KEY_Arabic_peh: Keysym =                    Keysym(0x100067eu32);
/// U+0686 ARABIC LETTER TCHEH
pub const KEY_Arabic_tcheh: Keysym =                  Keysym(0x1000686u32);
/// U+0688 ARABIC LETTER DDAL
pub const KEY_Arabic_ddal: Keysym =                   Keysym(0x1000688u32);
/// U+0691 ARABIC LETTER RREH
pub const KEY_Arabic_rreh: Keysym =                   Keysym(0x1000691u32);
/// U+060C ARABIC COMMA
pub const KEY_Arabic_comma: Keysym =                  Keysym(0x05acu32);
/// U+06D4 ARABIC FULL STOP
pub const KEY_Arabic_fullstop: Keysym =               Keysym(0x10006d4u32);
pub const KEY_Arabic_0: Keysym =                      Keysym(0x1000660u32);
pub const KEY_Arabic_1: Keysym =                      Keysym(0x1000661u32);
pub const KEY_Arabic_2: Keysym =                      Keysym(0x1000662u32);
pub const KEY_Arabic_3: Keysym =                      Keysym(0x1000663u32);
pub const KEY_Arabic_4: Keysym =                      Keysym(0x1000664u32);
pub const KEY_Arabic_5: Keysym =                      Keysym(0x1000665u32);
pub const KEY_Arabic_6: Keysym =                      Keysym(0x1000666u32);
pub const KEY_Arabic_7: Keysym =                      Keysym(0x1000667u32);
pub const KEY_Arabic_8: Keysym =                      Keysym(0x1000668u32);
pub const KEY_Arabic_9: Keysym =                      Keysym(0x1000669u32);
/// U+061B ARABIC SEMICOLON
pub const KEY_Arabic_semicolon: Keysym =              Keysym(0x05bbu32);
/// U+061F ARABIC QUESTION MARK
pub const KEY_Arabic_question_mark: Keysym =          Keysym(0x05bfu32);
/// U+0621 ARABIC LETTER HAMZA
pub const KEY_Arabic_hamza: Keysym =                  Keysym(0x05c1u32);
/// U+0622 ARABIC LETTER ALEF WITH MADDA ABOVE
pub const KEY_Arabic_maddaonalef: Keysym =            Keysym(0x05c2u32);
/// U+0623 ARABIC LETTER ALEF WITH HAMZA ABOVE
pub const KEY_Arabic_hamzaonalef: Keysym =            Keysym(0x05c3u32);
/// U+0624 ARABIC LETTER WAW WITH HAMZA ABOVE
pub const KEY_Arabic_hamzaonwaw: Keysym =             Keysym(0x05c4u32);
/// U+0625 ARABIC LETTER ALEF WITH HAMZA BELOW
pub const KEY_Arabic_hamzaunderalef: Keysym =         Keysym(0x05c5u32);
/// U+0626 ARABIC LETTER YEH WITH HAMZA ABOVE
pub const KEY_Arabic_hamzaonyeh: Keysym =             Keysym(0x05c6u32);
/// U+0627 ARABIC LETTER ALEF
pub const KEY_Arabic_alef: Keysym =                   Keysym(0x05c7u32);
/// U+0628 ARABIC LETTER BEH
pub const KEY_Arabic_beh: Keysym =                    Keysym(0x05c8u32);
/// U+0629 ARABIC LETTER TEH MARBUTA
pub const KEY_Arabic_tehmarbuta: Keysym =             Keysym(0x05c9u32);
/// U+062A ARABIC LETTER TEH
pub const KEY_Arabic_teh: Keysym =                    Keysym(0x05cau32);
/// U+062B ARABIC LETTER THEH
pub const KEY_Arabic_theh: Keysym =                   Keysym(0x05cbu32);
/// U+062C ARABIC LETTER JEEM
pub const KEY_Arabic_jeem: Keysym =                   Keysym(0x05ccu32);
/// U+062D ARABIC LETTER HAH
pub const KEY_Arabic_hah: Keysym =                    Keysym(0x05cdu32);
/// U+062E ARABIC LETTER KHAH
pub const KEY_Arabic_khah: Keysym =                   Keysym(0x05ceu32);
/// U+062F ARABIC LETTER DAL
pub const KEY_Arabic_dal: Keysym =                    Keysym(0x05cfu32);
/// U+0630 ARABIC LETTER THAL
pub const KEY_Arabic_thal: Keysym =                   Keysym(0x05d0u32);
/// U+0631 ARABIC LETTER REH
pub const KEY_Arabic_ra: Keysym =                     Keysym(0x05d1u32);
/// U+0632 ARABIC LETTER ZAIN
pub const KEY_Arabic_zain: Keysym =                   Keysym(0x05d2u32);
/// U+0633 ARABIC LETTER SEEN
pub const KEY_Arabic_seen: Keysym =                   Keysym(0x05d3u32);
/// U+0634 ARABIC LETTER SHEEN
pub const KEY_Arabic_sheen: Keysym =                  Keysym(0x05d4u32);
/// U+0635 ARABIC LETTER SAD
pub const KEY_Arabic_sad: Keysym =                    Keysym(0x05d5u32);
/// U+0636 ARABIC LETTER DAD
pub const KEY_Arabic_dad: Keysym =                    Keysym(0x05d6u32);
/// U+0637 ARABIC LETTER TAH
pub const KEY_Arabic_tah: Keysym =                    Keysym(0x05d7u32);
/// U+0638 ARABIC LETTER ZAH
pub const KEY_Arabic_zah: Keysym =                    Keysym(0x05d8u32);
/// U+0639 ARABIC LETTER AIN
pub const KEY_Arabic_ain: Keysym =                    Keysym(0x05d9u32);
/// U+063A ARABIC LETTER GHAIN
pub const KEY_Arabic_ghain: Keysym =                  Keysym(0x05dau32);
/// U+0640 ARABIC TATWEEL
pub const KEY_Arabic_tatweel: Keysym =                Keysym(0x05e0u32);
/// U+0641 ARABIC LETTER FEH
pub const KEY_Arabic_feh: Keysym =                    Keysym(0x05e1u32);
/// U+0642 ARABIC LETTER QAF
pub const KEY_Arabic_qaf: Keysym =                    Keysym(0x05e2u32);
/// U+0643 ARABIC LETTER KAF
pub const KEY_Arabic_kaf: Keysym =                    Keysym(0x05e3u32);
/// U+0644 ARABIC LETTER LAM
pub const KEY_Arabic_lam: Keysym =                    Keysym(0x05e4u32);
/// U+0645 ARABIC LETTER MEEM
pub const KEY_Arabic_meem: Keysym =                   Keysym(0x05e5u32);
/// U+0646 ARABIC LETTER NOON
pub const KEY_Arabic_noon: Keysym =                   Keysym(0x05e6u32);
/// U+0647 ARABIC LETTER HEH
pub const KEY_Arabic_ha: Keysym =                     Keysym(0x05e7u32);
/// deprecated
pub const KEY_Arabic_heh: Keysym =                    Keysym(0x05e7u32);
/// U+0648 ARABIC LETTER WAW
pub const KEY_Arabic_waw: Keysym =                    Keysym(0x05e8u32);
/// U+0649 ARABIC LETTER ALEF MAKSURA
pub const KEY_Arabic_alefmaksura: Keysym =            Keysym(0x05e9u32);
/// U+064A ARABIC LETTER YEH
pub const KEY_Arabic_yeh: Keysym =                    Keysym(0x05eau32);
/// U+064B ARABIC FATHATAN
pub const KEY_Arabic_fathatan: Keysym =               Keysym(0x05ebu32);
/// U+064C ARABIC DAMMATAN
pub const KEY_Arabic_dammatan: Keysym =               Keysym(0x05ecu32);
/// U+064D ARABIC KASRATAN
pub const KEY_Arabic_kasratan: Keysym =               Keysym(0x05edu32);
/// U+064E ARABIC FATHA
pub const KEY_Arabic_fatha: Keysym =                  Keysym(0x05eeu32);
/// U+064F ARABIC DAMMA
pub const KEY_Arabic_damma: Keysym =                  Keysym(0x05efu32);
/// U+0650 ARABIC KASRA
pub const KEY_Arabic_kasra: Keysym =                  Keysym(0x05f0u32);
/// U+0651 ARABIC SHADDA
pub const KEY_Arabic_shadda: Keysym =                 Keysym(0x05f1u32);
/// U+0652 ARABIC SUKUN
pub const KEY_Arabic_sukun: Keysym =                  Keysym(0x05f2u32);
/// U+0653 ARABIC MADDAH ABOVE
pub const KEY_Arabic_madda_above: Keysym =            Keysym(0x1000653u32);
/// U+0654 ARABIC HAMZA ABOVE
pub const KEY_Arabic_hamza_above: Keysym =            Keysym(0x1000654u32);
/// U+0655 ARABIC HAMZA BELOW
pub const KEY_Arabic_hamza_below: Keysym =            Keysym(0x1000655u32);
/// U+0698 ARABIC LETTER JEH
pub const KEY_Arabic_jeh: Keysym =                    Keysym(0x1000698u32);
/// U+06A4 ARABIC LETTER VEH
pub const KEY_Arabic_veh: Keysym =                    Keysym(0x10006a4u32);
/// U+06A9 ARABIC LETTER KEHEH
pub const KEY_Arabic_keheh: Keysym =                  Keysym(0x10006a9u32);
/// U+06AF ARABIC LETTER GAF
pub const KEY_Arabic_gaf: Keysym =                    Keysym(0x10006afu32);
/// U+06BA ARABIC LETTER NOON GHUNNA
pub const KEY_Arabic_noon_ghunna: Keysym =            Keysym(0x10006bau32);
/// U+06BE ARABIC LETTER HEH DOACHASHMEE
pub const KEY_Arabic_heh_doachashmee: Keysym =        Keysym(0x10006beu32);
/// U+06CC ARABIC LETTER FARSI YEH
pub const KEY_Farsi_yeh: Keysym =                     Keysym(0x10006ccu32);
/// U+06CC ARABIC LETTER FARSI YEH
pub const KEY_Arabic_farsi_yeh: Keysym =              Keysym(0x10006ccu32);
/// U+06D2 ARABIC LETTER YEH BARREE
pub const KEY_Arabic_yeh_baree: Keysym =              Keysym(0x10006d2u32);
/// U+06C1 ARABIC LETTER HEH GOAL
pub const KEY_Arabic_heh_goal: Keysym =               Keysym(0x10006c1u32);
/// Alias for mode_switch
pub const KEY_Arabic_switch: Keysym =                 Keysym(0xff7eu32);

/*
 * Cyrillic
 * Byte 3 = 6
 */
/// U+0492 CYRILLIC CAPITAL LETTER GHE WITH STROKE
pub const KEY_Cyrillic_GHE_bar: Keysym =              Keysym(0x1000492u32);
/// U+0493 CYRILLIC SMALL LETTER GHE WITH STROKE
pub const KEY_Cyrillic_ghe_bar: Keysym =              Keysym(0x1000493u32);
/// U+0496 CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER
pub const KEY_Cyrillic_ZHE_descender: Keysym =        Keysym(0x1000496u32);
/// U+0497 CYRILLIC SMALL LETTER ZHE WITH DESCENDER
pub const KEY_Cyrillic_zhe_descender: Keysym =        Keysym(0x1000497u32);
/// U+049A CYRILLIC CAPITAL LETTER KA WITH DESCENDER
pub const KEY_Cyrillic_KA_descender: Keysym =         Keysym(0x100049au32);
/// U+049B CYRILLIC SMALL LETTER KA WITH DESCENDER
pub const KEY_Cyrillic_ka_descender: Keysym =         Keysym(0x100049bu32);
/// U+049C CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE
pub const KEY_Cyrillic_KA_vertstroke: Keysym =        Keysym(0x100049cu32);
/// U+049D CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE
pub const KEY_Cyrillic_ka_vertstroke: Keysym =        Keysym(0x100049du32);
/// U+04A2 CYRILLIC CAPITAL LETTER EN WITH DESCENDER
pub const KEY_Cyrillic_EN_descender: Keysym =         Keysym(0x10004a2u32);
/// U+04A3 CYRILLIC SMALL LETTER EN WITH DESCENDER
pub const KEY_Cyrillic_en_descender: Keysym =         Keysym(0x10004a3u32);
/// U+04AE CYRILLIC CAPITAL LETTER STRAIGHT U
pub const KEY_Cyrillic_U_straight: Keysym =           Keysym(0x10004aeu32);
/// U+04AF CYRILLIC SMALL LETTER STRAIGHT U
pub const KEY_Cyrillic_u_straight: Keysym =           Keysym(0x10004afu32);
/// U+04B0 CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE
pub const KEY_Cyrillic_U_straight_bar: Keysym =       Keysym(0x10004b0u32);
/// U+04B1 CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE
pub const KEY_Cyrillic_u_straight_bar: Keysym =       Keysym(0x10004b1u32);
/// U+04B2 CYRILLIC CAPITAL LETTER HA WITH DESCENDER
pub const KEY_Cyrillic_HA_descender: Keysym =         Keysym(0x10004b2u32);
/// U+04B3 CYRILLIC SMALL LETTER HA WITH DESCENDER
pub const KEY_Cyrillic_ha_descender: Keysym =         Keysym(0x10004b3u32);
/// U+04B6 CYRILLIC CAPITAL LETTER CHE WITH DESCENDER
pub const KEY_Cyrillic_CHE_descender: Keysym =        Keysym(0x10004b6u32);
/// U+04B7 CYRILLIC SMALL LETTER CHE WITH DESCENDER
pub const KEY_Cyrillic_che_descender: Keysym =        Keysym(0x10004b7u32);
/// U+04B8 CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE
pub const KEY_Cyrillic_CHE_vertstroke: Keysym =       Keysym(0x10004b8u32);
/// U+04B9 CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE
pub const KEY_Cyrillic_che_vertstroke: Keysym =       Keysym(0x10004b9u32);
/// U+04BA CYRILLIC CAPITAL LETTER SHHA
pub const KEY_Cyrillic_SHHA: Keysym =                 Keysym(0x10004bau32);
/// U+04BB CYRILLIC SMALL LETTER SHHA
pub const KEY_Cyrillic_shha: Keysym =                 Keysym(0x10004bbu32);

/// U+04D8 CYRILLIC CAPITAL LETTER SCHWA
pub const KEY_Cyrillic_SCHWA: Keysym =                Keysym(0x10004d8u32);
/// U+04D9 CYRILLIC SMALL LETTER SCHWA
pub const KEY_Cyrillic_schwa: Keysym =                Keysym(0x10004d9u32);
/// U+04E2 CYRILLIC CAPITAL LETTER I WITH MACRON
pub const KEY_Cyrillic_I_macron: Keysym =             Keysym(0x10004e2u32);
/// U+04E3 CYRILLIC SMALL LETTER I WITH MACRON
pub const KEY_Cyrillic_i_macron: Keysym =             Keysym(0x10004e3u32);
/// U+04E8 CYRILLIC CAPITAL LETTER BARRED O
pub const KEY_Cyrillic_O_bar: Keysym =                Keysym(0x10004e8u32);
/// U+04E9 CYRILLIC SMALL LETTER BARRED O
pub const KEY_Cyrillic_o_bar: Keysym =                Keysym(0x10004e9u32);
/// U+04EE CYRILLIC CAPITAL LETTER U WITH MACRON
pub const KEY_Cyrillic_U_macron: Keysym =             Keysym(0x10004eeu32);
/// U+04EF CYRILLIC SMALL LETTER U WITH MACRON
pub const KEY_Cyrillic_u_macron: Keysym =             Keysym(0x10004efu32);

/// U+0452 CYRILLIC SMALL LETTER DJE
pub const KEY_Serbian_dje: Keysym =                   Keysym(0x06a1u32);
/// U+0453 CYRILLIC SMALL LETTER GJE
pub const KEY_Macedonia_gje: Keysym =                 Keysym(0x06a2u32);
/// U+0451 CYRILLIC SMALL LETTER IO
pub const KEY_Cyrillic_io: Keysym =                   Keysym(0x06a3u32);
/// U+0454 CYRILLIC SMALL LETTER UKRAINIAN IE
pub const KEY_Ukrainian_ie: Keysym =                  Keysym(0x06a4u32);
/// deprecated
pub const KEY_Ukranian_je: Keysym =                   Keysym(0x06a4u32);
/// U+0455 CYRILLIC SMALL LETTER DZE
pub const KEY_Macedonia_dse: Keysym =                 Keysym(0x06a5u32);
pub const KEY_Ukrainian_i: Keysym =                   Keysym(0x06a6u32);
/// deprecated
pub const KEY_Ukranian_i: Keysym =                    Keysym(0x06a6u32);
/// U+0457 CYRILLIC SMALL LETTER YI
pub const KEY_Ukrainian_yi: Keysym =                  Keysym(0x06a7u32);
/// deprecated
pub const KEY_Ukranian_yi: Keysym =                   Keysym(0x06a7u32);
/// U+0458 CYRILLIC SMALL LETTER JE
pub const KEY_Cyrillic_je: Keysym =                   Keysym(0x06a8u32);
/// deprecated
pub const KEY_Serbian_je: Keysym =                    Keysym(0x06a8u32);
/// U+0459 CYRILLIC SMALL LETTER LJE
pub const KEY_Cyrillic_lje: Keysym =                  Keysym(0x06a9u32);
/// deprecated
pub const KEY_Serbian_lje: Keysym =                   Keysym(0x06a9u32);
/// U+045A CYRILLIC SMALL LETTER NJE
pub const KEY_Cyrillic_nje: Keysym =                  Keysym(0x06aau32);
/// deprecated
pub const KEY_Serbian_nje: Keysym =                   Keysym(0x06aau32);
/// U+045B CYRILLIC SMALL LETTER TSHE
pub const KEY_Serbian_tshe: Keysym =                  Keysym(0x06abu32);
/// U+045C CYRILLIC SMALL LETTER KJE
pub const KEY_Macedonia_kje: Keysym =                 Keysym(0x06acu32);
/// U+0491 CYRILLIC SMALL LETTER GHE WITH UPTURN
pub const KEY_Ukrainian_ghe_with_upturn: Keysym =     Keysym(0x06adu32);
/// U+045E CYRILLIC SMALL LETTER SHORT U
pub const KEY_Byelorussian_shortu: Keysym =           Keysym(0x06aeu32);
/// U+045F CYRILLIC SMALL LETTER DZHE
pub const KEY_Cyrillic_dzhe: Keysym =                 Keysym(0x06afu32);
/// deprecated
pub const KEY_Serbian_dze: Keysym =                   Keysym(0x06afu32);
/// U+2116 NUMERO SIGN
pub const KEY_numerosign: Keysym =                    Keysym(0x06b0u32);
/// U+0402 CYRILLIC CAPITAL LETTER DJE
pub const KEY_Serbian_DJE: Keysym =                   Keysym(0x06b1u32);
/// U+0403 CYRILLIC CAPITAL LETTER GJE
pub const KEY_Macedonia_GJE: Keysym =                 Keysym(0x06b2u32);
/// U+0401 CYRILLIC CAPITAL LETTER IO
pub const KEY_Cyrillic_IO: Keysym =                   Keysym(0x06b3u32);
/// U+0404 CYRILLIC CAPITAL LETTER UKRAINIAN IE
pub const KEY_Ukrainian_IE: Keysym =                  Keysym(0x06b4u32);
/// deprecated
pub const KEY_Ukranian_JE: Keysym =                   Keysym(0x06b4u32);
/// U+0405 CYRILLIC CAPITAL LETTER DZE
pub const KEY_Macedonia_DSE: Keysym =                 Keysym(0x06b5u32);
pub const KEY_Ukrainian_I: Keysym =                   Keysym(0x06b6u32);
/// deprecated
pub const KEY_Ukranian_I: Keysym =                    Keysym(0x06b6u32);
/// U+0407 CYRILLIC CAPITAL LETTER YI
pub const KEY_Ukrainian_YI: Keysym =                  Keysym(0x06b7u32);
/// deprecated
pub const KEY_Ukranian_YI: Keysym =                   Keysym(0x06b7u32);
/// U+0408 CYRILLIC CAPITAL LETTER JE
pub const KEY_Cyrillic_JE: Keysym =                   Keysym(0x06b8u32);
/// deprecated
pub const KEY_Serbian_JE: Keysym =                    Keysym(0x06b8u32);
/// U+0409 CYRILLIC CAPITAL LETTER LJE
pub const KEY_Cyrillic_LJE: Keysym =                  Keysym(0x06b9u32);
/// deprecated
pub const KEY_Serbian_LJE: Keysym =                   Keysym(0x06b9u32);
/// U+040A CYRILLIC CAPITAL LETTER NJE
pub const KEY_Cyrillic_NJE: Keysym =                  Keysym(0x06bau32);
/// deprecated
pub const KEY_Serbian_NJE: Keysym =                   Keysym(0x06bau32);
/// U+040B CYRILLIC CAPITAL LETTER TSHE
pub const KEY_Serbian_TSHE: Keysym =                  Keysym(0x06bbu32);
/// U+040C CYRILLIC CAPITAL LETTER KJE
pub const KEY_Macedonia_KJE: Keysym =                 Keysym(0x06bcu32);
/// U+0490 CYRILLIC CAPITAL LETTER GHE WITH UPTURN
pub const KEY_Ukrainian_GHE_WITH_UPTURN: Keysym =     Keysym(0x06bdu32);
/// U+040E CYRILLIC CAPITAL LETTER SHORT U
pub const KEY_Byelorussian_SHORTU: Keysym =           Keysym(0x06beu32);
/// U+040F CYRILLIC CAPITAL LETTER DZHE
pub const KEY_Cyrillic_DZHE: Keysym =                 Keysym(0x06bfu32);
/// deprecated
pub const KEY_Serbian_DZE: Keysym =                   Keysym(0x06bfu32);
/// U+044E CYRILLIC SMALL LETTER YU
pub const KEY_Cyrillic_yu: Keysym =                   Keysym(0x06c0u32);
/// U+0430 CYRILLIC SMALL LETTER A
pub const KEY_Cyrillic_a: Keysym =                    Keysym(0x06c1u32);
/// U+0431 CYRILLIC SMALL LETTER BE
pub const KEY_Cyrillic_be: Keysym =                   Keysym(0x06c2u32);
/// U+0446 CYRILLIC SMALL LETTER TSE
pub const KEY_Cyrillic_tse: Keysym =                  Keysym(0x06c3u32);
/// U+0434 CYRILLIC SMALL LETTER DE
pub const KEY_Cyrillic_de: Keysym =                   Keysym(0x06c4u32);
/// U+0435 CYRILLIC SMALL LETTER IE
pub const KEY_Cyrillic_ie: Keysym =                   Keysym(0x06c5u32);
/// U+0444 CYRILLIC SMALL LETTER EF
pub const KEY_Cyrillic_ef: Keysym =                   Keysym(0x06c6u32);
/// U+0433 CYRILLIC SMALL LETTER GHE
pub const KEY_Cyrillic_ghe: Keysym =                  Keysym(0x06c7u32);
/// U+0445 CYRILLIC SMALL LETTER HA
pub const KEY_Cyrillic_ha: Keysym =                   Keysym(0x06c8u32);
/// U+0438 CYRILLIC SMALL LETTER I
pub const KEY_Cyrillic_i: Keysym =                    Keysym(0x06c9u32);
/// U+0439 CYRILLIC SMALL LETTER SHORT I
pub const KEY_Cyrillic_shorti: Keysym =               Keysym(0x06cau32);
/// U+043A CYRILLIC SMALL LETTER KA
pub const KEY_Cyrillic_ka: Keysym =                   Keysym(0x06cbu32);
/// U+043B CYRILLIC SMALL LETTER EL
pub const KEY_Cyrillic_el: Keysym =                   Keysym(0x06ccu32);
/// U+043C CYRILLIC SMALL LETTER EM
pub const KEY_Cyrillic_em: Keysym =                   Keysym(0x06cdu32);
/// U+043D CYRILLIC SMALL LETTER EN
pub const KEY_Cyrillic_en: Keysym =                   Keysym(0x06ceu32);
/// U+043E CYRILLIC SMALL LETTER O
pub const KEY_Cyrillic_o: Keysym =                    Keysym(0x06cfu32);
/// U+043F CYRILLIC SMALL LETTER PE
pub const KEY_Cyrillic_pe: Keysym =                   Keysym(0x06d0u32);
/// U+044F CYRILLIC SMALL LETTER YA
pub const KEY_Cyrillic_ya: Keysym =                   Keysym(0x06d1u32);
/// U+0440 CYRILLIC SMALL LETTER ER
pub const KEY_Cyrillic_er: Keysym =                   Keysym(0x06d2u32);
/// U+0441 CYRILLIC SMALL LETTER ES
pub const KEY_Cyrillic_es: Keysym =                   Keysym(0x06d3u32);
/// U+0442 CYRILLIC SMALL LETTER TE
pub const KEY_Cyrillic_te: Keysym =                   Keysym(0x06d4u32);
/// U+0443 CYRILLIC SMALL LETTER U
pub const KEY_Cyrillic_u: Keysym =                    Keysym(0x06d5u32);
/// U+0436 CYRILLIC SMALL LETTER ZHE
pub const KEY_Cyrillic_zhe: Keysym =                  Keysym(0x06d6u32);
/// U+0432 CYRILLIC SMALL LETTER VE
pub const KEY_Cyrillic_ve: Keysym =                   Keysym(0x06d7u32);
/// U+044C CYRILLIC SMALL LETTER SOFT SIGN
pub const KEY_Cyrillic_softsign: Keysym =             Keysym(0x06d8u32);
/// U+044B CYRILLIC SMALL LETTER YERU
pub const KEY_Cyrillic_yeru: Keysym =                 Keysym(0x06d9u32);
/// U+0437 CYRILLIC SMALL LETTER ZE
pub const KEY_Cyrillic_ze: Keysym =                   Keysym(0x06dau32);
/// U+0448 CYRILLIC SMALL LETTER SHA
pub const KEY_Cyrillic_sha: Keysym =                  Keysym(0x06dbu32);
/// U+044D CYRILLIC SMALL LETTER E
pub const KEY_Cyrillic_e: Keysym =                    Keysym(0x06dcu32);
/// U+0449 CYRILLIC SMALL LETTER SHCHA
pub const KEY_Cyrillic_shcha: Keysym =                Keysym(0x06ddu32);
/// U+0447 CYRILLIC SMALL LETTER CHE
pub const KEY_Cyrillic_che: Keysym =                  Keysym(0x06deu32);
/// U+044A CYRILLIC SMALL LETTER HARD SIGN
pub const KEY_Cyrillic_hardsign: Keysym =             Keysym(0x06dfu32);
/// U+042E CYRILLIC CAPITAL LETTER YU
pub const KEY_Cyrillic_YU: Keysym =                   Keysym(0x06e0u32);
/// U+0410 CYRILLIC CAPITAL LETTER A
pub const KEY_Cyrillic_A: Keysym =                    Keysym(0x06e1u32);
/// U+0411 CYRILLIC CAPITAL LETTER BE
pub const KEY_Cyrillic_BE: Keysym =                   Keysym(0x06e2u32);
/// U+0426 CYRILLIC CAPITAL LETTER TSE
pub const KEY_Cyrillic_TSE: Keysym =                  Keysym(0x06e3u32);
/// U+0414 CYRILLIC CAPITAL LETTER DE
pub const KEY_Cyrillic_DE: Keysym =                   Keysym(0x06e4u32);
/// U+0415 CYRILLIC CAPITAL LETTER IE
pub const KEY_Cyrillic_IE: Keysym =                   Keysym(0x06e5u32);
/// U+0424 CYRILLIC CAPITAL LETTER EF
pub const KEY_Cyrillic_EF: Keysym =                   Keysym(0x06e6u32);
/// U+0413 CYRILLIC CAPITAL LETTER GHE
pub const KEY_Cyrillic_GHE: Keysym =                  Keysym(0x06e7u32);
/// U+0425 CYRILLIC CAPITAL LETTER HA
pub const KEY_Cyrillic_HA: Keysym =                   Keysym(0x06e8u32);
/// U+0418 CYRILLIC CAPITAL LETTER I
pub const KEY_Cyrillic_I: Keysym =                    Keysym(0x06e9u32);
/// U+0419 CYRILLIC CAPITAL LETTER SHORT I
pub const KEY_Cyrillic_SHORTI: Keysym =               Keysym(0x06eau32);
/// U+041A CYRILLIC CAPITAL LETTER KA
pub const KEY_Cyrillic_KA: Keysym =                   Keysym(0x06ebu32);
/// U+041B CYRILLIC CAPITAL LETTER EL
pub const KEY_Cyrillic_EL: Keysym =                   Keysym(0x06ecu32);
/// U+041C CYRILLIC CAPITAL LETTER EM
pub const KEY_Cyrillic_EM: Keysym =                   Keysym(0x06edu32);
/// U+041D CYRILLIC CAPITAL LETTER EN
pub const KEY_Cyrillic_EN: Keysym =                   Keysym(0x06eeu32);
/// U+041E CYRILLIC CAPITAL LETTER O
pub const KEY_Cyrillic_O: Keysym =                    Keysym(0x06efu32);
/// U+041F CYRILLIC CAPITAL LETTER PE
pub const KEY_Cyrillic_PE: Keysym =                   Keysym(0x06f0u32);
/// U+042F CYRILLIC CAPITAL LETTER YA
pub const KEY_Cyrillic_YA: Keysym =                   Keysym(0x06f1u32);
/// U+0420 CYRILLIC CAPITAL LETTER ER
pub const KEY_Cyrillic_ER: Keysym =                   Keysym(0x06f2u32);
/// U+0421 CYRILLIC CAPITAL LETTER ES
pub const KEY_Cyrillic_ES: Keysym =                   Keysym(0x06f3u32);
/// U+0422 CYRILLIC CAPITAL LETTER TE
pub const KEY_Cyrillic_TE: Keysym =                   Keysym(0x06f4u32);
/// U+0423 CYRILLIC CAPITAL LETTER U
pub const KEY_Cyrillic_U: Keysym =                    Keysym(0x06f5u32);
/// U+0416 CYRILLIC CAPITAL LETTER ZHE
pub const KEY_Cyrillic_ZHE: Keysym =                  Keysym(0x06f6u32);
/// U+0412 CYRILLIC CAPITAL LETTER VE
pub const KEY_Cyrillic_VE: Keysym =                   Keysym(0x06f7u32);
/// U+042C CYRILLIC CAPITAL LETTER SOFT SIGN
pub const KEY_Cyrillic_SOFTSIGN: Keysym =             Keysym(0x06f8u32);
/// U+042B CYRILLIC CAPITAL LETTER YERU
pub const KEY_Cyrillic_YERU: Keysym =                 Keysym(0x06f9u32);
/// U+0417 CYRILLIC CAPITAL LETTER ZE
pub const KEY_Cyrillic_ZE: Keysym =                   Keysym(0x06fau32);
/// U+0428 CYRILLIC CAPITAL LETTER SHA
pub const KEY_Cyrillic_SHA: Keysym =                  Keysym(0x06fbu32);
/// U+042D CYRILLIC CAPITAL LETTER E
pub const KEY_Cyrillic_E: Keysym =                    Keysym(0x06fcu32);
/// U+0429 CYRILLIC CAPITAL LETTER SHCHA
pub const KEY_Cyrillic_SHCHA: Keysym =                Keysym(0x06fdu32);
/// U+0427 CYRILLIC CAPITAL LETTER CHE
pub const KEY_Cyrillic_CHE: Keysym =                  Keysym(0x06feu32);
/// U+042A CYRILLIC CAPITAL LETTER HARD SIGN
pub const KEY_Cyrillic_HARDSIGN: Keysym =             Keysym(0x06ffu32);

/*
 * Greek
 * (based on an early draft of, and not quite identical to, ISO/IEC 8859-7)
 * Byte 3 = 7
 */

/// U+0386 GREEK CAPITAL LETTER ALPHA WITH TONOS
pub const KEY_Greek_ALPHAaccent: Keysym =             Keysym(0x07a1u32);
/// U+0388 GREEK CAPITAL LETTER EPSILON WITH TONOS
pub const KEY_Greek_EPSILONaccent: Keysym =           Keysym(0x07a2u32);
/// U+0389 GREEK CAPITAL LETTER ETA WITH TONOS
pub const KEY_Greek_ETAaccent: Keysym =               Keysym(0x07a3u32);
/// U+038A GREEK CAPITAL LETTER IOTA WITH TONOS
pub const KEY_Greek_IOTAaccent: Keysym =              Keysym(0x07a4u32);
/// U+03AA GREEK CAPITAL LETTER IOTA WITH DIALYTIKA
pub const KEY_Greek_IOTAdieresis: Keysym =            Keysym(0x07a5u32);
/// old typo
pub const KEY_Greek_IOTAdiaeresis: Keysym =           Keysym(0x07a5u32);
/// U+038C GREEK CAPITAL LETTER OMICRON WITH TONOS
pub const KEY_Greek_OMICRONaccent: Keysym =           Keysym(0x07a7u32);
/// U+038E GREEK CAPITAL LETTER UPSILON WITH TONOS
pub const KEY_Greek_UPSILONaccent: Keysym =           Keysym(0x07a8u32);
/// U+03AB GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA
pub const KEY_Greek_UPSILONdieresis: Keysym =         Keysym(0x07a9u32);
/// U+038F GREEK CAPITAL LETTER OMEGA WITH TONOS
pub const KEY_Greek_OMEGAaccent: Keysym =             Keysym(0x07abu32);
/// U+0385 GREEK DIALYTIKA TONOS
pub const KEY_Greek_accentdieresis: Keysym =          Keysym(0x07aeu32);
/// U+2015 HORIZONTAL BAR
pub const KEY_Greek_horizbar: Keysym =                Keysym(0x07afu32);
/// U+03AC GREEK SMALL LETTER ALPHA WITH TONOS
pub const KEY_Greek_alphaaccent: Keysym =             Keysym(0x07b1u32);
/// U+03AD GREEK SMALL LETTER EPSILON WITH TONOS
pub const KEY_Greek_epsilonaccent: Keysym =           Keysym(0x07b2u32);
/// U+03AE GREEK SMALL LETTER ETA WITH TONOS
pub const KEY_Greek_etaaccent: Keysym =               Keysym(0x07b3u32);
/// U+03AF GREEK SMALL LETTER IOTA WITH TONOS
pub const KEY_Greek_iotaaccent: Keysym =              Keysym(0x07b4u32);
/// U+03CA GREEK SMALL LETTER IOTA WITH DIALYTIKA
pub const KEY_Greek_iotadieresis: Keysym =            Keysym(0x07b5u32);
/// U+0390 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS
pub const KEY_Greek_iotaaccentdieresis: Keysym =      Keysym(0x07b6u32);
/// U+03CC GREEK SMALL LETTER OMICRON WITH TONOS
pub const KEY_Greek_omicronaccent: Keysym =           Keysym(0x07b7u32);
/// U+03CD GREEK SMALL LETTER UPSILON WITH TONOS
pub const KEY_Greek_upsilonaccent: Keysym =           Keysym(0x07b8u32);
/// U+03CB GREEK SMALL LETTER UPSILON WITH DIALYTIKA
pub const KEY_Greek_upsilondieresis: Keysym =         Keysym(0x07b9u32);
/// U+03B0 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS
pub const KEY_Greek_upsilonaccentdieresis: Keysym =   Keysym(0x07bau32);
/// U+03CE GREEK SMALL LETTER OMEGA WITH TONOS
pub const KEY_Greek_omegaaccent: Keysym =             Keysym(0x07bbu32);
/// U+0391 GREEK CAPITAL LETTER ALPHA
pub const KEY_Greek_ALPHA: Keysym =                   Keysym(0x07c1u32);
/// U+0392 GREEK CAPITAL LETTER BETA
pub const KEY_Greek_BETA: Keysym =                    Keysym(0x07c2u32);
/// U+0393 GREEK CAPITAL LETTER GAMMA
pub const KEY_Greek_GAMMA: Keysym =                   Keysym(0x07c3u32);
/// U+0394 GREEK CAPITAL LETTER DELTA
pub const KEY_Greek_DELTA: Keysym =                   Keysym(0x07c4u32);
/// U+0395 GREEK CAPITAL LETTER EPSILON
pub const KEY_Greek_EPSILON: Keysym =                 Keysym(0x07c5u32);
/// U+0396 GREEK CAPITAL LETTER ZETA
pub const KEY_Greek_ZETA: Keysym =                    Keysym(0x07c6u32);
/// U+0397 GREEK CAPITAL LETTER ETA
pub const KEY_Greek_ETA: Keysym =                     Keysym(0x07c7u32);
/// U+0398 GREEK CAPITAL LETTER THETA
pub const KEY_Greek_THETA: Keysym =                   Keysym(0x07c8u32);
/// U+0399 GREEK CAPITAL LETTER IOTA
pub const KEY_Greek_IOTA: Keysym =                    Keysym(0x07c9u32);
/// U+039A GREEK CAPITAL LETTER KAPPA
pub const KEY_Greek_KAPPA: Keysym =                   Keysym(0x07cau32);
/// U+039B GREEK CAPITAL LETTER LAMDA
pub const KEY_Greek_LAMDA: Keysym =                   Keysym(0x07cbu32);
/// U+039B GREEK CAPITAL LETTER LAMDA
pub const KEY_Greek_LAMBDA: Keysym =                  Keysym(0x07cbu32);
/// U+039C GREEK CAPITAL LETTER MU
pub const KEY_Greek_MU: Keysym =                      Keysym(0x07ccu32);
/// U+039D GREEK CAPITAL LETTER NU
pub const KEY_Greek_NU: Keysym =                      Keysym(0x07cdu32);
/// U+039E GREEK CAPITAL LETTER XI
pub const KEY_Greek_XI: Keysym =                      Keysym(0x07ceu32);
/// U+039F GREEK CAPITAL LETTER OMICRON
pub const KEY_Greek_OMICRON: Keysym =                 Keysym(0x07cfu32);
/// U+03A0 GREEK CAPITAL LETTER PI
pub const KEY_Greek_PI: Keysym =                      Keysym(0x07d0u32);
/// U+03A1 GREEK CAPITAL LETTER RHO
pub const KEY_Greek_RHO: Keysym =                     Keysym(0x07d1u32);
/// U+03A3 GREEK CAPITAL LETTER SIGMA
pub const KEY_Greek_SIGMA: Keysym =                   Keysym(0x07d2u32);
/// U+03A4 GREEK CAPITAL LETTER TAU
pub const KEY_Greek_TAU: Keysym =                     Keysym(0x07d4u32);
/// U+03A5 GREEK CAPITAL LETTER UPSILON
pub const KEY_Greek_UPSILON: Keysym =                 Keysym(0x07d5u32);
/// U+03A6 GREEK CAPITAL LETTER PHI
pub const KEY_Greek_PHI: Keysym =                     Keysym(0x07d6u32);
/// U+03A7 GREEK CAPITAL LETTER CHI
pub const KEY_Greek_CHI: Keysym =                     Keysym(0x07d7u32);
/// U+03A8 GREEK CAPITAL LETTER PSI
pub const KEY_Greek_PSI: Keysym =                     Keysym(0x07d8u32);
/// U+03A9 GREEK CAPITAL LETTER OMEGA
pub const KEY_Greek_OMEGA: Keysym =                   Keysym(0x07d9u32);
/// U+03B1 GREEK SMALL LETTER ALPHA
pub const KEY_Greek_alpha: Keysym =                   Keysym(0x07e1u32);
/// U+03B2 GREEK SMALL LETTER BETA
pub const KEY_Greek_beta: Keysym =                    Keysym(0x07e2u32);
/// U+03B3 GREEK SMALL LETTER GAMMA
pub const KEY_Greek_gamma: Keysym =                   Keysym(0x07e3u32);
/// U+03B4 GREEK SMALL LETTER DELTA
pub const KEY_Greek_delta: Keysym =                   Keysym(0x07e4u32);
/// U+03B5 GREEK SMALL LETTER EPSILON
pub const KEY_Greek_epsilon: Keysym =                 Keysym(0x07e5u32);
/// U+03B6 GREEK SMALL LETTER ZETA
pub const KEY_Greek_zeta: Keysym =                    Keysym(0x07e6u32);
/// U+03B7 GREEK SMALL LETTER ETA
pub const KEY_Greek_eta: Keysym =                     Keysym(0x07e7u32);
/// U+03B8 GREEK SMALL LETTER THETA
pub const KEY_Greek_theta: Keysym =                   Keysym(0x07e8u32);
/// U+03B9 GREEK SMALL LETTER IOTA
pub const KEY_Greek_iota: Keysym =                    Keysym(0x07e9u32);
/// U+03BA GREEK SMALL LETTER KAPPA
pub const KEY_Greek_kappa: Keysym =                   Keysym(0x07eau32);
/// U+03BB GREEK SMALL LETTER LAMDA
pub const KEY_Greek_lamda: Keysym =                   Keysym(0x07ebu32);
/// U+03BB GREEK SMALL LETTER LAMDA
pub const KEY_Greek_lambda: Keysym =                  Keysym(0x07ebu32);
/// U+03BC GREEK SMALL LETTER MU
pub const KEY_Greek_mu: Keysym =                      Keysym(0x07ecu32);
/// U+03BD GREEK SMALL LETTER NU
pub const KEY_Greek_nu: Keysym =                      Keysym(0x07edu32);
/// U+03BE GREEK SMALL LETTER XI
pub const KEY_Greek_xi: Keysym =                      Keysym(0x07eeu32);
/// U+03BF GREEK SMALL LETTER OMICRON
pub const KEY_Greek_omicron: Keysym =                 Keysym(0x07efu32);
/// U+03C0 GREEK SMALL LETTER PI
pub const KEY_Greek_pi: Keysym =                      Keysym(0x07f0u32);
/// U+03C1 GREEK SMALL LETTER RHO
pub const KEY_Greek_rho: Keysym =                     Keysym(0x07f1u32);
/// U+03C3 GREEK SMALL LETTER SIGMA
pub const KEY_Greek_sigma: Keysym =                   Keysym(0x07f2u32);
/// U+03C2 GREEK SMALL LETTER FINAL SIGMA
pub const KEY_Greek_finalsmallsigma: Keysym =         Keysym(0x07f3u32);
/// U+03C4 GREEK SMALL LETTER TAU
pub const KEY_Greek_tau: Keysym =                     Keysym(0x07f4u32);
/// U+03C5 GREEK SMALL LETTER UPSILON
pub const KEY_Greek_upsilon: Keysym =                 Keysym(0x07f5u32);
/// U+03C6 GREEK SMALL LETTER PHI
pub const KEY_Greek_phi: Keysym =                     Keysym(0x07f6u32);
/// U+03C7 GREEK SMALL LETTER CHI
pub const KEY_Greek_chi: Keysym =                     Keysym(0x07f7u32);
/// U+03C8 GREEK SMALL LETTER PSI
pub const KEY_Greek_psi: Keysym =                     Keysym(0x07f8u32);
/// U+03C9 GREEK SMALL LETTER OMEGA
pub const KEY_Greek_omega: Keysym =                   Keysym(0x07f9u32);
/// Alias for mode_switch
pub const KEY_Greek_switch: Keysym =                  Keysym(0xff7eu32);

/*
 * Technical
 * (from the DEC VT330/VT420 Technical Character Set, http://vt100.net/charsets/technical.html)
 * Byte 3 = 8
 */

/// U+23B7 RADICAL SYMBOL BOTTOM
pub const KEY_leftradical: Keysym =                   Keysym(0x08a1u32);
pub const KEY_topleftradical: Keysym =                Keysym(0x08a2u32);
pub const KEY_horizconnector: Keysym =                Keysym(0x08a3u32);
/// U+2320 TOP HALF INTEGRAL
pub const KEY_topintegral: Keysym =                   Keysym(0x08a4u32);
/// U+2321 BOTTOM HALF INTEGRAL
pub const KEY_botintegral: Keysym =                   Keysym(0x08a5u32);
pub const KEY_vertconnector: Keysym =                 Keysym(0x08a6u32);
/// U+23A1 LEFT SQUARE BRACKET UPPER CORNER
pub const KEY_topleftsqbracket: Keysym =              Keysym(0x08a7u32);
/// U+23A3 LEFT SQUARE BRACKET LOWER CORNER
pub const KEY_botleftsqbracket: Keysym =              Keysym(0x08a8u32);
/// U+23A4 RIGHT SQUARE BRACKET UPPER CORNER
pub const KEY_toprightsqbracket: Keysym =             Keysym(0x08a9u32);
/// U+23A6 RIGHT SQUARE BRACKET LOWER CORNER
pub const KEY_botrightsqbracket: Keysym =             Keysym(0x08aau32);
/// U+239B LEFT PARENTHESIS UPPER HOOK
pub const KEY_topleftparens: Keysym =                 Keysym(0x08abu32);
/// U+239D LEFT PARENTHESIS LOWER HOOK
pub const KEY_botleftparens: Keysym =                 Keysym(0x08acu32);
/// U+239E RIGHT PARENTHESIS UPPER HOOK
pub const KEY_toprightparens: Keysym =                Keysym(0x08adu32);
/// U+23A0 RIGHT PARENTHESIS LOWER HOOK
pub const KEY_botrightparens: Keysym =                Keysym(0x08aeu32);
/// U+23A8 LEFT CURLY BRACKET MIDDLE PIECE
pub const KEY_leftmiddlecurlybrace: Keysym =          Keysym(0x08afu32);
/// U+23AC RIGHT CURLY BRACKET MIDDLE PIECE
pub const KEY_rightmiddlecurlybrace: Keysym =         Keysym(0x08b0u32);
pub const KEY_topleftsummation: Keysym =              Keysym(0x08b1u32);
pub const KEY_botleftsummation: Keysym =              Keysym(0x08b2u32);
pub const KEY_topvertsummationconnector: Keysym =     Keysym(0x08b3u32);
pub const KEY_botvertsummationconnector: Keysym =     Keysym(0x08b4u32);
pub const KEY_toprightsummation: Keysym =             Keysym(0x08b5u32);
pub const KEY_botrightsummation: Keysym =             Keysym(0x08b6u32);
pub const KEY_rightmiddlesummation: Keysym =          Keysym(0x08b7u32);
pub const KEY_lessthanequal: Keysym =                 Keysym(0x08bcu32);
/// U+2260 NOT EQUAL TO
pub const KEY_notequal: Keysym =                      Keysym(0x08bdu32);
pub const KEY_greaterthanequal: Keysym =              Keysym(0x08beu32);
/// U+222B INTEGRAL
pub const KEY_integral: Keysym =                      Keysym(0x08bfu32);
/// U+2234 THEREFORE
pub const KEY_therefore: Keysym =                     Keysym(0x08c0u32);
/// U+221D PROPORTIONAL TO
pub const KEY_variation: Keysym =                     Keysym(0x08c1u32);
/// U+221E INFINITY
pub const KEY_infinity: Keysym =                      Keysym(0x08c2u32);
/// U+2207 NABLA
pub const KEY_nabla: Keysym =                         Keysym(0x08c5u32);
/// U+223C TILDE OPERATOR
pub const KEY_approximate: Keysym =                   Keysym(0x08c8u32);
/// U+2243 ASYMPTOTICALLY EQUAL TO
pub const KEY_similarequal: Keysym =                  Keysym(0x08c9u32);
/// U+21D4 LEFT RIGHT DOUBLE ARROW
pub const KEY_ifonlyif: Keysym =                      Keysym(0x08cdu32);
/// U+21D2 RIGHTWARDS DOUBLE ARROW
pub const KEY_implies: Keysym =                       Keysym(0x08ceu32);
/// U+2261 IDENTICAL TO
pub const KEY_identical: Keysym =                     Keysym(0x08cfu32);
/// U+221A SQUARE ROOT
pub const KEY_radical: Keysym =                       Keysym(0x08d6u32);
/// U+2282 SUBSET OF
pub const KEY_includedin: Keysym =                    Keysym(0x08dau32);
/// U+2283 SUPERSET OF
pub const KEY_includes: Keysym =                      Keysym(0x08dbu32);
/// U+2229 INTERSECTION
pub const KEY_intersection: Keysym =                  Keysym(0x08dcu32);
/// U+222A UNION
pub const KEY_union: Keysym =                         Keysym(0x08ddu32);
/// U+2227 LOGICAL AND
pub const KEY_logicaland: Keysym =                    Keysym(0x08deu32);
/// U+2228 LOGICAL OR
pub const KEY_logicalor: Keysym =                     Keysym(0x08dfu32);
/// U+2202 PARTIAL DIFFERENTIAL
pub const KEY_partialderivative: Keysym =             Keysym(0x08efu32);
/// U+0192 LATIN SMALL LETTER F WITH HOOK
pub const KEY_function: Keysym =                      Keysym(0x08f6u32);
/// U+2190 LEFTWARDS ARROW
pub const KEY_leftarrow: Keysym =                     Keysym(0x08fbu32);
/// U+2191 UPWARDS ARROW
pub const KEY_uparrow: Keysym =                       Keysym(0x08fcu32);
/// U+2192 RIGHTWARDS ARROW
pub const KEY_rightarrow: Keysym =                    Keysym(0x08fdu32);
/// U+2193 DOWNWARDS ARROW
pub const KEY_downarrow: Keysym =                     Keysym(0x08feu32);

/*
 * Special
 * (from the DEC VT100 Special Graphics Character Set)
 * Byte 3 = 9
 */

pub const KEY_blank: Keysym =                         Keysym(0x09dfu32);
/// U+25C6 BLACK DIAMOND
pub const KEY_soliddiamond: Keysym =                  Keysym(0x09e0u32);
/// U+2592 MEDIUM SHADE
pub const KEY_checkerboard: Keysym =                  Keysym(0x09e1u32);
/// U+2409 SYMBOL FOR HORIZONTAL TABULATION
pub const KEY_ht: Keysym =                            Keysym(0x09e2u32);
/// U+240C SYMBOL FOR FORM FEED
pub const KEY_ff: Keysym =                            Keysym(0x09e3u32);
/// U+240D SYMBOL FOR CARRIAGE RETURN
pub const KEY_cr: Keysym =                            Keysym(0x09e4u32);
/// U+240A SYMBOL FOR LINE FEED
pub const KEY_lf: Keysym =                            Keysym(0x09e5u32);
/// U+2424 SYMBOL FOR NEWLINE
pub const KEY_nl: Keysym =                            Keysym(0x09e8u32);
/// U+240B SYMBOL FOR VERTICAL TABULATION
pub const KEY_vt: Keysym =                            Keysym(0x09e9u32);
/// U+2518 BOX DRAWINGS LIGHT UP AND LEFT
pub const KEY_lowrightcorner: Keysym =                Keysym(0x09eau32);
/// U+2510 BOX DRAWINGS LIGHT DOWN AND LEFT
pub const KEY_uprightcorner: Keysym =                 Keysym(0x09ebu32);
/// U+250C BOX DRAWINGS LIGHT DOWN AND RIGHT
pub const KEY_upleftcorner: Keysym =                  Keysym(0x09ecu32);
/// U+2514 BOX DRAWINGS LIGHT UP AND RIGHT
pub const KEY_lowleftcorner: Keysym =                 Keysym(0x09edu32);
/// U+253C BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
pub const KEY_crossinglines: Keysym =                 Keysym(0x09eeu32);
pub const KEY_horizlinescan1: Keysym =                Keysym(0x09efu32);
pub const KEY_horizlinescan3: Keysym =                Keysym(0x09f0u32);
/// U+2500 BOX DRAWINGS LIGHT HORIZONTAL
pub const KEY_horizlinescan5: Keysym =                Keysym(0x09f1u32);
pub const KEY_horizlinescan7: Keysym =                Keysym(0x09f2u32);
pub const KEY_horizlinescan9: Keysym =                Keysym(0x09f3u32);
/// U+251C BOX DRAWINGS LIGHT VERTICAL AND RIGHT
pub const KEY_leftt: Keysym =                         Keysym(0x09f4u32);
/// U+2524 BOX DRAWINGS LIGHT VERTICAL AND LEFT
pub const KEY_rightt: Keysym =                        Keysym(0x09f5u32);
/// U+2534 BOX DRAWINGS LIGHT UP AND HORIZONTAL
pub const KEY_bott: Keysym =                          Keysym(0x09f6u32);
/// U+252C BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
pub const KEY_topt: Keysym =                          Keysym(0x09f7u32);
/// U+2502 BOX DRAWINGS LIGHT VERTICAL
pub const KEY_vertbar: Keysym =                       Keysym(0x09f8u32);

/*
 * Publishing
 * (these are probably from a long forgotten DEC Publishing
 * font that once shipped with DECwrite)
 * Byte 3 = 0x0a
 */

/// U+2003 EM SPACE
pub const KEY_emspace: Keysym =                       Keysym(0x0aa1u32);
/// U+2002 EN SPACE
pub const KEY_enspace: Keysym =                       Keysym(0x0aa2u32);
pub const KEY_em3space: Keysym =                      Keysym(0x0aa3u32);
pub const KEY_em4space: Keysym =                      Keysym(0x0aa4u32);
/// U+2007 FIGURE SPACE
pub const KEY_digitspace: Keysym =                    Keysym(0x0aa5u32);
/// U+2008 PUNCTUATION SPACE
pub const KEY_punctspace: Keysym =                    Keysym(0x0aa6u32);
/// U+2009 THIN SPACE
pub const KEY_thinspace: Keysym =                     Keysym(0x0aa7u32);
/// U+200A HAIR SPACE
pub const KEY_hairspace: Keysym =                     Keysym(0x0aa8u32);
/// U+2014 EM DASH
pub const KEY_emdash: Keysym =                        Keysym(0x0aa9u32);
/// U+2013 EN DASH
pub const KEY_endash: Keysym =                        Keysym(0x0aaau32);
pub const KEY_signifblank: Keysym =                   Keysym(0x0aacu32);
/// U+2026 HORIZONTAL ELLIPSIS
pub const KEY_ellipsis: Keysym =                      Keysym(0x0aaeu32);
/// U+2025 TWO DOT LEADER
pub const KEY_doubbaselinedot: Keysym =               Keysym(0x0aafu32);
/// U+2153 VULGAR FRACTION ONE THIRD
pub const KEY_onethird: Keysym =                      Keysym(0x0ab0u32);
/// U+2154 VULGAR FRACTION TWO THIRDS
pub const KEY_twothirds: Keysym =                     Keysym(0x0ab1u32);
/// U+2155 VULGAR FRACTION ONE FIFTH
pub const KEY_onefifth: Keysym =                      Keysym(0x0ab2u32);
/// U+2156 VULGAR FRACTION TWO FIFTHS
pub const KEY_twofifths: Keysym =                     Keysym(0x0ab3u32);
/// U+2157 VULGAR FRACTION THREE FIFTHS
pub const KEY_threefifths: Keysym =                   Keysym(0x0ab4u32);
/// U+2158 VULGAR FRACTION FOUR FIFTHS
pub const KEY_fourfifths: Keysym =                    Keysym(0x0ab5u32);
/// U+2159 VULGAR FRACTION ONE SIXTH
pub const KEY_onesixth: Keysym =                      Keysym(0x0ab6u32);
/// U+215A VULGAR FRACTION FIVE SIXTHS
pub const KEY_fivesixths: Keysym =                    Keysym(0x0ab7u32);
/// U+2105 CARE OF
pub const KEY_careof: Keysym =                        Keysym(0x0ab8u32);
/// U+2012 FIGURE DASH
pub const KEY_figdash: Keysym =                       Keysym(0x0abbu32);
pub const KEY_leftanglebracket: Keysym =              Keysym(0x0abcu32);
pub const KEY_decimalpoint: Keysym =                  Keysym(0x0abdu32);
pub const KEY_rightanglebracket: Keysym =             Keysym(0x0abeu32);
pub const KEY_marker: Keysym =                        Keysym(0x0abfu32);
/// U+215B VULGAR FRACTION ONE EIGHTH
pub const KEY_oneeighth: Keysym =                     Keysym(0x0ac3u32);
/// U+215C VULGAR FRACTION THREE EIGHTHS
pub const KEY_threeeighths: Keysym =                  Keysym(0x0ac4u32);
/// U+215D VULGAR FRACTION FIVE EIGHTHS
pub const KEY_fiveeighths: Keysym =                   Keysym(0x0ac5u32);
/// U+215E VULGAR FRACTION SEVEN EIGHTHS
pub const KEY_seveneighths: Keysym =                  Keysym(0x0ac6u32);
/// U+2122 TRADE MARK SIGN
pub const KEY_trademark: Keysym =                     Keysym(0x0ac9u32);
pub const KEY_signaturemark: Keysym =                 Keysym(0x0acau32);
pub const KEY_trademarkincircle: Keysym =             Keysym(0x0acbu32);
pub const KEY_leftopentriangle: Keysym =              Keysym(0x0accu32);
pub const KEY_rightopentriangle: Keysym =             Keysym(0x0acdu32);
pub const KEY_emopencircle: Keysym =                  Keysym(0x0aceu32);
pub const KEY_emopenrectangle: Keysym =               Keysym(0x0acfu32);
/// U+2018 LEFT SINGLE QUOTATION MARK
pub const KEY_leftsinglequotemark: Keysym =           Keysym(0x0ad0u32);
/// U+2019 RIGHT SINGLE QUOTATION MARK
pub const KEY_rightsinglequotemark: Keysym =          Keysym(0x0ad1u32);
/// U+201C LEFT DOUBLE QUOTATION MARK
pub const KEY_leftdoublequotemark: Keysym =           Keysym(0x0ad2u32);
/// U+201D RIGHT DOUBLE QUOTATION MARK
pub const KEY_rightdoublequotemark: Keysym =          Keysym(0x0ad3u32);
/// U+211E PRESCRIPTION TAKE
pub const KEY_prescription: Keysym =                  Keysym(0x0ad4u32);
/// U+2030 PER MILLE SIGN
pub const KEY_permille: Keysym =                      Keysym(0x0ad5u32);
/// U+2032 PRIME
pub const KEY_minutes: Keysym =                       Keysym(0x0ad6u32);
/// U+2033 DOUBLE PRIME
pub const KEY_seconds: Keysym =                       Keysym(0x0ad7u32);
/// U+271D LATIN CROSS
pub const KEY_latincross: Keysym =                    Keysym(0x0ad9u32);
pub const KEY_hexagram: Keysym =                      Keysym(0x0adau32);
pub const KEY_filledrectbullet: Keysym =              Keysym(0x0adbu32);
pub const KEY_filledlefttribullet: Keysym =           Keysym(0x0adcu32);
pub const KEY_filledrighttribullet: Keysym =          Keysym(0x0addu32);
pub const KEY_emfilledcircle: Keysym =                Keysym(0x0adeu32);
pub const KEY_emfilledrect: Keysym =                  Keysym(0x0adfu32);
pub const KEY_enopencircbullet: Keysym =              Keysym(0x0ae0u32);
pub const KEY_enopensquarebullet: Keysym =            Keysym(0x0ae1u32);
pub const KEY_openrectbullet: Keysym =                Keysym(0x0ae2u32);
pub const KEY_opentribulletup: Keysym =               Keysym(0x0ae3u32);
pub const KEY_opentribulletdown: Keysym =             Keysym(0x0ae4u32);
pub const KEY_openstar: Keysym =                      Keysym(0x0ae5u32);
pub const KEY_enfilledcircbullet: Keysym =            Keysym(0x0ae6u32);
pub const KEY_enfilledsqbullet: Keysym =              Keysym(0x0ae7u32);
pub const KEY_filledtribulletup: Keysym =             Keysym(0x0ae8u32);
pub const KEY_filledtribulletdown: Keysym =           Keysym(0x0ae9u32);
pub const KEY_leftpointer: Keysym =                   Keysym(0x0aeau32);
pub const KEY_rightpointer: Keysym =                  Keysym(0x0aebu32);
/// U+2663 BLACK CLUB SUIT
pub const KEY_club: Keysym =                          Keysym(0x0aecu32);
/// U+2666 BLACK DIAMOND SUIT
pub const KEY_diamond: Keysym =                       Keysym(0x0aedu32);
/// U+2665 BLACK HEART SUIT
pub const KEY_heart: Keysym =                         Keysym(0x0aeeu32);
/// U+2720 MALTESE CROSS
pub const KEY_maltesecross: Keysym =                  Keysym(0x0af0u32);
/// U+2020 DAGGER
pub const KEY_dagger: Keysym =                        Keysym(0x0af1u32);
/// U+2021 DOUBLE DAGGER
pub const KEY_doubledagger: Keysym =                  Keysym(0x0af2u32);
/// U+2713 CHECK MARK
pub const KEY_checkmark: Keysym =                     Keysym(0x0af3u32);
/// U+2717 BALLOT X
pub const KEY_ballotcross: Keysym =                   Keysym(0x0af4u32);
/// U+266F MUSIC SHARP SIGN
pub const KEY_musicalsharp: Keysym =                  Keysym(0x0af5u32);
/// U+266D MUSIC FLAT SIGN
pub const KEY_musicalflat: Keysym =                   Keysym(0x0af6u32);
/// U+2642 MALE SIGN
pub const KEY_malesymbol: Keysym =                    Keysym(0x0af7u32);
/// U+2640 FEMALE SIGN
pub const KEY_femalesymbol: Keysym =                  Keysym(0x0af8u32);
/// U+260E BLACK TELEPHONE
pub const KEY_telephone: Keysym =                     Keysym(0x0af9u32);
/// U+2315 TELEPHONE RECORDER
pub const KEY_telephonerecorder: Keysym =             Keysym(0x0afau32);
/// U+2117 SOUND RECORDING COPYRIGHT
pub const KEY_phonographcopyright: Keysym =           Keysym(0x0afbu32);
/// U+2038 CARET
pub const KEY_caret: Keysym =                         Keysym(0x0afcu32);
pub const KEY_singlelowquotemark: Keysym =            Keysym(0x0afdu32);
pub const KEY_doublelowquotemark: Keysym =            Keysym(0x0afeu32);
pub const KEY_cursor: Keysym =                        Keysym(0x0affu32);

/*
 * APL
 * Byte 3 = 0x0b
 */

pub const KEY_leftcaret: Keysym =                     Keysym(0x0ba3u32);
pub const KEY_rightcaret: Keysym =                    Keysym(0x0ba6u32);
pub const KEY_downcaret: Keysym =                     Keysym(0x0ba8u32);
pub const KEY_upcaret: Keysym =                       Keysym(0x0ba9u32);
pub const KEY_overbar: Keysym =                       Keysym(0x0bc0u32);
/// U+22A4 DOWN TACK
pub const KEY_downtack: Keysym =                      Keysym(0x0bc2u32);
pub const KEY_upshoe: Keysym =                        Keysym(0x0bc3u32);
/// U+230A LEFT FLOOR
pub const KEY_downstile: Keysym =                     Keysym(0x0bc4u32);
pub const KEY_underbar: Keysym =                      Keysym(0x0bc6u32);
/// U+2218 RING OPERATOR
pub const KEY_jot: Keysym =                           Keysym(0x0bcau32);
/// U+2395 APL FUNCTIONAL SYMBOL QUAD
pub const KEY_quad: Keysym =                          Keysym(0x0bccu32);
/// U+22A5 UP TACK
pub const KEY_uptack: Keysym =                        Keysym(0x0bceu32);
/// U+25CB WHITE CIRCLE
pub const KEY_circle: Keysym =                        Keysym(0x0bcfu32);
/// U+2308 LEFT CEILING
pub const KEY_upstile: Keysym =                       Keysym(0x0bd3u32);
pub const KEY_downshoe: Keysym =                      Keysym(0x0bd6u32);
pub const KEY_rightshoe: Keysym =                     Keysym(0x0bd8u32);
pub const KEY_leftshoe: Keysym =                      Keysym(0x0bdau32);
/// U+22A3 LEFT TACK
pub const KEY_lefttack: Keysym =                      Keysym(0x0bdcu32);
/// U+22A2 RIGHT TACK
pub const KEY_righttack: Keysym =                     Keysym(0x0bfcu32);

/*
 * Hebrew
 * Byte 3 = 0x0c
 */

/// U+2017 DOUBLE LOW LINE
pub const KEY_hebrew_doublelowline: Keysym =          Keysym(0x0cdfu32);
/// U+05D0 HEBREW LETTER ALEF
pub const KEY_hebrew_aleph: Keysym =                  Keysym(0x0ce0u32);
/// U+05D1 HEBREW LETTER BET
pub const KEY_hebrew_bet: Keysym =                    Keysym(0x0ce1u32);
/// deprecated
pub const KEY_hebrew_beth: Keysym =                   Keysym(0x0ce1u32);
/// U+05D2 HEBREW LETTER GIMEL
pub const KEY_hebrew_gimel: Keysym =                  Keysym(0x0ce2u32);
/// deprecated
pub const KEY_hebrew_gimmel: Keysym =                 Keysym(0x0ce2u32);
/// U+05D3 HEBREW LETTER DALET
pub const KEY_hebrew_dalet: Keysym =                  Keysym(0x0ce3u32);
/// deprecated
pub const KEY_hebrew_daleth: Keysym =                 Keysym(0x0ce3u32);
/// U+05D4 HEBREW LETTER HE
pub const KEY_hebrew_he: Keysym =                     Keysym(0x0ce4u32);
/// U+05D5 HEBREW LETTER VAV
pub const KEY_hebrew_waw: Keysym =                    Keysym(0x0ce5u32);
/// U+05D6 HEBREW LETTER ZAYIN
pub const KEY_hebrew_zain: Keysym =                   Keysym(0x0ce6u32);
/// deprecated
pub const KEY_hebrew_zayin: Keysym =                  Keysym(0x0ce6u32);
/// U+05D7 HEBREW LETTER HET
pub const KEY_hebrew_chet: Keysym =                   Keysym(0x0ce7u32);
/// deprecated
pub const KEY_hebrew_het: Keysym =                    Keysym(0x0ce7u32);
/// U+05D8 HEBREW LETTER TET
pub const KEY_hebrew_tet: Keysym =                    Keysym(0x0ce8u32);
/// deprecated
pub const KEY_hebrew_teth: Keysym =                   Keysym(0x0ce8u32);
/// U+05D9 HEBREW LETTER YOD
pub const KEY_hebrew_yod: Keysym =                    Keysym(0x0ce9u32);
/// U+05DA HEBREW LETTER FINAL KAF
pub const KEY_hebrew_finalkaph: Keysym =              Keysym(0x0ceau32);
/// U+05DB HEBREW LETTER KAF
pub const KEY_hebrew_kaph: Keysym =                   Keysym(0x0cebu32);
/// U+05DC HEBREW LETTER LAMED
pub const KEY_hebrew_lamed: Keysym =                  Keysym(0x0cecu32);
/// U+05DD HEBREW LETTER FINAL MEM
pub const KEY_hebrew_finalmem: Keysym =               Keysym(0x0cedu32);
/// U+05DE HEBREW LETTER MEM
pub const KEY_hebrew_mem: Keysym =                    Keysym(0x0ceeu32);
/// U+05DF HEBREW LETTER FINAL NUN
pub const KEY_hebrew_finalnun: Keysym =               Keysym(0x0cefu32);
/// U+05E0 HEBREW LETTER NUN
pub const KEY_hebrew_nun: Keysym =                    Keysym(0x0cf0u32);
/// U+05E1 HEBREW LETTER SAMEKH
pub const KEY_hebrew_samech: Keysym =                 Keysym(0x0cf1u32);
/// deprecated
pub const KEY_hebrew_samekh: Keysym =                 Keysym(0x0cf1u32);
/// U+05E2 HEBREW LETTER AYIN
pub const KEY_hebrew_ayin: Keysym =                   Keysym(0x0cf2u32);
/// U+05E3 HEBREW LETTER FINAL PE
pub const KEY_hebrew_finalpe: Keysym =                Keysym(0x0cf3u32);
/// U+05E4 HEBREW LETTER PE
pub const KEY_hebrew_pe: Keysym =                     Keysym(0x0cf4u32);
/// U+05E5 HEBREW LETTER FINAL TSADI
pub const KEY_hebrew_finalzade: Keysym =              Keysym(0x0cf5u32);
/// deprecated
pub const KEY_hebrew_finalzadi: Keysym =              Keysym(0x0cf5u32);
/// U+05E6 HEBREW LETTER TSADI
pub const KEY_hebrew_zade: Keysym =                   Keysym(0x0cf6u32);
/// deprecated
pub const KEY_hebrew_zadi: Keysym =                   Keysym(0x0cf6u32);
/// U+05E7 HEBREW LETTER QOF
pub const KEY_hebrew_qoph: Keysym =                   Keysym(0x0cf7u32);
/// deprecated
pub const KEY_hebrew_kuf: Keysym =                    Keysym(0x0cf7u32);
/// U+05E8 HEBREW LETTER RESH
pub const KEY_hebrew_resh: Keysym =                   Keysym(0x0cf8u32);
/// U+05E9 HEBREW LETTER SHIN
pub const KEY_hebrew_shin: Keysym =                   Keysym(0x0cf9u32);
/// U+05EA HEBREW LETTER TAV
pub const KEY_hebrew_taw: Keysym =                    Keysym(0x0cfau32);
/// deprecated
pub const KEY_hebrew_taf: Keysym =                    Keysym(0x0cfau32);
/// Alias for mode_switch
pub const KEY_Hebrew_switch: Keysym =                 Keysym(0xff7eu32);

/*
 * Thai
 * Byte 3 = 0x0d
 */

/// U+0E01 THAI CHARACTER KO KAI
pub const KEY_Thai_kokai: Keysym =                    Keysym(0x0da1u32);
/// U+0E02 THAI CHARACTER KHO KHAI
pub const KEY_Thai_khokhai: Keysym =                  Keysym(0x0da2u32);
/// U+0E03 THAI CHARACTER KHO KHUAT
pub const KEY_Thai_khokhuat: Keysym =                 Keysym(0x0da3u32);
/// U+0E04 THAI CHARACTER KHO KHWAI
pub const KEY_Thai_khokhwai: Keysym =                 Keysym(0x0da4u32);
/// U+0E05 THAI CHARACTER KHO KHON
pub const KEY_Thai_khokhon: Keysym =                  Keysym(0x0da5u32);
/// U+0E06 THAI CHARACTER KHO RAKHANG
pub const KEY_Thai_khorakhang: Keysym =               Keysym(0x0da6u32);
/// U+0E07 THAI CHARACTER NGO NGU
pub const KEY_Thai_ngongu: Keysym =                   Keysym(0x0da7u32);
/// U+0E08 THAI CHARACTER CHO CHAN
pub const KEY_Thai_chochan: Keysym =                  Keysym(0x0da8u32);
/// U+0E09 THAI CHARACTER CHO CHING
pub const KEY_Thai_choching: Keysym =                 Keysym(0x0da9u32);
/// U+0E0A THAI CHARACTER CHO CHANG
pub const KEY_Thai_chochang: Keysym =                 Keysym(0x0daau32);
/// U+0E0B THAI CHARACTER SO SO
pub const KEY_Thai_soso: Keysym =                     Keysym(0x0dabu32);
/// U+0E0C THAI CHARACTER CHO CHOE
pub const KEY_Thai_chochoe: Keysym =                  Keysym(0x0dacu32);
/// U+0E0D THAI CHARACTER YO YING
pub const KEY_Thai_yoying: Keysym =                   Keysym(0x0dadu32);
/// U+0E0E THAI CHARACTER DO CHADA
pub const KEY_Thai_dochada: Keysym =                  Keysym(0x0daeu32);
/// U+0E0F THAI CHARACTER TO PATAK
pub const KEY_Thai_topatak: Keysym =                  Keysym(0x0dafu32);
/// U+0E10 THAI CHARACTER THO THAN
pub const KEY_Thai_thothan: Keysym =                  Keysym(0x0db0u32);
/// U+0E11 THAI CHARACTER THO NANGMONTHO
pub const KEY_Thai_thonangmontho: Keysym =            Keysym(0x0db1u32);
/// U+0E12 THAI CHARACTER THO PHUTHAO
pub const KEY_Thai_thophuthao: Keysym =               Keysym(0x0db2u32);
/// U+0E13 THAI CHARACTER NO NEN
pub const KEY_Thai_nonen: Keysym =                    Keysym(0x0db3u32);
/// U+0E14 THAI CHARACTER DO DEK
pub const KEY_Thai_dodek: Keysym =                    Keysym(0x0db4u32);
/// U+0E15 THAI CHARACTER TO TAO
pub const KEY_Thai_totao: Keysym =                    Keysym(0x0db5u32);
/// U+0E16 THAI CHARACTER THO THUNG
pub const KEY_Thai_thothung: Keysym =                 Keysym(0x0db6u32);
/// U+0E17 THAI CHARACTER THO THAHAN
pub const KEY_Thai_thothahan: Keysym =                Keysym(0x0db7u32);
/// U+0E18 THAI CHARACTER THO THONG
pub const KEY_Thai_thothong: Keysym =                 Keysym(0x0db8u32);
/// U+0E19 THAI CHARACTER NO NU
pub const KEY_Thai_nonu: Keysym =                     Keysym(0x0db9u32);
/// U+0E1A THAI CHARACTER BO BAIMAI
pub const KEY_Thai_bobaimai: Keysym =                 Keysym(0x0dbau32);
/// U+0E1B THAI CHARACTER PO PLA
pub const KEY_Thai_popla: Keysym =                    Keysym(0x0dbbu32);
/// U+0E1C THAI CHARACTER PHO PHUNG
pub const KEY_Thai_phophung: Keysym =                 Keysym(0x0dbcu32);
/// U+0E1D THAI CHARACTER FO FA
pub const KEY_Thai_fofa: Keysym =                     Keysym(0x0dbdu32);
/// U+0E1E THAI CHARACTER PHO PHAN
pub const KEY_Thai_phophan: Keysym =                  Keysym(0x0dbeu32);
/// U+0E1F THAI CHARACTER FO FAN
pub const KEY_Thai_fofan: Keysym =                    Keysym(0x0dbfu32);
/// U+0E20 THAI CHARACTER PHO SAMPHAO
pub const KEY_Thai_phosamphao: Keysym =               Keysym(0x0dc0u32);
/// U+0E21 THAI CHARACTER MO MA
pub const KEY_Thai_moma: Keysym =                     Keysym(0x0dc1u32);
/// U+0E22 THAI CHARACTER YO YAK
pub const KEY_Thai_yoyak: Keysym =                    Keysym(0x0dc2u32);
/// U+0E23 THAI CHARACTER RO RUA
pub const KEY_Thai_rorua: Keysym =                    Keysym(0x0dc3u32);
/// U+0E24 THAI CHARACTER RU
pub const KEY_Thai_ru: Keysym =                       Keysym(0x0dc4u32);
/// U+0E25 THAI CHARACTER LO LING
pub const KEY_Thai_loling: Keysym =                   Keysym(0x0dc5u32);
/// U+0E26 THAI CHARACTER LU
pub const KEY_Thai_lu: Keysym =                       Keysym(0x0dc6u32);
/// U+0E27 THAI CHARACTER WO WAEN
pub const KEY_Thai_wowaen: Keysym =                   Keysym(0x0dc7u32);
/// U+0E28 THAI CHARACTER SO SALA
pub const KEY_Thai_sosala: Keysym =                   Keysym(0x0dc8u32);
/// U+0E29 THAI CHARACTER SO RUSI
pub const KEY_Thai_sorusi: Keysym =                   Keysym(0x0dc9u32);
/// U+0E2A THAI CHARACTER SO SUA
pub const KEY_Thai_sosua: Keysym =                    Keysym(0x0dcau32);
/// U+0E2B THAI CHARACTER HO HIP
pub const KEY_Thai_hohip: Keysym =                    Keysym(0x0dcbu32);
/// U+0E2C THAI CHARACTER LO CHULA
pub const KEY_Thai_lochula: Keysym =                  Keysym(0x0dccu32);
/// U+0E2D THAI CHARACTER O ANG
pub const KEY_Thai_oang: Keysym =                     Keysym(0x0dcdu32);
/// U+0E2E THAI CHARACTER HO NOKHUK
pub const KEY_Thai_honokhuk: Keysym =                 Keysym(0x0dceu32);
/// U+0E2F THAI CHARACTER PAIYANNOI
pub const KEY_Thai_paiyannoi: Keysym =                Keysym(0x0dcfu32);
/// U+0E30 THAI CHARACTER SARA A
pub const KEY_Thai_saraa: Keysym =                    Keysym(0x0dd0u32);
pub const KEY_Thai_maihanakat: Keysym =               Keysym(0x0dd1u32);
/// U+0E32 THAI CHARACTER SARA AA
pub const KEY_Thai_saraaa: Keysym =                   Keysym(0x0dd2u32);
/// U+0E33 THAI CHARACTER SARA AM
pub const KEY_Thai_saraam: Keysym =                   Keysym(0x0dd3u32);
/// U+0E34 THAI CHARACTER SARA I
pub const KEY_Thai_sarai: Keysym =                    Keysym(0x0dd4u32);
/// U+0E35 THAI CHARACTER SARA II
pub const KEY_Thai_saraii: Keysym =                   Keysym(0x0dd5u32);
/// U+0E36 THAI CHARACTER SARA UE
pub const KEY_Thai_saraue: Keysym =                   Keysym(0x0dd6u32);
/// U+0E37 THAI CHARACTER SARA UEE
pub const KEY_Thai_sarauee: Keysym =                  Keysym(0x0dd7u32);
/// U+0E38 THAI CHARACTER SARA U
pub const KEY_Thai_sarau: Keysym =                    Keysym(0x0dd8u32);
/// U+0E39 THAI CHARACTER SARA UU
pub const KEY_Thai_sarauu: Keysym =                   Keysym(0x0dd9u32);
/// U+0E3A THAI CHARACTER PHINTHU
pub const KEY_Thai_phinthu: Keysym =                  Keysym(0x0ddau32);
pub const KEY_Thai_maihanakat_maitho: Keysym =        Keysym(0x0ddeu32);
/// U+0E3F THAI CURRENCY SYMBOL BAHT
pub const KEY_Thai_baht: Keysym =                     Keysym(0x0ddfu32);
/// U+0E40 THAI CHARACTER SARA E
pub const KEY_Thai_sarae: Keysym =                    Keysym(0x0de0u32);
/// U+0E41 THAI CHARACTER SARA AE
pub const KEY_Thai_saraae: Keysym =                   Keysym(0x0de1u32);
/// U+0E42 THAI CHARACTER SARA O
pub const KEY_Thai_sarao: Keysym =                    Keysym(0x0de2u32);
/// U+0E43 THAI CHARACTER SARA AI MAIMUAN
pub const KEY_Thai_saraaimaimuan: Keysym =            Keysym(0x0de3u32);
/// U+0E44 THAI CHARACTER SARA AI MAIMALAI
pub const KEY_Thai_saraaimaimalai: Keysym =           Keysym(0x0de4u32);
/// U+0E45 THAI CHARACTER LAKKHANGYAO
pub const KEY_Thai_lakkhangyao: Keysym =              Keysym(0x0de5u32);
/// U+0E46 THAI CHARACTER MAIYAMOK
pub const KEY_Thai_maiyamok: Keysym =                 Keysym(0x0de6u32);
/// U+0E47 THAI CHARACTER MAITAIKHU
pub const KEY_Thai_maitaikhu: Keysym =                Keysym(0x0de7u32);
/// U+0E48 THAI CHARACTER MAI EK
pub const KEY_Thai_maiek: Keysym =                    Keysym(0x0de8u32);
/// U+0E49 THAI CHARACTER MAI THO
pub const KEY_Thai_maitho: Keysym =                   Keysym(0x0de9u32);
/// U+0E4A THAI CHARACTER MAI TRI
pub const KEY_Thai_maitri: Keysym =                   Keysym(0x0deau32);
/// U+0E4B THAI CHARACTER MAI CHATTAWA
pub const KEY_Thai_maichattawa: Keysym =              Keysym(0x0debu32);
/// U+0E4C THAI CHARACTER THANTHAKHAT
pub const KEY_Thai_thanthakhat: Keysym =              Keysym(0x0decu32);
/// U+0E4D THAI CHARACTER NIKHAHIT
pub const KEY_Thai_nikhahit: Keysym =                 Keysym(0x0dedu32);
/// U+0E50 THAI DIGIT ZERO
pub const KEY_Thai_leksun: Keysym =                   Keysym(0x0df0u32);
/// U+0E51 THAI DIGIT ONE
pub const KEY_Thai_leknung: Keysym =                  Keysym(0x0df1u32);
/// U+0E52 THAI DIGIT TWO
pub const KEY_Thai_leksong: Keysym =                  Keysym(0x0df2u32);
/// U+0E53 THAI DIGIT THREE
pub const KEY_Thai_leksam: Keysym =                   Keysym(0x0df3u32);
/// U+0E54 THAI DIGIT FOUR
pub const KEY_Thai_leksi: Keysym =                    Keysym(0x0df4u32);
/// U+0E55 THAI DIGIT FIVE
pub const KEY_Thai_lekha: Keysym =                    Keysym(0x0df5u32);
/// U+0E56 THAI DIGIT SIX
pub const KEY_Thai_lekhok: Keysym =                   Keysym(0x0df6u32);
/// U+0E57 THAI DIGIT SEVEN
pub const KEY_Thai_lekchet: Keysym =                  Keysym(0x0df7u32);
/// U+0E58 THAI DIGIT EIGHT
pub const KEY_Thai_lekpaet: Keysym =                  Keysym(0x0df8u32);
/// U+0E59 THAI DIGIT NINE
pub const KEY_Thai_lekkao: Keysym =                   Keysym(0x0df9u32);

/*
 * Korean
 * Byte 3 = 0x0e
 */


pub const KEY_Hangul: Keysym =                        Keysym(0xff31u32);
/// Hangul start
pub const KEY_Hangul_Start: Keysym =                  Keysym(0xff32u32);
pub const KEY_Hangul_End: Keysym =                    Keysym(0xff33u32);
pub const KEY_Hangul_Hanja: Keysym =                  Keysym(0xff34u32);
/// Hangul Jamo mode
pub const KEY_Hangul_Jamo: Keysym =                   Keysym(0xff35u32);
/// Hangul Romaja mode
pub const KEY_Hangul_Romaja: Keysym =                 Keysym(0xff36u32);
/// Hangul code input mode
pub const KEY_Hangul_Codeinput: Keysym =              Keysym(0xff37u32);
/// Jeonja mode
pub const KEY_Hangul_Jeonja: Keysym =                 Keysym(0xff38u32);
/// Banja mode
pub const KEY_Hangul_Banja: Keysym =                  Keysym(0xff39u32);
/// Pre Hanja conversion
pub const KEY_Hangul_PreHanja: Keysym =               Keysym(0xff3au32);
/// Post Hanja conversion
pub const KEY_Hangul_PostHanja: Keysym =              Keysym(0xff3bu32);
/// Single candidate
pub const KEY_Hangul_SingleCandidate: Keysym =        Keysym(0xff3cu32);
/// Multiple candidate
pub const KEY_Hangul_MultipleCandidate: Keysym =      Keysym(0xff3du32);
/// Previous candidate
pub const KEY_Hangul_PreviousCandidate: Keysym =      Keysym(0xff3eu32);
/// Special symbols
pub const KEY_Hangul_Special: Keysym =                Keysym(0xff3fu32);
/// Alias for mode_switch
pub const KEY_Hangul_switch: Keysym =                 Keysym(0xff7eu32);

/* Hangul Consonant Characters */
pub const KEY_Hangul_Kiyeog: Keysym =                 Keysym(0x0ea1u32);
pub const KEY_Hangul_SsangKiyeog: Keysym =            Keysym(0x0ea2u32);
pub const KEY_Hangul_KiyeogSios: Keysym =             Keysym(0x0ea3u32);
pub const KEY_Hangul_Nieun: Keysym =                  Keysym(0x0ea4u32);
pub const KEY_Hangul_NieunJieuj: Keysym =             Keysym(0x0ea5u32);
pub const KEY_Hangul_NieunHieuh: Keysym =             Keysym(0x0ea6u32);
pub const KEY_Hangul_Dikeud: Keysym =                 Keysym(0x0ea7u32);
pub const KEY_Hangul_SsangDikeud: Keysym =            Keysym(0x0ea8u32);
pub const KEY_Hangul_Rieul: Keysym =                  Keysym(0x0ea9u32);
pub const KEY_Hangul_RieulKiyeog: Keysym =            Keysym(0x0eaau32);
pub const KEY_Hangul_RieulMieum: Keysym =             Keysym(0x0eabu32);
pub const KEY_Hangul_RieulPieub: Keysym =             Keysym(0x0eacu32);
pub const KEY_Hangul_RieulSios: Keysym =              Keysym(0x0eadu32);
pub const KEY_Hangul_RieulTieut: Keysym =             Keysym(0x0eaeu32);
pub const KEY_Hangul_RieulPhieuf: Keysym =            Keysym(0x0eafu32);
pub const KEY_Hangul_RieulHieuh: Keysym =             Keysym(0x0eb0u32);
pub const KEY_Hangul_Mieum: Keysym =                  Keysym(0x0eb1u32);
pub const KEY_Hangul_Pieub: Keysym =                  Keysym(0x0eb2u32);
pub const KEY_Hangul_SsangPieub: Keysym =             Keysym(0x0eb3u32);
pub const KEY_Hangul_PieubSios: Keysym =              Keysym(0x0eb4u32);
pub const KEY_Hangul_Sios: Keysym =                   Keysym(0x0eb5u32);
pub const KEY_Hangul_SsangSios: Keysym =              Keysym(0x0eb6u32);
pub const KEY_Hangul_Ieung: Keysym =                  Keysym(0x0eb7u32);
pub const KEY_Hangul_Jieuj: Keysym =                  Keysym(0x0eb8u32);
pub const KEY_Hangul_SsangJieuj: Keysym =             Keysym(0x0eb9u32);
pub const KEY_Hangul_Cieuc: Keysym =                  Keysym(0x0ebau32);
pub const KEY_Hangul_Khieuq: Keysym =                 Keysym(0x0ebbu32);
pub const KEY_Hangul_Tieut: Keysym =                  Keysym(0x0ebcu32);
pub const KEY_Hangul_Phieuf: Keysym =                 Keysym(0x0ebdu32);
pub const KEY_Hangul_Hieuh: Keysym =                  Keysym(0x0ebeu32);

/* Hangul Vowel Characters */
pub const KEY_Hangul_A: Keysym =                      Keysym(0x0ebfu32);
pub const KEY_Hangul_AE: Keysym =                     Keysym(0x0ec0u32);
pub const KEY_Hangul_YA: Keysym =                     Keysym(0x0ec1u32);
pub const KEY_Hangul_YAE: Keysym =                    Keysym(0x0ec2u32);
pub const KEY_Hangul_EO: Keysym =                     Keysym(0x0ec3u32);
pub const KEY_Hangul_E: Keysym =                      Keysym(0x0ec4u32);
pub const KEY_Hangul_YEO: Keysym =                    Keysym(0x0ec5u32);
pub const KEY_Hangul_YE: Keysym =                     Keysym(0x0ec6u32);
pub const KEY_Hangul_O: Keysym =                      Keysym(0x0ec7u32);
pub const KEY_Hangul_WA: Keysym =                     Keysym(0x0ec8u32);
pub const KEY_Hangul_WAE: Keysym =                    Keysym(0x0ec9u32);
pub const KEY_Hangul_OE: Keysym =                     Keysym(0x0ecau32);
pub const KEY_Hangul_YO: Keysym =                     Keysym(0x0ecbu32);
pub const KEY_Hangul_U: Keysym =                      Keysym(0x0eccu32);
pub const KEY_Hangul_WEO: Keysym =                    Keysym(0x0ecdu32);
pub const KEY_Hangul_WE: Keysym =                     Keysym(0x0eceu32);
pub const KEY_Hangul_WI: Keysym =                     Keysym(0x0ecfu32);
pub const KEY_Hangul_YU: Keysym =                     Keysym(0x0ed0u32);
pub const KEY_Hangul_EU: Keysym =                     Keysym(0x0ed1u32);
pub const KEY_Hangul_YI: Keysym =                     Keysym(0x0ed2u32);
pub const KEY_Hangul_I: Keysym =                      Keysym(0x0ed3u32);

/* Hangul syllable-final (JongSeong) Characters */
pub const KEY_Hangul_J_Kiyeog: Keysym =               Keysym(0x0ed4u32);
pub const KEY_Hangul_J_SsangKiyeog: Keysym =          Keysym(0x0ed5u32);
pub const KEY_Hangul_J_KiyeogSios: Keysym =           Keysym(0x0ed6u32);
pub const KEY_Hangul_J_Nieun: Keysym =                Keysym(0x0ed7u32);
pub const KEY_Hangul_J_NieunJieuj: Keysym =           Keysym(0x0ed8u32);
pub const KEY_Hangul_J_NieunHieuh: Keysym =           Keysym(0x0ed9u32);
pub const KEY_Hangul_J_Dikeud: Keysym =               Keysym(0x0edau32);
pub const KEY_Hangul_J_Rieul: Keysym =                Keysym(0x0edbu32);
pub const KEY_Hangul_J_RieulKiyeog: Keysym =          Keysym(0x0edcu32);
pub const KEY_Hangul_J_RieulMieum: Keysym =           Keysym(0x0eddu32);
pub const KEY_Hangul_J_RieulPieub: Keysym =           Keysym(0x0edeu32);
pub const KEY_Hangul_J_RieulSios: Keysym =            Keysym(0x0edfu32);
pub const KEY_Hangul_J_RieulTieut: Keysym =           Keysym(0x0ee0u32);
pub const KEY_Hangul_J_RieulPhieuf: Keysym =          Keysym(0x0ee1u32);
pub const KEY_Hangul_J_RieulHieuh: Keysym =           Keysym(0x0ee2u32);
pub const KEY_Hangul_J_Mieum: Keysym =                Keysym(0x0ee3u32);
pub const KEY_Hangul_J_Pieub: Keysym =                Keysym(0x0ee4u32);
pub const KEY_Hangul_J_PieubSios: Keysym =            Keysym(0x0ee5u32);
pub const KEY_Hangul_J_Sios: Keysym =                 Keysym(0x0ee6u32);
pub const KEY_Hangul_J_SsangSios: Keysym =            Keysym(0x0ee7u32);
pub const KEY_Hangul_J_Ieung: Keysym =                Keysym(0x0ee8u32);
pub const KEY_Hangul_J_Jieuj: Keysym =                Keysym(0x0ee9u32);
pub const KEY_Hangul_J_Cieuc: Keysym =                Keysym(0x0eeau32);
pub const KEY_Hangul_J_Khieuq: Keysym =               Keysym(0x0eebu32);
pub const KEY_Hangul_J_Tieut: Keysym =                Keysym(0x0eecu32);
pub const KEY_Hangul_J_Phieuf: Keysym =               Keysym(0x0eedu32);
pub const KEY_Hangul_J_Hieuh: Keysym =                Keysym(0x0eeeu32);

/* Ancient Hangul Consonant Characters */
pub const KEY_Hangul_RieulYeorinHieuh: Keysym =       Keysym(0x0eefu32);
pub const KEY_Hangul_SunkyeongeumMieum: Keysym =      Keysym(0x0ef0u32);
pub const KEY_Hangul_SunkyeongeumPieub: Keysym =      Keysym(0x0ef1u32);
pub const KEY_Hangul_PanSios: Keysym =                Keysym(0x0ef2u32);
pub const KEY_Hangul_KkogjiDalrinIeung: Keysym =      Keysym(0x0ef3u32);
pub const KEY_Hangul_SunkyeongeumPhieuf: Keysym =     Keysym(0x0ef4u32);
pub const KEY_Hangul_YeorinHieuh: Keysym =            Keysym(0x0ef5u32);

/* Ancient Hangul Vowel Characters */
pub const KEY_Hangul_AraeA: Keysym =                  Keysym(0x0ef6u32);
pub const KEY_Hangul_AraeAE: Keysym =                 Keysym(0x0ef7u32);

/* Ancient Hangul syllable-final (JongSeong) Characters */
pub const KEY_Hangul_J_PanSios: Keysym =              Keysym(0x0ef8u32);
pub const KEY_Hangul_J_KkogjiDalrinIeung: Keysym =    Keysym(0x0ef9u32);
pub const KEY_Hangul_J_YeorinHieuh: Keysym =          Keysym(0x0efau32);

/* Korean currency symbol */
pub const KEY_Korean_Won: Keysym =                    Keysym(0x0effu32);


/*
 * Armenian
 */

/// U+0587 ARMENIAN SMALL LIGATURE ECH YIWN
pub const KEY_Armenian_ligature_ew: Keysym =          Keysym(0x1000587u32);
/// U+0589 ARMENIAN FULL STOP
pub const KEY_Armenian_full_stop: Keysym =            Keysym(0x1000589u32);
/// U+0589 ARMENIAN FULL STOP
pub const KEY_Armenian_verjaket: Keysym =             Keysym(0x1000589u32);
/// U+055D ARMENIAN COMMA
pub const KEY_Armenian_separation_mark: Keysym =      Keysym(0x100055du32);
/// U+055D ARMENIAN COMMA
pub const KEY_Armenian_but: Keysym =                  Keysym(0x100055du32);
/// U+058A ARMENIAN HYPHEN
pub const KEY_Armenian_hyphen: Keysym =               Keysym(0x100058au32);
/// U+058A ARMENIAN HYPHEN
pub const KEY_Armenian_yentamna: Keysym =             Keysym(0x100058au32);
/// U+055C ARMENIAN EXCLAMATION MARK
pub const KEY_Armenian_exclam: Keysym =               Keysym(0x100055cu32);
/// U+055C ARMENIAN EXCLAMATION MARK
pub const KEY_Armenian_amanak: Keysym =               Keysym(0x100055cu32);
/// U+055B ARMENIAN EMPHASIS MARK
pub const KEY_Armenian_accent: Keysym =               Keysym(0x100055bu32);
/// U+055B ARMENIAN EMPHASIS MARK
pub const KEY_Armenian_shesht: Keysym =               Keysym(0x100055bu32);
/// U+055E ARMENIAN QUESTION MARK
pub const KEY_Armenian_question: Keysym =             Keysym(0x100055eu32);
/// U+055E ARMENIAN QUESTION MARK
pub const KEY_Armenian_paruyk: Keysym =               Keysym(0x100055eu32);
/// U+0531 ARMENIAN CAPITAL LETTER AYB
pub const KEY_Armenian_AYB: Keysym =                  Keysym(0x1000531u32);
/// U+0561 ARMENIAN SMALL LETTER AYB
pub const KEY_Armenian_ayb: Keysym =                  Keysym(0x1000561u32);
/// U+0532 ARMENIAN CAPITAL LETTER BEN
pub const KEY_Armenian_BEN: Keysym =                  Keysym(0x1000532u32);
/// U+0562 ARMENIAN SMALL LETTER BEN
pub const KEY_Armenian_ben: Keysym =                  Keysym(0x1000562u32);
/// U+0533 ARMENIAN CAPITAL LETTER GIM
pub const KEY_Armenian_GIM: Keysym =                  Keysym(0x1000533u32);
/// U+0563 ARMENIAN SMALL LETTER GIM
pub const KEY_Armenian_gim: Keysym =                  Keysym(0x1000563u32);
/// U+0534 ARMENIAN CAPITAL LETTER DA
pub const KEY_Armenian_DA: Keysym =                   Keysym(0x1000534u32);
/// U+0564 ARMENIAN SMALL LETTER DA
pub const KEY_Armenian_da: Keysym =                   Keysym(0x1000564u32);
/// U+0535 ARMENIAN CAPITAL LETTER ECH
pub const KEY_Armenian_YECH: Keysym =                 Keysym(0x1000535u32);
/// U+0565 ARMENIAN SMALL LETTER ECH
pub const KEY_Armenian_yech: Keysym =                 Keysym(0x1000565u32);
/// U+0536 ARMENIAN CAPITAL LETTER ZA
pub const KEY_Armenian_ZA: Keysym =                   Keysym(0x1000536u32);
/// U+0566 ARMENIAN SMALL LETTER ZA
pub const KEY_Armenian_za: Keysym =                   Keysym(0x1000566u32);
/// U+0537 ARMENIAN CAPITAL LETTER EH
pub const KEY_Armenian_E: Keysym =                    Keysym(0x1000537u32);
/// U+0567 ARMENIAN SMALL LETTER EH
pub const KEY_Armenian_e: Keysym =                    Keysym(0x1000567u32);
/// U+0538 ARMENIAN CAPITAL LETTER ET
pub const KEY_Armenian_AT: Keysym =                   Keysym(0x1000538u32);
/// U+0568 ARMENIAN SMALL LETTER ET
pub const KEY_Armenian_at: Keysym =                   Keysym(0x1000568u32);
/// U+0539 ARMENIAN CAPITAL LETTER TO
pub const KEY_Armenian_TO: Keysym =                   Keysym(0x1000539u32);
/// U+0569 ARMENIAN SMALL LETTER TO
pub const KEY_Armenian_to: Keysym =                   Keysym(0x1000569u32);
/// U+053A ARMENIAN CAPITAL LETTER ZHE
pub const KEY_Armenian_ZHE: Keysym =                  Keysym(0x100053au32);
/// U+056A ARMENIAN SMALL LETTER ZHE
pub const KEY_Armenian_zhe: Keysym =                  Keysym(0x100056au32);
/// U+053B ARMENIAN CAPITAL LETTER INI
pub const KEY_Armenian_INI: Keysym =                  Keysym(0x100053bu32);
/// U+056B ARMENIAN SMALL LETTER INI
pub const KEY_Armenian_ini: Keysym =                  Keysym(0x100056bu32);
/// U+053C ARMENIAN CAPITAL LETTER LIWN
pub const KEY_Armenian_LYUN: Keysym =                 Keysym(0x100053cu32);
/// U+056C ARMENIAN SMALL LETTER LIWN
pub const KEY_Armenian_lyun: Keysym =                 Keysym(0x100056cu32);
/// U+053D ARMENIAN CAPITAL LETTER XEH
pub const KEY_Armenian_KHE: Keysym =                  Keysym(0x100053du32);
/// U+056D ARMENIAN SMALL LETTER XEH
pub const KEY_Armenian_khe: Keysym =                  Keysym(0x100056du32);
/// U+053E ARMENIAN CAPITAL LETTER CA
pub const KEY_Armenian_TSA: Keysym =                  Keysym(0x100053eu32);
/// U+056E ARMENIAN SMALL LETTER CA
pub const KEY_Armenian_tsa: Keysym =                  Keysym(0x100056eu32);
/// U+053F ARMENIAN CAPITAL LETTER KEN
pub const KEY_Armenian_KEN: Keysym =                  Keysym(0x100053fu32);
/// U+056F ARMENIAN SMALL LETTER KEN
pub const KEY_Armenian_ken: Keysym =                  Keysym(0x100056fu32);
/// U+0540 ARMENIAN CAPITAL LETTER HO
pub const KEY_Armenian_HO: Keysym =                   Keysym(0x1000540u32);
/// U+0570 ARMENIAN SMALL LETTER HO
pub const KEY_Armenian_ho: Keysym =                   Keysym(0x1000570u32);
/// U+0541 ARMENIAN CAPITAL LETTER JA
pub const KEY_Armenian_DZA: Keysym =                  Keysym(0x1000541u32);
/// U+0571 ARMENIAN SMALL LETTER JA
pub const KEY_Armenian_dza: Keysym =                  Keysym(0x1000571u32);
/// U+0542 ARMENIAN CAPITAL LETTER GHAD
pub const KEY_Armenian_GHAT: Keysym =                 Keysym(0x1000542u32);
/// U+0572 ARMENIAN SMALL LETTER GHAD
pub const KEY_Armenian_ghat: Keysym =                 Keysym(0x1000572u32);
/// U+0543 ARMENIAN CAPITAL LETTER CHEH
pub const KEY_Armenian_TCHE: Keysym =                 Keysym(0x1000543u32);
/// U+0573 ARMENIAN SMALL LETTER CHEH
pub const KEY_Armenian_tche: Keysym =                 Keysym(0x1000573u32);
/// U+0544 ARMENIAN CAPITAL LETTER MEN
pub const KEY_Armenian_MEN: Keysym =                  Keysym(0x1000544u32);
/// U+0574 ARMENIAN SMALL LETTER MEN
pub const KEY_Armenian_men: Keysym =                  Keysym(0x1000574u32);
/// U+0545 ARMENIAN CAPITAL LETTER YI
pub const KEY_Armenian_HI: Keysym =                   Keysym(0x1000545u32);
/// U+0575 ARMENIAN SMALL LETTER YI
pub const KEY_Armenian_hi: Keysym =                   Keysym(0x1000575u32);
/// U+0546 ARMENIAN CAPITAL LETTER NOW
pub const KEY_Armenian_NU: Keysym =                   Keysym(0x1000546u32);
/// U+0576 ARMENIAN SMALL LETTER NOW
pub const KEY_Armenian_nu: Keysym =                   Keysym(0x1000576u32);
/// U+0547 ARMENIAN CAPITAL LETTER SHA
pub const KEY_Armenian_SHA: Keysym =                  Keysym(0x1000547u32);
/// U+0577 ARMENIAN SMALL LETTER SHA
pub const KEY_Armenian_sha: Keysym =                  Keysym(0x1000577u32);
/// U+0548 ARMENIAN CAPITAL LETTER VO
pub const KEY_Armenian_VO: Keysym =                   Keysym(0x1000548u32);
/// U+0578 ARMENIAN SMALL LETTER VO
pub const KEY_Armenian_vo: Keysym =                   Keysym(0x1000578u32);
/// U+0549 ARMENIAN CAPITAL LETTER CHA
pub const KEY_Armenian_CHA: Keysym =                  Keysym(0x1000549u32);
/// U+0579 ARMENIAN SMALL LETTER CHA
pub const KEY_Armenian_cha: Keysym =                  Keysym(0x1000579u32);
/// U+054A ARMENIAN CAPITAL LETTER PEH
pub const KEY_Armenian_PE: Keysym =                   Keysym(0x100054au32);
/// U+057A ARMENIAN SMALL LETTER PEH
pub const KEY_Armenian_pe: Keysym =                   Keysym(0x100057au32);
/// U+054B ARMENIAN CAPITAL LETTER JHEH
pub const KEY_Armenian_JE: Keysym =                   Keysym(0x100054bu32);
/// U+057B ARMENIAN SMALL LETTER JHEH
pub const KEY_Armenian_je: Keysym =                   Keysym(0x100057bu32);
/// U+054C ARMENIAN CAPITAL LETTER RA
pub const KEY_Armenian_RA: Keysym =                   Keysym(0x100054cu32);
/// U+057C ARMENIAN SMALL LETTER RA
pub const KEY_Armenian_ra: Keysym =                   Keysym(0x100057cu32);
/// U+054D ARMENIAN CAPITAL LETTER SEH
pub const KEY_Armenian_SE: Keysym =                   Keysym(0x100054du32);
/// U+057D ARMENIAN SMALL LETTER SEH
pub const KEY_Armenian_se: Keysym =                   Keysym(0x100057du32);
/// U+054E ARMENIAN CAPITAL LETTER VEW
pub const KEY_Armenian_VEV: Keysym =                  Keysym(0x100054eu32);
/// U+057E ARMENIAN SMALL LETTER VEW
pub const KEY_Armenian_vev: Keysym =                  Keysym(0x100057eu32);
/// U+054F ARMENIAN CAPITAL LETTER TIWN
pub const KEY_Armenian_TYUN: Keysym =                 Keysym(0x100054fu32);
/// U+057F ARMENIAN SMALL LETTER TIWN
pub const KEY_Armenian_tyun: Keysym =                 Keysym(0x100057fu32);
/// U+0550 ARMENIAN CAPITAL LETTER REH
pub const KEY_Armenian_RE: Keysym =                   Keysym(0x1000550u32);
/// U+0580 ARMENIAN SMALL LETTER REH
pub const KEY_Armenian_re: Keysym =                   Keysym(0x1000580u32);
/// U+0551 ARMENIAN CAPITAL LETTER CO
pub const KEY_Armenian_TSO: Keysym =                  Keysym(0x1000551u32);
/// U+0581 ARMENIAN SMALL LETTER CO
pub const KEY_Armenian_tso: Keysym =                  Keysym(0x1000581u32);
/// U+0552 ARMENIAN CAPITAL LETTER YIWN
pub const KEY_Armenian_VYUN: Keysym =                 Keysym(0x1000552u32);
/// U+0582 ARMENIAN SMALL LETTER YIWN
pub const KEY_Armenian_vyun: Keysym =                 Keysym(0x1000582u32);
/// U+0553 ARMENIAN CAPITAL LETTER PIWR
pub const KEY_Armenian_PYUR: Keysym =                 Keysym(0x1000553u32);
/// U+0583 ARMENIAN SMALL LETTER PIWR
pub const KEY_Armenian_pyur: Keysym =                 Keysym(0x1000583u32);
/// U+0554 ARMENIAN CAPITAL LETTER KEH
pub const KEY_Armenian_KE: Keysym =                   Keysym(0x1000554u32);
/// U+0584 ARMENIAN SMALL LETTER KEH
pub const KEY_Armenian_ke: Keysym =                   Keysym(0x1000584u32);
/// U+0555 ARMENIAN CAPITAL LETTER OH
pub const KEY_Armenian_O: Keysym =                    Keysym(0x1000555u32);
/// U+0585 ARMENIAN SMALL LETTER OH
pub const KEY_Armenian_o: Keysym =                    Keysym(0x1000585u32);
/// U+0556 ARMENIAN CAPITAL LETTER FEH
pub const KEY_Armenian_FE: Keysym =                   Keysym(0x1000556u32);
/// U+0586 ARMENIAN SMALL LETTER FEH
pub const KEY_Armenian_fe: Keysym =                   Keysym(0x1000586u32);
/// U+055A ARMENIAN APOSTROPHE
pub const KEY_Armenian_apostrophe: Keysym =           Keysym(0x100055au32);

/*
 * Georgian
 */

/// U+10D0 GEORGIAN LETTER AN
pub const KEY_Georgian_an: Keysym =                   Keysym(0x10010d0u32);
/// U+10D1 GEORGIAN LETTER BAN
pub const KEY_Georgian_ban: Keysym =                  Keysym(0x10010d1u32);
/// U+10D2 GEORGIAN LETTER GAN
pub const KEY_Georgian_gan: Keysym =                  Keysym(0x10010d2u32);
/// U+10D3 GEORGIAN LETTER DON
pub const KEY_Georgian_don: Keysym =                  Keysym(0x10010d3u32);
/// U+10D4 GEORGIAN LETTER EN
pub const KEY_Georgian_en: Keysym =                   Keysym(0x10010d4u32);
/// U+10D5 GEORGIAN LETTER VIN
pub const KEY_Georgian_vin: Keysym =                  Keysym(0x10010d5u32);
/// U+10D6 GEORGIAN LETTER ZEN
pub const KEY_Georgian_zen: Keysym =                  Keysym(0x10010d6u32);
/// U+10D7 GEORGIAN LETTER TAN
pub const KEY_Georgian_tan: Keysym =                  Keysym(0x10010d7u32);
/// U+10D8 GEORGIAN LETTER IN
pub const KEY_Georgian_in: Keysym =                   Keysym(0x10010d8u32);
/// U+10D9 GEORGIAN LETTER KAN
pub const KEY_Georgian_kan: Keysym =                  Keysym(0x10010d9u32);
/// U+10DA GEORGIAN LETTER LAS
pub const KEY_Georgian_las: Keysym =                  Keysym(0x10010dau32);
/// U+10DB GEORGIAN LETTER MAN
pub const KEY_Georgian_man: Keysym =                  Keysym(0x10010dbu32);
/// U+10DC GEORGIAN LETTER NAR
pub const KEY_Georgian_nar: Keysym =                  Keysym(0x10010dcu32);
/// U+10DD GEORGIAN LETTER ON
pub const KEY_Georgian_on: Keysym =                   Keysym(0x10010ddu32);
/// U+10DE GEORGIAN LETTER PAR
pub const KEY_Georgian_par: Keysym =                  Keysym(0x10010deu32);
/// U+10DF GEORGIAN LETTER ZHAR
pub const KEY_Georgian_zhar: Keysym =                 Keysym(0x10010dfu32);
/// U+10E0 GEORGIAN LETTER RAE
pub const KEY_Georgian_rae: Keysym =                  Keysym(0x10010e0u32);
/// U+10E1 GEORGIAN LETTER SAN
pub const KEY_Georgian_san: Keysym =                  Keysym(0x10010e1u32);
/// U+10E2 GEORGIAN LETTER TAR
pub const KEY_Georgian_tar: Keysym =                  Keysym(0x10010e2u32);
/// U+10E3 GEORGIAN LETTER UN
pub const KEY_Georgian_un: Keysym =                   Keysym(0x10010e3u32);
/// U+10E4 GEORGIAN LETTER PHAR
pub const KEY_Georgian_phar: Keysym =                 Keysym(0x10010e4u32);
/// U+10E5 GEORGIAN LETTER KHAR
pub const KEY_Georgian_khar: Keysym =                 Keysym(0x10010e5u32);
/// U+10E6 GEORGIAN LETTER GHAN
pub const KEY_Georgian_ghan: Keysym =                 Keysym(0x10010e6u32);
/// U+10E7 GEORGIAN LETTER QAR
pub const KEY_Georgian_qar: Keysym =                  Keysym(0x10010e7u32);
/// U+10E8 GEORGIAN LETTER SHIN
pub const KEY_Georgian_shin: Keysym =                 Keysym(0x10010e8u32);
/// U+10E9 GEORGIAN LETTER CHIN
pub const KEY_Georgian_chin: Keysym =                 Keysym(0x10010e9u32);
/// U+10EA GEORGIAN LETTER CAN
pub const KEY_Georgian_can: Keysym =                  Keysym(0x10010eau32);
/// U+10EB GEORGIAN LETTER JIL
pub const KEY_Georgian_jil: Keysym =                  Keysym(0x10010ebu32);
/// U+10EC GEORGIAN LETTER CIL
pub const KEY_Georgian_cil: Keysym =                  Keysym(0x10010ecu32);
/// U+10ED GEORGIAN LETTER CHAR
pub const KEY_Georgian_char: Keysym =                 Keysym(0x10010edu32);
/// U+10EE GEORGIAN LETTER XAN
pub const KEY_Georgian_xan: Keysym =                  Keysym(0x10010eeu32);
/// U+10EF GEORGIAN LETTER JHAN
pub const KEY_Georgian_jhan: Keysym =                 Keysym(0x10010efu32);
/// U+10F0 GEORGIAN LETTER HAE
pub const KEY_Georgian_hae: Keysym =                  Keysym(0x10010f0u32);
/// U+10F1 GEORGIAN LETTER HE
pub const KEY_Georgian_he: Keysym =                   Keysym(0x10010f1u32);
/// U+10F2 GEORGIAN LETTER HIE
pub const KEY_Georgian_hie: Keysym =                  Keysym(0x10010f2u32);
/// U+10F3 GEORGIAN LETTER WE
pub const KEY_Georgian_we: Keysym =                   Keysym(0x10010f3u32);
/// U+10F4 GEORGIAN LETTER HAR
pub const KEY_Georgian_har: Keysym =                  Keysym(0x10010f4u32);
/// U+10F5 GEORGIAN LETTER HOE
pub const KEY_Georgian_hoe: Keysym =                  Keysym(0x10010f5u32);
/// U+10F6 GEORGIAN LETTER FI
pub const KEY_Georgian_fi: Keysym =                   Keysym(0x10010f6u32);

/*
 * Azeri (and other Turkic or Caucasian languages)
 */

/* latin */
/// U+1E8A LATIN CAPITAL LETTER X WITH DOT ABOVE
pub const KEY_Xabovedot: Keysym =                     Keysym(0x1001e8au32);
/// U+012C LATIN CAPITAL LETTER I WITH BREVE
pub const KEY_Ibreve: Keysym =                        Keysym(0x100012cu32);
/// U+01B5 LATIN CAPITAL LETTER Z WITH STROKE
pub const KEY_Zstroke: Keysym =                       Keysym(0x10001b5u32);
/// U+01E6 LATIN CAPITAL LETTER G WITH CARON
pub const KEY_Gcaron: Keysym =                        Keysym(0x10001e6u32);
/// U+01D2 LATIN CAPITAL LETTER O WITH CARON
pub const KEY_Ocaron: Keysym =                        Keysym(0x10001d1u32);
/// U+019F LATIN CAPITAL LETTER O WITH MIDDLE TILDE
pub const KEY_Obarred: Keysym =                       Keysym(0x100019fu32);
/// U+1E8B LATIN SMALL LETTER X WITH DOT ABOVE
pub const KEY_xabovedot: Keysym =                     Keysym(0x1001e8bu32);
/// U+012D LATIN SMALL LETTER I WITH BREVE
pub const KEY_ibreve: Keysym =                        Keysym(0x100012du32);
/// U+01B6 LATIN SMALL LETTER Z WITH STROKE
pub const KEY_zstroke: Keysym =                       Keysym(0x10001b6u32);
/// U+01E7 LATIN SMALL LETTER G WITH CARON
pub const KEY_gcaron: Keysym =                        Keysym(0x10001e7u32);
/// U+01D2 LATIN SMALL LETTER O WITH CARON
pub const KEY_ocaron: Keysym =                        Keysym(0x10001d2u32);
/// U+0275 LATIN SMALL LETTER BARRED O
pub const KEY_obarred: Keysym =                       Keysym(0x1000275u32);
/// U+018F LATIN CAPITAL LETTER SCHWA
pub const KEY_SCHWA: Keysym =                         Keysym(0x100018fu32);
/// U+0259 LATIN SMALL LETTER SCHWA
pub const KEY_schwa: Keysym =                         Keysym(0x1000259u32);
/// U+01B7 LATIN CAPITAL LETTER EZH
pub const KEY_EZH: Keysym =                           Keysym(0x10001b7u32);
/// U+0292 LATIN SMALL LETTER EZH
pub const KEY_ezh: Keysym =                           Keysym(0x1000292u32);
/* those are not really Caucasus */
/* For Inupiak */
/// U+1E36 LATIN CAPITAL LETTER L WITH DOT BELOW
pub const KEY_Lbelowdot: Keysym =                     Keysym(0x1001e36u32);
/// U+1E37 LATIN SMALL LETTER L WITH DOT BELOW
pub const KEY_lbelowdot: Keysym =                     Keysym(0x1001e37u32);

/*
 * Vietnamese
 */
 
/// U+1EA0 LATIN CAPITAL LETTER A WITH DOT BELOW
pub const KEY_Abelowdot: Keysym =                     Keysym(0x1001ea0u32);
/// U+1EA1 LATIN SMALL LETTER A WITH DOT BELOW
pub const KEY_abelowdot: Keysym =                     Keysym(0x1001ea1u32);
/// U+1EA2 LATIN CAPITAL LETTER A WITH HOOK ABOVE
pub const KEY_Ahook: Keysym =                         Keysym(0x1001ea2u32);
/// U+1EA3 LATIN SMALL LETTER A WITH HOOK ABOVE
pub const KEY_ahook: Keysym =                         Keysym(0x1001ea3u32);
/// U+1EA4 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE
pub const KEY_Acircumflexacute: Keysym =              Keysym(0x1001ea4u32);
/// U+1EA5 LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE
pub const KEY_acircumflexacute: Keysym =              Keysym(0x1001ea5u32);
/// U+1EA6 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE
pub const KEY_Acircumflexgrave: Keysym =              Keysym(0x1001ea6u32);
/// U+1EA7 LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE
pub const KEY_acircumflexgrave: Keysym =              Keysym(0x1001ea7u32);
/// U+1EA8 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE
pub const KEY_Acircumflexhook: Keysym =               Keysym(0x1001ea8u32);
/// U+1EA9 LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE
pub const KEY_acircumflexhook: Keysym =               Keysym(0x1001ea9u32);
/// U+1EAA LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE
pub const KEY_Acircumflextilde: Keysym =              Keysym(0x1001eaau32);
/// U+1EAB LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE
pub const KEY_acircumflextilde: Keysym =              Keysym(0x1001eabu32);
/// U+1EAC LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW
pub const KEY_Acircumflexbelowdot: Keysym =           Keysym(0x1001eacu32);
/// U+1EAD LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW
pub const KEY_acircumflexbelowdot: Keysym =           Keysym(0x1001eadu32);
/// U+1EAE LATIN CAPITAL LETTER A WITH BREVE AND ACUTE
pub const KEY_Abreveacute: Keysym =                   Keysym(0x1001eaeu32);
/// U+1EAF LATIN SMALL LETTER A WITH BREVE AND ACUTE
pub const KEY_abreveacute: Keysym =                   Keysym(0x1001eafu32);
/// U+1EB0 LATIN CAPITAL LETTER A WITH BREVE AND GRAVE
pub const KEY_Abrevegrave: Keysym =                   Keysym(0x1001eb0u32);
/// U+1EB1 LATIN SMALL LETTER A WITH BREVE AND GRAVE
pub const KEY_abrevegrave: Keysym =                   Keysym(0x1001eb1u32);
/// U+1EB2 LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE
pub const KEY_Abrevehook: Keysym =                    Keysym(0x1001eb2u32);
/// U+1EB3 LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE
pub const KEY_abrevehook: Keysym =                    Keysym(0x1001eb3u32);
/// U+1EB4 LATIN CAPITAL LETTER A WITH BREVE AND TILDE
pub const KEY_Abrevetilde: Keysym =                   Keysym(0x1001eb4u32);
/// U+1EB5 LATIN SMALL LETTER A WITH BREVE AND TILDE
pub const KEY_abrevetilde: Keysym =                   Keysym(0x1001eb5u32);
/// U+1EB6 LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW
pub const KEY_Abrevebelowdot: Keysym =                Keysym(0x1001eb6u32);
/// U+1EB7 LATIN SMALL LETTER A WITH BREVE AND DOT BELOW
pub const KEY_abrevebelowdot: Keysym =                Keysym(0x1001eb7u32);
/// U+1EB8 LATIN CAPITAL LETTER E WITH DOT BELOW
pub const KEY_Ebelowdot: Keysym =                     Keysym(0x1001eb8u32);
/// U+1EB9 LATIN SMALL LETTER E WITH DOT BELOW
pub const KEY_ebelowdot: Keysym =                     Keysym(0x1001eb9u32);
/// U+1EBA LATIN CAPITAL LETTER E WITH HOOK ABOVE
pub const KEY_Ehook: Keysym =                         Keysym(0x1001ebau32);
/// U+1EBB LATIN SMALL LETTER E WITH HOOK ABOVE
pub const KEY_ehook: Keysym =                         Keysym(0x1001ebbu32);
/// U+1EBC LATIN CAPITAL LETTER E WITH TILDE
pub const KEY_Etilde: Keysym =                        Keysym(0x1001ebcu32);
/// U+1EBD LATIN SMALL LETTER E WITH TILDE
pub const KEY_etilde: Keysym =                        Keysym(0x1001ebdu32);
/// U+1EBE LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE
pub const KEY_Ecircumflexacute: Keysym =              Keysym(0x1001ebeu32);
/// U+1EBF LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE
pub const KEY_ecircumflexacute: Keysym =              Keysym(0x1001ebfu32);
/// U+1EC0 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE
pub const KEY_Ecircumflexgrave: Keysym =              Keysym(0x1001ec0u32);
/// U+1EC1 LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE
pub const KEY_ecircumflexgrave: Keysym =              Keysym(0x1001ec1u32);
/// U+1EC2 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE
pub const KEY_Ecircumflexhook: Keysym =               Keysym(0x1001ec2u32);
/// U+1EC3 LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE
pub const KEY_ecircumflexhook: Keysym =               Keysym(0x1001ec3u32);
/// U+1EC4 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE
pub const KEY_Ecircumflextilde: Keysym =              Keysym(0x1001ec4u32);
/// U+1EC5 LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE
pub const KEY_ecircumflextilde: Keysym =              Keysym(0x1001ec5u32);
/// U+1EC6 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW
pub const KEY_Ecircumflexbelowdot: Keysym =           Keysym(0x1001ec6u32);
/// U+1EC7 LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW
pub const KEY_ecircumflexbelowdot: Keysym =           Keysym(0x1001ec7u32);
/// U+1EC8 LATIN CAPITAL LETTER I WITH HOOK ABOVE
pub const KEY_Ihook: Keysym =                         Keysym(0x1001ec8u32);
/// U+1EC9 LATIN SMALL LETTER I WITH HOOK ABOVE
pub const KEY_ihook: Keysym =                         Keysym(0x1001ec9u32);
/// U+1ECA LATIN CAPITAL LETTER I WITH DOT BELOW
pub const KEY_Ibelowdot: Keysym =                     Keysym(0x1001ecau32);
/// U+1ECB LATIN SMALL LETTER I WITH DOT BELOW
pub const KEY_ibelowdot: Keysym =                     Keysym(0x1001ecbu32);
/// U+1ECC LATIN CAPITAL LETTER O WITH DOT BELOW
pub const KEY_Obelowdot: Keysym =                     Keysym(0x1001eccu32);
/// U+1ECD LATIN SMALL LETTER O WITH DOT BELOW
pub const KEY_obelowdot: Keysym =                     Keysym(0x1001ecdu32);
/// U+1ECE LATIN CAPITAL LETTER O WITH HOOK ABOVE
pub const KEY_Ohook: Keysym =                         Keysym(0x1001eceu32);
/// U+1ECF LATIN SMALL LETTER O WITH HOOK ABOVE
pub const KEY_ohook: Keysym =                         Keysym(0x1001ecfu32);
/// U+1ED0 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE
pub const KEY_Ocircumflexacute: Keysym =              Keysym(0x1001ed0u32);
/// U+1ED1 LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE
pub const KEY_ocircumflexacute: Keysym =              Keysym(0x1001ed1u32);
/// U+1ED2 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE
pub const KEY_Ocircumflexgrave: Keysym =              Keysym(0x1001ed2u32);
/// U+1ED3 LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE
pub const KEY_ocircumflexgrave: Keysym =              Keysym(0x1001ed3u32);
/// U+1ED4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE
pub const KEY_Ocircumflexhook: Keysym =               Keysym(0x1001ed4u32);
/// U+1ED5 LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE
pub const KEY_ocircumflexhook: Keysym =               Keysym(0x1001ed5u32);
/// U+1ED6 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE
pub const KEY_Ocircumflextilde: Keysym =              Keysym(0x1001ed6u32);
/// U+1ED7 LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE
pub const KEY_ocircumflextilde: Keysym =              Keysym(0x1001ed7u32);
/// U+1ED8 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW
pub const KEY_Ocircumflexbelowdot: Keysym =           Keysym(0x1001ed8u32);
/// U+1ED9 LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW
pub const KEY_ocircumflexbelowdot: Keysym =           Keysym(0x1001ed9u32);
/// U+1EDA LATIN CAPITAL LETTER O WITH HORN AND ACUTE
pub const KEY_Ohornacute: Keysym =                    Keysym(0x1001edau32);
/// U+1EDB LATIN SMALL LETTER O WITH HORN AND ACUTE
pub const KEY_ohornacute: Keysym =                    Keysym(0x1001edbu32);
/// U+1EDC LATIN CAPITAL LETTER O WITH HORN AND GRAVE
pub const KEY_Ohorngrave: Keysym =                    Keysym(0x1001edcu32);
/// U+1EDD LATIN SMALL LETTER O WITH HORN AND GRAVE
pub const KEY_ohorngrave: Keysym =                    Keysym(0x1001eddu32);
/// U+1EDE LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE
pub const KEY_Ohornhook: Keysym =                     Keysym(0x1001edeu32);
/// U+1EDF LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE
pub const KEY_ohornhook: Keysym =                     Keysym(0x1001edfu32);
/// U+1EE0 LATIN CAPITAL LETTER O WITH HORN AND TILDE
pub const KEY_Ohorntilde: Keysym =                    Keysym(0x1001ee0u32);
/// U+1EE1 LATIN SMALL LETTER O WITH HORN AND TILDE
pub const KEY_ohorntilde: Keysym =                    Keysym(0x1001ee1u32);
/// U+1EE2 LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW
pub const KEY_Ohornbelowdot: Keysym =                 Keysym(0x1001ee2u32);
/// U+1EE3 LATIN SMALL LETTER O WITH HORN AND DOT BELOW
pub const KEY_ohornbelowdot: Keysym =                 Keysym(0x1001ee3u32);
/// U+1EE4 LATIN CAPITAL LETTER U WITH DOT BELOW
pub const KEY_Ubelowdot: Keysym =                     Keysym(0x1001ee4u32);
/// U+1EE5 LATIN SMALL LETTER U WITH DOT BELOW
pub const KEY_ubelowdot: Keysym =                     Keysym(0x1001ee5u32);
/// U+1EE6 LATIN CAPITAL LETTER U WITH HOOK ABOVE
pub const KEY_Uhook: Keysym =                         Keysym(0x1001ee6u32);
/// U+1EE7 LATIN SMALL LETTER U WITH HOOK ABOVE
pub const KEY_uhook: Keysym =                         Keysym(0x1001ee7u32);
/// U+1EE8 LATIN CAPITAL LETTER U WITH HORN AND ACUTE
pub const KEY_Uhornacute: Keysym =                    Keysym(0x1001ee8u32);
/// U+1EE9 LATIN SMALL LETTER U WITH HORN AND ACUTE
pub const KEY_uhornacute: Keysym =                    Keysym(0x1001ee9u32);
/// U+1EEA LATIN CAPITAL LETTER U WITH HORN AND GRAVE
pub const KEY_Uhorngrave: Keysym =                    Keysym(0x1001eeau32);
/// U+1EEB LATIN SMALL LETTER U WITH HORN AND GRAVE
pub const KEY_uhorngrave: Keysym =                    Keysym(0x1001eebu32);
/// U+1EEC LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE
pub const KEY_Uhornhook: Keysym =                     Keysym(0x1001eecu32);
/// U+1EED LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE
pub const KEY_uhornhook: Keysym =                     Keysym(0x1001eedu32);
/// U+1EEE LATIN CAPITAL LETTER U WITH HORN AND TILDE
pub const KEY_Uhorntilde: Keysym =                    Keysym(0x1001eeeu32);
/// U+1EEF LATIN SMALL LETTER U WITH HORN AND TILDE
pub const KEY_uhorntilde: Keysym =                    Keysym(0x1001eefu32);
/// U+1EF0 LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW
pub const KEY_Uhornbelowdot: Keysym =                 Keysym(0x1001ef0u32);
/// U+1EF1 LATIN SMALL LETTER U WITH HORN AND DOT BELOW
pub const KEY_uhornbelowdot: Keysym =                 Keysym(0x1001ef1u32);
/// U+1EF4 LATIN CAPITAL LETTER Y WITH DOT BELOW
pub const KEY_Ybelowdot: Keysym =                     Keysym(0x1001ef4u32);
/// U+1EF5 LATIN SMALL LETTER Y WITH DOT BELOW
pub const KEY_ybelowdot: Keysym =                     Keysym(0x1001ef5u32);
/// U+1EF6 LATIN CAPITAL LETTER Y WITH HOOK ABOVE
pub const KEY_Yhook: Keysym =                         Keysym(0x1001ef6u32);
/// U+1EF7 LATIN SMALL LETTER Y WITH HOOK ABOVE
pub const KEY_yhook: Keysym =                         Keysym(0x1001ef7u32);
/// U+1EF8 LATIN CAPITAL LETTER Y WITH TILDE
pub const KEY_Ytilde: Keysym =                        Keysym(0x1001ef8u32);
/// U+1EF9 LATIN SMALL LETTER Y WITH TILDE
pub const KEY_ytilde: Keysym =                        Keysym(0x1001ef9u32);
/// U+01A0 LATIN CAPITAL LETTER O WITH HORN
pub const KEY_Ohorn: Keysym =                         Keysym(0x10001a0u32);
/// U+01A1 LATIN SMALL LETTER O WITH HORN
pub const KEY_ohorn: Keysym =                         Keysym(0x10001a1u32);
/// U+01AF LATIN CAPITAL LETTER U WITH HORN
pub const KEY_Uhorn: Keysym =                         Keysym(0x10001afu32);
/// U+01B0 LATIN SMALL LETTER U WITH HORN
pub const KEY_uhorn: Keysym =                         Keysym(0x10001b0u32);


pub const KEY_EcuSign: Keysym =                       Keysym(0x10020a0u32);
/// U+20A1 COLON SIGN
pub const KEY_ColonSign: Keysym =                     Keysym(0x10020a1u32);
/// U+20A2 CRUZEIRO SIGN
pub const KEY_CruzeiroSign: Keysym =                  Keysym(0x10020a2u32);
/// U+20A3 FRENCH FRANC SIGN
pub const KEY_FFrancSign: Keysym =                    Keysym(0x10020a3u32);
/// U+20A4 LIRA SIGN
pub const KEY_LiraSign: Keysym =                      Keysym(0x10020a4u32);
/// U+20A5 MILL SIGN
pub const KEY_MillSign: Keysym =                      Keysym(0x10020a5u32);
/// U+20A6 NAIRA SIGN
pub const KEY_NairaSign: Keysym =                     Keysym(0x10020a6u32);
/// U+20A7 PESETA SIGN
pub const KEY_PesetaSign: Keysym =                    Keysym(0x10020a7u32);
/// U+20A8 RUPEE SIGN
pub const KEY_RupeeSign: Keysym =                     Keysym(0x10020a8u32);
/// U+20A9 WON SIGN
pub const KEY_WonSign: Keysym =                       Keysym(0x10020a9u32);
/// U+20AA NEW SHEQEL SIGN
pub const KEY_NewSheqelSign: Keysym =                 Keysym(0x10020aau32);
/// U+20AB DONG SIGN
pub const KEY_DongSign: Keysym =                      Keysym(0x10020abu32);
/// U+20AC EURO SIGN
pub const KEY_EuroSign: Keysym =                      Keysym(0x20acu32);

/* one, two and three are defined above. */
/// U+2070 SUPERSCRIPT ZERO
pub const KEY_zerosuperior: Keysym =                  Keysym(0x1002070u32);
/// U+2074 SUPERSCRIPT FOUR
pub const KEY_foursuperior: Keysym =                  Keysym(0x1002074u32);
/// U+2075 SUPERSCRIPT FIVE
pub const KEY_fivesuperior: Keysym =                  Keysym(0x1002075u32);
/// U+2076 SUPERSCRIPT SIX
pub const KEY_sixsuperior: Keysym =                   Keysym(0x1002076u32);
/// U+2077 SUPERSCRIPT SEVEN
pub const KEY_sevensuperior: Keysym =                 Keysym(0x1002077u32);
/// U+2078 SUPERSCRIPT EIGHT
pub const KEY_eightsuperior: Keysym =                 Keysym(0x1002078u32);
/// U+2079 SUPERSCRIPT NINE
pub const KEY_ninesuperior: Keysym =                  Keysym(0x1002079u32);
/// U+2080 SUBSCRIPT ZERO
pub const KEY_zerosubscript: Keysym =                 Keysym(0x1002080u32);
/// U+2081 SUBSCRIPT ONE
pub const KEY_onesubscript: Keysym =                  Keysym(0x1002081u32);
/// U+2082 SUBSCRIPT TWO
pub const KEY_twosubscript: Keysym =                  Keysym(0x1002082u32);
/// U+2083 SUBSCRIPT THREE
pub const KEY_threesubscript: Keysym =                Keysym(0x1002083u32);
/// U+2084 SUBSCRIPT FOUR
pub const KEY_foursubscript: Keysym =                 Keysym(0x1002084u32);
/// U+2085 SUBSCRIPT FIVE
pub const KEY_fivesubscript: Keysym =                 Keysym(0x1002085u32);
/// U+2086 SUBSCRIPT SIX
pub const KEY_sixsubscript: Keysym =                  Keysym(0x1002086u32);
/// U+2087 SUBSCRIPT SEVEN
pub const KEY_sevensubscript: Keysym =                Keysym(0x1002087u32);
/// U+2088 SUBSCRIPT EIGHT
pub const KEY_eightsubscript: Keysym =                Keysym(0x1002088u32);
/// U+2089 SUBSCRIPT NINE
pub const KEY_ninesubscript: Keysym =                 Keysym(0x1002089u32);
/// U+2202 PARTIAL DIFFERENTIAL
pub const KEY_partdifferential: Keysym =              Keysym(0x1002202u32);
/// U+2205 NULL SET
pub const KEY_emptyset: Keysym =                      Keysym(0x1002205u32);
/// U+2208 ELEMENT OF
pub const KEY_elementof: Keysym =                     Keysym(0x1002208u32);
/// U+2209 NOT AN ELEMENT OF
pub const KEY_notelementof: Keysym =                  Keysym(0x1002209u32);
/// U+220B CONTAINS AS MEMBER
pub const KEY_containsas: Keysym =                    Keysym(0x100220Bu32);
/// U+221A SQUARE ROOT
pub const KEY_squareroot: Keysym =                    Keysym(0x100221Au32);
/// U+221B CUBE ROOT
pub const KEY_cuberoot: Keysym =                      Keysym(0x100221Bu32);
/// U+221C FOURTH ROOT
pub const KEY_fourthroot: Keysym =                    Keysym(0x100221Cu32);
/// U+222C DOUBLE INTEGRAL
pub const KEY_dintegral: Keysym =                     Keysym(0x100222Cu32);
/// U+222D TRIPLE INTEGRAL
pub const KEY_tintegral: Keysym =                     Keysym(0x100222Du32);
/// U+2235 BECAUSE
pub const KEY_because: Keysym =                       Keysym(0x1002235u32);
/// U+2245 ALMOST EQUAL TO
pub const KEY_approxeq: Keysym =                      Keysym(0x1002248u32);
/// U+2247 NOT ALMOST EQUAL TO
pub const KEY_notapproxeq: Keysym =                   Keysym(0x1002247u32);
/// U+2262 NOT IDENTICAL TO
pub const KEY_notidentical: Keysym =                  Keysym(0x1002262u32);
/// U+2263 STRICTLY EQUIVALENT TO
pub const KEY_stricteq: Keysym =                      Keysym(0x1002263u32);

pub const KEY_braille_dot_1: Keysym =                 Keysym(0xfff1u32);
pub const KEY_braille_dot_2: Keysym =                 Keysym(0xfff2u32);
pub const KEY_braille_dot_3: Keysym =                 Keysym(0xfff3u32);
pub const KEY_braille_dot_4: Keysym =                 Keysym(0xfff4u32);
pub const KEY_braille_dot_5: Keysym =                 Keysym(0xfff5u32);
pub const KEY_braille_dot_6: Keysym =                 Keysym(0xfff6u32);
pub const KEY_braille_dot_7: Keysym =                 Keysym(0xfff7u32);
pub const KEY_braille_dot_8: Keysym =                 Keysym(0xfff8u32);
pub const KEY_braille_dot_9: Keysym =                 Keysym(0xfff9u32);
pub const KEY_braille_dot_10: Keysym =                Keysym(0xfffau32);
/// U+2800 BRAILLE PATTERN BLANK
pub const KEY_braille_blank: Keysym =                 Keysym(0x1002800u32);
pub const KEY_braille_dots_1: Keysym =                Keysym(0x1002801u32);
pub const KEY_braille_dots_2: Keysym =                Keysym(0x1002802u32);
pub const KEY_braille_dots_12: Keysym =               Keysym(0x1002803u32);
pub const KEY_braille_dots_3: Keysym =                Keysym(0x1002804u32);
pub const KEY_braille_dots_13: Keysym =               Keysym(0x1002805u32);
pub const KEY_braille_dots_23: Keysym =               Keysym(0x1002806u32);
pub const KEY_braille_dots_123: Keysym =              Keysym(0x1002807u32);
pub const KEY_braille_dots_4: Keysym =                Keysym(0x1002808u32);
pub const KEY_braille_dots_14: Keysym =               Keysym(0x1002809u32);
pub const KEY_braille_dots_24: Keysym =               Keysym(0x100280au32);
pub const KEY_braille_dots_124: Keysym =              Keysym(0x100280bu32);
pub const KEY_braille_dots_34: Keysym =               Keysym(0x100280cu32);
pub const KEY_braille_dots_134: Keysym =              Keysym(0x100280du32);
pub const KEY_braille_dots_234: Keysym =              Keysym(0x100280eu32);
pub const KEY_braille_dots_1234: Keysym =             Keysym(0x100280fu32);
pub const KEY_braille_dots_5: Keysym =                Keysym(0x1002810u32);
pub const KEY_braille_dots_15: Keysym =               Keysym(0x1002811u32);
pub const KEY_braille_dots_25: Keysym =               Keysym(0x1002812u32);
pub const KEY_braille_dots_125: Keysym =              Keysym(0x1002813u32);
pub const KEY_braille_dots_35: Keysym =               Keysym(0x1002814u32);
pub const KEY_braille_dots_135: Keysym =              Keysym(0x1002815u32);
pub const KEY_braille_dots_235: Keysym =              Keysym(0x1002816u32);
pub const KEY_braille_dots_1235: Keysym =             Keysym(0x1002817u32);
pub const KEY_braille_dots_45: Keysym =               Keysym(0x1002818u32);
pub const KEY_braille_dots_145: Keysym =              Keysym(0x1002819u32);
pub const KEY_braille_dots_245: Keysym =              Keysym(0x100281au32);
pub const KEY_braille_dots_1245: Keysym =             Keysym(0x100281bu32);
pub const KEY_braille_dots_345: Keysym =              Keysym(0x100281cu32);
pub const KEY_braille_dots_1345: Keysym =             Keysym(0x100281du32);
pub const KEY_braille_dots_2345: Keysym =             Keysym(0x100281eu32);
pub const KEY_braille_dots_12345: Keysym =            Keysym(0x100281fu32);
pub const KEY_braille_dots_6: Keysym =                Keysym(0x1002820u32);
pub const KEY_braille_dots_16: Keysym =               Keysym(0x1002821u32);
pub const KEY_braille_dots_26: Keysym =               Keysym(0x1002822u32);
pub const KEY_braille_dots_126: Keysym =              Keysym(0x1002823u32);
pub const KEY_braille_dots_36: Keysym =               Keysym(0x1002824u32);
pub const KEY_braille_dots_136: Keysym =              Keysym(0x1002825u32);
pub const KEY_braille_dots_236: Keysym =              Keysym(0x1002826u32);
pub const KEY_braille_dots_1236: Keysym =             Keysym(0x1002827u32);
pub const KEY_braille_dots_46: Keysym =               Keysym(0x1002828u32);
pub const KEY_braille_dots_146: Keysym =              Keysym(0x1002829u32);
pub const KEY_braille_dots_246: Keysym =              Keysym(0x100282au32);
pub const KEY_braille_dots_1246: Keysym =             Keysym(0x100282bu32);
pub const KEY_braille_dots_346: Keysym =              Keysym(0x100282cu32);
pub const KEY_braille_dots_1346: Keysym =             Keysym(0x100282du32);
pub const KEY_braille_dots_2346: Keysym =             Keysym(0x100282eu32);
pub const KEY_braille_dots_12346: Keysym =            Keysym(0x100282fu32);
pub const KEY_braille_dots_56: Keysym =               Keysym(0x1002830u32);
pub const KEY_braille_dots_156: Keysym =              Keysym(0x1002831u32);
pub const KEY_braille_dots_256: Keysym =              Keysym(0x1002832u32);
pub const KEY_braille_dots_1256: Keysym =             Keysym(0x1002833u32);
pub const KEY_braille_dots_356: Keysym =              Keysym(0x1002834u32);
pub const KEY_braille_dots_1356: Keysym =             Keysym(0x1002835u32);
pub const KEY_braille_dots_2356: Keysym =             Keysym(0x1002836u32);
pub const KEY_braille_dots_12356: Keysym =            Keysym(0x1002837u32);
pub const KEY_braille_dots_456: Keysym =              Keysym(0x1002838u32);
pub const KEY_braille_dots_1456: Keysym =             Keysym(0x1002839u32);
pub const KEY_braille_dots_2456: Keysym =             Keysym(0x100283au32);
pub const KEY_braille_dots_12456: Keysym =            Keysym(0x100283bu32);
pub const KEY_braille_dots_3456: Keysym =             Keysym(0x100283cu32);
pub const KEY_braille_dots_13456: Keysym =            Keysym(0x100283du32);
pub const KEY_braille_dots_23456: Keysym =            Keysym(0x100283eu32);
pub const KEY_braille_dots_123456: Keysym =           Keysym(0x100283fu32);
pub const KEY_braille_dots_7: Keysym =                Keysym(0x1002840u32);
pub const KEY_braille_dots_17: Keysym =               Keysym(0x1002841u32);
pub const KEY_braille_dots_27: Keysym =               Keysym(0x1002842u32);
pub const KEY_braille_dots_127: Keysym =              Keysym(0x1002843u32);
pub const KEY_braille_dots_37: Keysym =               Keysym(0x1002844u32);
pub const KEY_braille_dots_137: Keysym =              Keysym(0x1002845u32);
pub const KEY_braille_dots_237: Keysym =              Keysym(0x1002846u32);
pub const KEY_braille_dots_1237: Keysym =             Keysym(0x1002847u32);
pub const KEY_braille_dots_47: Keysym =               Keysym(0x1002848u32);
pub const KEY_braille_dots_147: Keysym =              Keysym(0x1002849u32);
pub const KEY_braille_dots_247: Keysym =              Keysym(0x100284au32);
pub const KEY_braille_dots_1247: Keysym =             Keysym(0x100284bu32);
pub const KEY_braille_dots_347: Keysym =              Keysym(0x100284cu32);
pub const KEY_braille_dots_1347: Keysym =             Keysym(0x100284du32);
pub const KEY_braille_dots_2347: Keysym =             Keysym(0x100284eu32);
pub const KEY_braille_dots_12347: Keysym =            Keysym(0x100284fu32);
pub const KEY_braille_dots_57: Keysym =               Keysym(0x1002850u32);
pub const KEY_braille_dots_157: Keysym =              Keysym(0x1002851u32);
pub const KEY_braille_dots_257: Keysym =              Keysym(0x1002852u32);
pub const KEY_braille_dots_1257: Keysym =             Keysym(0x1002853u32);
pub const KEY_braille_dots_357: Keysym =              Keysym(0x1002854u32);
pub const KEY_braille_dots_1357: Keysym =             Keysym(0x1002855u32);
pub const KEY_braille_dots_2357: Keysym =             Keysym(0x1002856u32);
pub const KEY_braille_dots_12357: Keysym =            Keysym(0x1002857u32);
pub const KEY_braille_dots_457: Keysym =              Keysym(0x1002858u32);
pub const KEY_braille_dots_1457: Keysym =             Keysym(0x1002859u32);
pub const KEY_braille_dots_2457: Keysym =             Keysym(0x100285au32);
pub const KEY_braille_dots_12457: Keysym =            Keysym(0x100285bu32);
pub const KEY_braille_dots_3457: Keysym =             Keysym(0x100285cu32);
pub const KEY_braille_dots_13457: Keysym =            Keysym(0x100285du32);
pub const KEY_braille_dots_23457: Keysym =            Keysym(0x100285eu32);
pub const KEY_braille_dots_123457: Keysym =           Keysym(0x100285fu32);
pub const KEY_braille_dots_67: Keysym =               Keysym(0x1002860u32);
pub const KEY_braille_dots_167: Keysym =              Keysym(0x1002861u32);
pub const KEY_braille_dots_267: Keysym =              Keysym(0x1002862u32);
pub const KEY_braille_dots_1267: Keysym =             Keysym(0x1002863u32);
pub const KEY_braille_dots_367: Keysym =              Keysym(0x1002864u32);
pub const KEY_braille_dots_1367: Keysym =             Keysym(0x1002865u32);
pub const KEY_braille_dots_2367: Keysym =             Keysym(0x1002866u32);
pub const KEY_braille_dots_12367: Keysym =            Keysym(0x1002867u32);
pub const KEY_braille_dots_467: Keysym =              Keysym(0x1002868u32);
pub const KEY_braille_dots_1467: Keysym =             Keysym(0x1002869u32);
pub const KEY_braille_dots_2467: Keysym =             Keysym(0x100286au32);
pub const KEY_braille_dots_12467: Keysym =            Keysym(0x100286bu32);
pub const KEY_braille_dots_3467: Keysym =             Keysym(0x100286cu32);
pub const KEY_braille_dots_13467: Keysym =            Keysym(0x100286du32);
pub const KEY_braille_dots_23467: Keysym =            Keysym(0x100286eu32);
pub const KEY_braille_dots_123467: Keysym =           Keysym(0x100286fu32);
pub const KEY_braille_dots_567: Keysym =              Keysym(0x1002870u32);
pub const KEY_braille_dots_1567: Keysym =             Keysym(0x1002871u32);
pub const KEY_braille_dots_2567: Keysym =             Keysym(0x1002872u32);
pub const KEY_braille_dots_12567: Keysym =            Keysym(0x1002873u32);
pub const KEY_braille_dots_3567: Keysym =             Keysym(0x1002874u32);
pub const KEY_braille_dots_13567: Keysym =            Keysym(0x1002875u32);
pub const KEY_braille_dots_23567: Keysym =            Keysym(0x1002876u32);
pub const KEY_braille_dots_123567: Keysym =           Keysym(0x1002877u32);
pub const KEY_braille_dots_4567: Keysym =             Keysym(0x1002878u32);
pub const KEY_braille_dots_14567: Keysym =            Keysym(0x1002879u32);
pub const KEY_braille_dots_24567: Keysym =            Keysym(0x100287au32);
pub const KEY_braille_dots_124567: Keysym =           Keysym(0x100287bu32);
pub const KEY_braille_dots_34567: Keysym =            Keysym(0x100287cu32);
pub const KEY_braille_dots_134567: Keysym =           Keysym(0x100287du32);
pub const KEY_braille_dots_234567: Keysym =           Keysym(0x100287eu32);
pub const KEY_braille_dots_1234567: Keysym =          Keysym(0x100287fu32);
pub const KEY_braille_dots_8: Keysym =                Keysym(0x1002880u32);
pub const KEY_braille_dots_18: Keysym =               Keysym(0x1002881u32);
pub const KEY_braille_dots_28: Keysym =               Keysym(0x1002882u32);
pub const KEY_braille_dots_128: Keysym =              Keysym(0x1002883u32);
pub const KEY_braille_dots_38: Keysym =               Keysym(0x1002884u32);
pub const KEY_braille_dots_138: Keysym =              Keysym(0x1002885u32);
pub const KEY_braille_dots_238: Keysym =              Keysym(0x1002886u32);
pub const KEY_braille_dots_1238: Keysym =             Keysym(0x1002887u32);
pub const KEY_braille_dots_48: Keysym =               Keysym(0x1002888u32);
pub const KEY_braille_dots_148: Keysym =              Keysym(0x1002889u32);
pub const KEY_braille_dots_248: Keysym =              Keysym(0x100288au32);
pub const KEY_braille_dots_1248: Keysym =             Keysym(0x100288bu32);
pub const KEY_braille_dots_348: Keysym =              Keysym(0x100288cu32);
pub const KEY_braille_dots_1348: Keysym =             Keysym(0x100288du32);
pub const KEY_braille_dots_2348: Keysym =             Keysym(0x100288eu32);
pub const KEY_braille_dots_12348: Keysym =            Keysym(0x100288fu32);
pub const KEY_braille_dots_58: Keysym =               Keysym(0x1002890u32);
pub const KEY_braille_dots_158: Keysym =              Keysym(0x1002891u32);
pub const KEY_braille_dots_258: Keysym =              Keysym(0x1002892u32);
pub const KEY_braille_dots_1258: Keysym =             Keysym(0x1002893u32);
pub const KEY_braille_dots_358: Keysym =              Keysym(0x1002894u32);
pub const KEY_braille_dots_1358: Keysym =             Keysym(0x1002895u32);
pub const KEY_braille_dots_2358: Keysym =             Keysym(0x1002896u32);
pub const KEY_braille_dots_12358: Keysym =            Keysym(0x1002897u32);
pub const KEY_braille_dots_458: Keysym =              Keysym(0x1002898u32);
pub const KEY_braille_dots_1458: Keysym =             Keysym(0x1002899u32);
pub const KEY_braille_dots_2458: Keysym =             Keysym(0x100289au32);
pub const KEY_braille_dots_12458: Keysym =            Keysym(0x100289bu32);
pub const KEY_braille_dots_3458: Keysym =             Keysym(0x100289cu32);
pub const KEY_braille_dots_13458: Keysym =            Keysym(0x100289du32);
pub const KEY_braille_dots_23458: Keysym =            Keysym(0x100289eu32);
pub const KEY_braille_dots_123458: Keysym =           Keysym(0x100289fu32);
pub const KEY_braille_dots_68: Keysym =               Keysym(0x10028a0u32);
pub const KEY_braille_dots_168: Keysym =              Keysym(0x10028a1u32);
pub const KEY_braille_dots_268: Keysym =              Keysym(0x10028a2u32);
pub const KEY_braille_dots_1268: Keysym =             Keysym(0x10028a3u32);
pub const KEY_braille_dots_368: Keysym =              Keysym(0x10028a4u32);
pub const KEY_braille_dots_1368: Keysym =             Keysym(0x10028a5u32);
pub const KEY_braille_dots_2368: Keysym =             Keysym(0x10028a6u32);
pub const KEY_braille_dots_12368: Keysym =            Keysym(0x10028a7u32);
pub const KEY_braille_dots_468: Keysym =              Keysym(0x10028a8u32);
pub const KEY_braille_dots_1468: Keysym =             Keysym(0x10028a9u32);
pub const KEY_braille_dots_2468: Keysym =             Keysym(0x10028aau32);
pub const KEY_braille_dots_12468: Keysym =            Keysym(0x10028abu32);
pub const KEY_braille_dots_3468: Keysym =             Keysym(0x10028acu32);
pub const KEY_braille_dots_13468: Keysym =            Keysym(0x10028adu32);
pub const KEY_braille_dots_23468: Keysym =            Keysym(0x10028aeu32);
pub const KEY_braille_dots_123468: Keysym =           Keysym(0x10028afu32);
pub const KEY_braille_dots_568: Keysym =              Keysym(0x10028b0u32);
pub const KEY_braille_dots_1568: Keysym =             Keysym(0x10028b1u32);
pub const KEY_braille_dots_2568: Keysym =             Keysym(0x10028b2u32);
pub const KEY_braille_dots_12568: Keysym =            Keysym(0x10028b3u32);
pub const KEY_braille_dots_3568: Keysym =             Keysym(0x10028b4u32);
pub const KEY_braille_dots_13568: Keysym =            Keysym(0x10028b5u32);
pub const KEY_braille_dots_23568: Keysym =            Keysym(0x10028b6u32);
pub const KEY_braille_dots_123568: Keysym =           Keysym(0x10028b7u32);
pub const KEY_braille_dots_4568: Keysym =             Keysym(0x10028b8u32);
pub const KEY_braille_dots_14568: Keysym =            Keysym(0x10028b9u32);
pub const KEY_braille_dots_24568: Keysym =            Keysym(0x10028bau32);
pub const KEY_braille_dots_124568: Keysym =           Keysym(0x10028bbu32);
pub const KEY_braille_dots_34568: Keysym =            Keysym(0x10028bcu32);
pub const KEY_braille_dots_134568: Keysym =           Keysym(0x10028bdu32);
pub const KEY_braille_dots_234568: Keysym =           Keysym(0x10028beu32);
pub const KEY_braille_dots_1234568: Keysym =          Keysym(0x10028bfu32);
pub const KEY_braille_dots_78: Keysym =               Keysym(0x10028c0u32);
pub const KEY_braille_dots_178: Keysym =              Keysym(0x10028c1u32);
pub const KEY_braille_dots_278: Keysym =              Keysym(0x10028c2u32);
pub const KEY_braille_dots_1278: Keysym =             Keysym(0x10028c3u32);
pub const KEY_braille_dots_378: Keysym =              Keysym(0x10028c4u32);
pub const KEY_braille_dots_1378: Keysym =             Keysym(0x10028c5u32);
pub const KEY_braille_dots_2378: Keysym =             Keysym(0x10028c6u32);
pub const KEY_braille_dots_12378: Keysym =            Keysym(0x10028c7u32);
pub const KEY_braille_dots_478: Keysym =              Keysym(0x10028c8u32);
pub const KEY_braille_dots_1478: Keysym =             Keysym(0x10028c9u32);
pub const KEY_braille_dots_2478: Keysym =             Keysym(0x10028cau32);
pub const KEY_braille_dots_12478: Keysym =            Keysym(0x10028cbu32);
pub const KEY_braille_dots_3478: Keysym =             Keysym(0x10028ccu32);
pub const KEY_braille_dots_13478: Keysym =            Keysym(0x10028cdu32);
pub const KEY_braille_dots_23478: Keysym =            Keysym(0x10028ceu32);
pub const KEY_braille_dots_123478: Keysym =           Keysym(0x10028cfu32);
pub const KEY_braille_dots_578: Keysym =              Keysym(0x10028d0u32);
pub const KEY_braille_dots_1578: Keysym =             Keysym(0x10028d1u32);
pub const KEY_braille_dots_2578: Keysym =             Keysym(0x10028d2u32);
pub const KEY_braille_dots_12578: Keysym =            Keysym(0x10028d3u32);
pub const KEY_braille_dots_3578: Keysym =             Keysym(0x10028d4u32);
pub const KEY_braille_dots_13578: Keysym =            Keysym(0x10028d5u32);
pub const KEY_braille_dots_23578: Keysym =            Keysym(0x10028d6u32);
pub const KEY_braille_dots_123578: Keysym =           Keysym(0x10028d7u32);
pub const KEY_braille_dots_4578: Keysym =             Keysym(0x10028d8u32);
pub const KEY_braille_dots_14578: Keysym =            Keysym(0x10028d9u32);
pub const KEY_braille_dots_24578: Keysym =            Keysym(0x10028dau32);
pub const KEY_braille_dots_124578: Keysym =           Keysym(0x10028dbu32);
pub const KEY_braille_dots_34578: Keysym =            Keysym(0x10028dcu32);
pub const KEY_braille_dots_134578: Keysym =           Keysym(0x10028ddu32);
pub const KEY_braille_dots_234578: Keysym =           Keysym(0x10028deu32);
pub const KEY_braille_dots_1234578: Keysym =          Keysym(0x10028dfu32);
pub const KEY_braille_dots_678: Keysym =              Keysym(0x10028e0u32);
pub const KEY_braille_dots_1678: Keysym =             Keysym(0x10028e1u32);
pub const KEY_braille_dots_2678: Keysym =             Keysym(0x10028e2u32);
pub const KEY_braille_dots_12678: Keysym =            Keysym(0x10028e3u32);
pub const KEY_braille_dots_3678: Keysym =             Keysym(0x10028e4u32);
pub const KEY_braille_dots_13678: Keysym =            Keysym(0x10028e5u32);
pub const KEY_braille_dots_23678: Keysym =            Keysym(0x10028e6u32);
pub const KEY_braille_dots_123678: Keysym =           Keysym(0x10028e7u32);
pub const KEY_braille_dots_4678: Keysym =             Keysym(0x10028e8u32);
pub const KEY_braille_dots_14678: Keysym =            Keysym(0x10028e9u32);
pub const KEY_braille_dots_24678: Keysym =            Keysym(0x10028eau32);
pub const KEY_braille_dots_124678: Keysym =           Keysym(0x10028ebu32);
pub const KEY_braille_dots_34678: Keysym =            Keysym(0x10028ecu32);
pub const KEY_braille_dots_134678: Keysym =           Keysym(0x10028edu32);
pub const KEY_braille_dots_234678: Keysym =           Keysym(0x10028eeu32);
pub const KEY_braille_dots_1234678: Keysym =          Keysym(0x10028efu32);
pub const KEY_braille_dots_5678: Keysym =             Keysym(0x10028f0u32);
pub const KEY_braille_dots_15678: Keysym =            Keysym(0x10028f1u32);
pub const KEY_braille_dots_25678: Keysym =            Keysym(0x10028f2u32);
pub const KEY_braille_dots_125678: Keysym =           Keysym(0x10028f3u32);
pub const KEY_braille_dots_35678: Keysym =            Keysym(0x10028f4u32);
pub const KEY_braille_dots_135678: Keysym =           Keysym(0x10028f5u32);
pub const KEY_braille_dots_235678: Keysym =           Keysym(0x10028f6u32);
pub const KEY_braille_dots_1235678: Keysym =          Keysym(0x10028f7u32);
pub const KEY_braille_dots_45678: Keysym =            Keysym(0x10028f8u32);
pub const KEY_braille_dots_145678: Keysym =           Keysym(0x10028f9u32);
pub const KEY_braille_dots_245678: Keysym =           Keysym(0x10028fau32);
pub const KEY_braille_dots_1245678: Keysym =          Keysym(0x10028fbu32);
pub const KEY_braille_dots_345678: Keysym =           Keysym(0x10028fcu32);
pub const KEY_braille_dots_1345678: Keysym =          Keysym(0x10028fdu32);
pub const KEY_braille_dots_2345678: Keysym =          Keysym(0x10028feu32);
pub const KEY_braille_dots_12345678: Keysym =         Keysym(0x10028ffu32);

/*
 * Sinhala (http://unicode.org/charts/PDF/U0D80.pdf)
 * http://www.nongnu.org/sinhala/doc/transliteration/sinhala-transliteration_6.html
 */

/// U+0D82 SINHALA ANUSVARAYA
pub const KEY_Sinh_ng: Keysym =                       Keysym(0x1000d82u32);
/// U+0D83 SINHALA VISARGAYA
pub const KEY_Sinh_h2: Keysym =                       Keysym(0x1000d83u32);
/// U+0D85 SINHALA AYANNA
pub const KEY_Sinh_a: Keysym =                        Keysym(0x1000d85u32);
/// U+0D86 SINHALA AAYANNA
pub const KEY_Sinh_aa: Keysym =                       Keysym(0x1000d86u32);
/// U+0D87 SINHALA AEYANNA
pub const KEY_Sinh_ae: Keysym =                       Keysym(0x1000d87u32);
/// U+0D88 SINHALA AEEYANNA
pub const KEY_Sinh_aee: Keysym =                      Keysym(0x1000d88u32);
/// U+0D89 SINHALA IYANNA
pub const KEY_Sinh_i: Keysym =                        Keysym(0x1000d89u32);
/// U+0D8A SINHALA IIYANNA
pub const KEY_Sinh_ii: Keysym =                       Keysym(0x1000d8au32);
/// U+0D8B SINHALA UYANNA
pub const KEY_Sinh_u: Keysym =                        Keysym(0x1000d8bu32);
/// U+0D8C SINHALA UUYANNA
pub const KEY_Sinh_uu: Keysym =                       Keysym(0x1000d8cu32);
/// U+0D8D SINHALA IRUYANNA
pub const KEY_Sinh_ri: Keysym =                       Keysym(0x1000d8du32);
/// U+0D8E SINHALA IRUUYANNA
pub const KEY_Sinh_rii: Keysym =                      Keysym(0x1000d8eu32);
/// U+0D8F SINHALA ILUYANNA
pub const KEY_Sinh_lu: Keysym =                       Keysym(0x1000d8fu32);
/// U+0D90 SINHALA ILUUYANNA
pub const KEY_Sinh_luu: Keysym =                      Keysym(0x1000d90u32);
/// U+0D91 SINHALA EYANNA
pub const KEY_Sinh_e: Keysym =                        Keysym(0x1000d91u32);
/// U+0D92 SINHALA EEYANNA
pub const KEY_Sinh_ee: Keysym =                       Keysym(0x1000d92u32);
/// U+0D93 SINHALA AIYANNA
pub const KEY_Sinh_ai: Keysym =                       Keysym(0x1000d93u32);
/// U+0D94 SINHALA OYANNA
pub const KEY_Sinh_o: Keysym =                        Keysym(0x1000d94u32);
/// U+0D95 SINHALA OOYANNA
pub const KEY_Sinh_oo: Keysym =                       Keysym(0x1000d95u32);
/// U+0D96 SINHALA AUYANNA
pub const KEY_Sinh_au: Keysym =                       Keysym(0x1000d96u32);
/// U+0D9A SINHALA KAYANNA
pub const KEY_Sinh_ka: Keysym =                       Keysym(0x1000d9au32);
pub const KEY_Sinh_kha: Keysym =                      Keysym(0x1000d9bu32);
/// U+0D9C SINHALA GAYANNA
pub const KEY_Sinh_ga: Keysym =                       Keysym(0x1000d9cu32);
pub const KEY_Sinh_gha: Keysym =                      Keysym(0x1000d9du32);
/// U+0D9E SINHALA KANTAJA NAASIKYAYA
pub const KEY_Sinh_ng2: Keysym =                      Keysym(0x1000d9eu32);
/// U+0D9F SINHALA SANYAKA GAYANNA
pub const KEY_Sinh_nga: Keysym =                      Keysym(0x1000d9fu32);
/// U+0DA0 SINHALA CAYANNA
pub const KEY_Sinh_ca: Keysym =                       Keysym(0x1000da0u32);
pub const KEY_Sinh_cha: Keysym =                      Keysym(0x1000da1u32);
/// U+0DA2 SINHALA JAYANNA
pub const KEY_Sinh_ja: Keysym =                       Keysym(0x1000da2u32);
pub const KEY_Sinh_jha: Keysym =                      Keysym(0x1000da3u32);
/// U+0DA4 SINHALA TAALUJA NAASIKYAYA
pub const KEY_Sinh_nya: Keysym =                      Keysym(0x1000da4u32);
/// U+0DA5 SINHALA TAALUJA SANYOOGA NAASIKYAYA
pub const KEY_Sinh_jnya: Keysym =                     Keysym(0x1000da5u32);
/// U+0DA6 SINHALA SANYAKA JAYANNA
pub const KEY_Sinh_nja: Keysym =                      Keysym(0x1000da6u32);
/// U+0DA7 SINHALA TTAYANNA
pub const KEY_Sinh_tta: Keysym =                      Keysym(0x1000da7u32);
pub const KEY_Sinh_ttha: Keysym =                     Keysym(0x1000da8u32);
/// U+0DA9 SINHALA DDAYANNA
pub const KEY_Sinh_dda: Keysym =                      Keysym(0x1000da9u32);
pub const KEY_Sinh_ddha: Keysym =                     Keysym(0x1000daau32);
/// U+0DAB SINHALA MUURDHAJA NAYANNA
pub const KEY_Sinh_nna: Keysym =                      Keysym(0x1000dabu32);
/// U+0DAC SINHALA SANYAKA DDAYANNA
pub const KEY_Sinh_ndda: Keysym =                     Keysym(0x1000dacu32);
/// U+0DAD SINHALA TAYANNA
pub const KEY_Sinh_tha: Keysym =                      Keysym(0x1000dadu32);
pub const KEY_Sinh_thha: Keysym =                     Keysym(0x1000daeu32);
/// U+0DAF SINHALA DAYANNA
pub const KEY_Sinh_dha: Keysym =                      Keysym(0x1000dafu32);
pub const KEY_Sinh_dhha: Keysym =                     Keysym(0x1000db0u32);
/// U+0DB1 SINHALA DANTAJA NAYANNA
pub const KEY_Sinh_na: Keysym =                       Keysym(0x1000db1u32);
/// U+0DB3 SINHALA SANYAKA DAYANNA
pub const KEY_Sinh_ndha: Keysym =                     Keysym(0x1000db3u32);
/// U+0DB4 SINHALA PAYANNA
pub const KEY_Sinh_pa: Keysym =                       Keysym(0x1000db4u32);
pub const KEY_Sinh_pha: Keysym =                      Keysym(0x1000db5u32);
/// U+0DB6 SINHALA BAYANNA
pub const KEY_Sinh_ba: Keysym =                       Keysym(0x1000db6u32);
pub const KEY_Sinh_bha: Keysym =                      Keysym(0x1000db7u32);
/// U+0DB8 SINHALA MAYANNA
pub const KEY_Sinh_ma: Keysym =                       Keysym(0x1000db8u32);
/// U+0DB9 SINHALA AMBA BAYANNA
pub const KEY_Sinh_mba: Keysym =                      Keysym(0x1000db9u32);
/// U+0DBA SINHALA YAYANNA
pub const KEY_Sinh_ya: Keysym =                       Keysym(0x1000dbau32);
/// U+0DBB SINHALA RAYANNA
pub const KEY_Sinh_ra: Keysym =                       Keysym(0x1000dbbu32);
/// U+0DBD SINHALA DANTAJA LAYANNA
pub const KEY_Sinh_la: Keysym =                       Keysym(0x1000dbdu32);
/// U+0DC0 SINHALA VAYANNA
pub const KEY_Sinh_va: Keysym =                       Keysym(0x1000dc0u32);
/// U+0DC1 SINHALA TAALUJA SAYANNA
pub const KEY_Sinh_sha: Keysym =                      Keysym(0x1000dc1u32);
/// U+0DC2 SINHALA MUURDHAJA SAYANNA
pub const KEY_Sinh_ssha: Keysym =                     Keysym(0x1000dc2u32);
/// U+0DC3 SINHALA DANTAJA SAYANNA
pub const KEY_Sinh_sa: Keysym =                       Keysym(0x1000dc3u32);
/// U+0DC4 SINHALA HAYANNA
pub const KEY_Sinh_ha: Keysym =                       Keysym(0x1000dc4u32);
/// U+0DC5 SINHALA MUURDHAJA LAYANNA
pub const KEY_Sinh_lla: Keysym =                      Keysym(0x1000dc5u32);
/// U+0DC6 SINHALA FAYANNA
pub const KEY_Sinh_fa: Keysym =                       Keysym(0x1000dc6u32);
pub const KEY_Sinh_al: Keysym =                       Keysym(0x1000dcau32);
pub const KEY_Sinh_aa2: Keysym =                      Keysym(0x1000dcfu32);
pub const KEY_Sinh_ae2: Keysym =                      Keysym(0x1000dd0u32);
pub const KEY_Sinh_aee2: Keysym =                     Keysym(0x1000dd1u32);
pub const KEY_Sinh_i2: Keysym =                       Keysym(0x1000dd2u32);
pub const KEY_Sinh_ii2: Keysym =                      Keysym(0x1000dd3u32);
pub const KEY_Sinh_u2: Keysym =                       Keysym(0x1000dd4u32);
pub const KEY_Sinh_uu2: Keysym =                      Keysym(0x1000dd6u32);
pub const KEY_Sinh_ru2: Keysym =                      Keysym(0x1000dd8u32);
/// U+0DD9 SINHALA KOMBUVA
pub const KEY_Sinh_e2: Keysym =                       Keysym(0x1000dd9u32);
/// U+0DDA SINHALA DIGA KOMBUVA
pub const KEY_Sinh_ee2: Keysym =                      Keysym(0x1000ddau32);
/// U+0DDB SINHALA KOMBU DEKA
pub const KEY_Sinh_ai2: Keysym =                      Keysym(0x1000ddbu32);
pub const KEY_Sinh_o2: Keysym =                       Keysym(0x1000ddcu32);
pub const KEY_Sinh_oo2: Keysym =                      Keysym(0x1000dddu32);
/// U+0DDE SINHALA KOMBUVA HAA GAYANUKITTA
pub const KEY_Sinh_au2: Keysym =                      Keysym(0x1000ddeu32);
/// U+0DDF SINHALA GAYANUKITTA
pub const KEY_Sinh_lu2: Keysym =                      Keysym(0x1000ddfu32);
pub const KEY_Sinh_ruu2: Keysym =                     Keysym(0x1000df2u32);
/// U+0DF3 SINHALA DIGA GAYANUKITTA
pub const KEY_Sinh_luu2: Keysym =                     Keysym(0x1000df3u32);
/// U+0DF4 SINHALA KUNDDALIYA
pub const KEY_Sinh_kunddaliya: Keysym =               Keysym(0x1000df4u32);
/*
 * XFree86 vendor specific keysyms.
 *
 * The XFree86 keysym range is 0x10080001 - 0x1008FFFF.
 *
 * When adding new entries, the xc/lib/XKeysymDB file should also be
 * updated to make the new entries visible to Xlib.
 */

/*
 * ModeLock
 *
 * This one is old, and not really used any more since XKB offers this
 * functionality.
 */

/// Mode Switch Lock
pub const KEY_XF86ModeLock: Keysym =                  Keysym(0x1008FF01u32);

/*
 * Note, 0x1008FF07 - 0x1008FF0F are free and should be used for misc new
 * keysyms that don't fit into any of the groups below.
 *
 * 0x1008FF64, 0x1008FF6F, 0x1008FF71, 0x1008FF83 are no longer used,
 * and should be used first for new keysyms.
 *
 * Check in keysymdef.h for generic symbols before adding new XFree86-specific
 * symbols here.
 *
 * X.Org will not be adding to the XF86 set of keysyms, though they have
 * been adopted and are considered a "standard" part of X keysym definitions.
 * XFree86 never properly commented these keysyms, so we have done our
 * best to explain the semantic meaning of these keys.
 *
 * XFree86 has removed their mail archives of the period, that might have
 * shed more light on some of these definitions. Until/unless we resurrect
 * these archives, these are from memory and usage.
 */


/* Backlight controls. */
pub const KEY_XF86MonBrightnessUp: Keysym =           Keysym(0x1008FF02u32);
pub const KEY_XF86MonBrightnessDown: Keysym =         Keysym(0x1008FF03u32);
/// Keyboards may be lit    
pub const KEY_XF86KbdLightOnOff: Keysym =             Keysym(0x1008FF04u32);
/// Keyboards may be lit    
pub const KEY_XF86KbdBrightnessUp: Keysym =           Keysym(0x1008FF05u32);
/// Keyboards may be lit    
pub const KEY_XF86KbdBrightnessDown: Keysym =         Keysym(0x1008FF06u32);

/*
 * Keys found on some "Internet" keyboards.
 */
/// System into standby mode  
pub const KEY_XF86Standby: Keysym =                   Keysym(0x1008FF10u32);
/// Volume control down       
pub const KEY_XF86AudioLowerVolume: Keysym =          Keysym(0x1008FF11u32);
/// Mute sound from the system
pub const KEY_XF86AudioMute: Keysym =                 Keysym(0x1008FF12u32);
/// Volume control up         
pub const KEY_XF86AudioRaiseVolume: Keysym =          Keysym(0x1008FF13u32);
pub const KEY_XF86AudioPlay: Keysym =                 Keysym(0x1008FF14u32);
/// Stop playing audio        
pub const KEY_XF86AudioStop: Keysym =                 Keysym(0x1008FF15u32);
/// Previous track            
pub const KEY_XF86AudioPrev: Keysym =                 Keysym(0x1008FF16u32);
/// Next track                
pub const KEY_XF86AudioNext: Keysym =                 Keysym(0x1008FF17u32);
pub const KEY_XF86HomePage: Keysym =                  Keysym(0x1008FF18u32);
pub const KEY_XF86Mail: Keysym =                      Keysym(0x1008FF19u32);
/// Start application         
pub const KEY_XF86Start: Keysym =                     Keysym(0x1008FF1Au32);
/// Search                    
pub const KEY_XF86Search: Keysym =                    Keysym(0x1008FF1Bu32);
/// Record audio application  
pub const KEY_XF86AudioRecord: Keysym =               Keysym(0x1008FF1Cu32);

/* These are sometimes found on PDA's (e.g. Palm, PocketPC or elsewhere)   */
/// Invoke calculator program 
pub const KEY_XF86Calculator: Keysym =                Keysym(0x1008FF1Du32);
/// Invoke Memo taking program
pub const KEY_XF86Memo: Keysym =                      Keysym(0x1008FF1Eu32);
/// Invoke To Do List program 
pub const KEY_XF86ToDoList: Keysym =                  Keysym(0x1008FF1Fu32);
/// Invoke Calendar program   
pub const KEY_XF86Calendar: Keysym =                  Keysym(0x1008FF20u32);
/// Deep sleep the system     
pub const KEY_XF86PowerDown: Keysym =                 Keysym(0x1008FF21u32);
/// Adjust screen contrast    
pub const KEY_XF86ContrastAdjust: Keysym =            Keysym(0x1008FF22u32);
/// Rocker switches exist up  
pub const KEY_XF86RockerUp: Keysym =                  Keysym(0x1008FF23u32);
/// and down                  
pub const KEY_XF86RockerDown: Keysym =                Keysym(0x1008FF24u32);
/// and let you press them    
pub const KEY_XF86RockerEnter: Keysym =               Keysym(0x1008FF25u32);

/* Some more "Internet" keyboard symbols */
/// Like back on a browser    
pub const KEY_XF86Back: Keysym =                      Keysym(0x1008FF26u32);
/// Like forward on a browser 
pub const KEY_XF86Forward: Keysym =                   Keysym(0x1008FF27u32);
/// Stop current operation    
pub const KEY_XF86Stop: Keysym =                      Keysym(0x1008FF28u32);
/// Refresh the page          
pub const KEY_XF86Refresh: Keysym =                   Keysym(0x1008FF29u32);
/// Power off system entirely 
pub const KEY_XF86PowerOff: Keysym =                  Keysym(0x1008FF2Au32);
/// Wake up system from sleep 
pub const KEY_XF86WakeUp: Keysym =                    Keysym(0x1008FF2Bu32);
pub const KEY_XF86Eject: Keysym =                     Keysym(0x1008FF2Cu32);
/// Invoke screensaver        
pub const KEY_XF86ScreenSaver: Keysym =               Keysym(0x1008FF2Du32);
/// Invoke web browser        
pub const KEY_XF86WWW: Keysym =                       Keysym(0x1008FF2Eu32);
/// Put system to sleep       
pub const KEY_XF86Sleep: Keysym =                     Keysym(0x1008FF2Fu32);
/// Show favorite locations   
pub const KEY_XF86Favorites: Keysym =                 Keysym(0x1008FF30u32);
/// Pause audio playing       
pub const KEY_XF86AudioPause: Keysym =                Keysym(0x1008FF31u32);
/// Launch media collection app
pub const KEY_XF86AudioMedia: Keysym =                Keysym(0x1008FF32u32);
pub const KEY_XF86MyComputer: Keysym =                Keysym(0x1008FF33u32);
/// Display vendor home web site
pub const KEY_XF86VendorHome: Keysym =                Keysym(0x1008FF34u32);
/// Light bulb keys exist      
pub const KEY_XF86LightBulb: Keysym =                 Keysym(0x1008FF35u32);
/// Display shopping web site  
pub const KEY_XF86Shop: Keysym =                      Keysym(0x1008FF36u32);
/// Show history of web surfing
pub const KEY_XF86History: Keysym =                   Keysym(0x1008FF37u32);
/// Open selected URL          
pub const KEY_XF86OpenURL: Keysym =                   Keysym(0x1008FF38u32);
/// Add URL to favorites list  
pub const KEY_XF86AddFavorite: Keysym =               Keysym(0x1008FF39u32);
pub const KEY_XF86HotLinks: Keysym =                  Keysym(0x1008FF3Au32);
pub const KEY_XF86BrightnessAdjust: Keysym =          Keysym(0x1008FF3Bu32);
/// Display financial site     
pub const KEY_XF86Finance: Keysym =                   Keysym(0x1008FF3Cu32);
pub const KEY_XF86Community: Keysym =                 Keysym(0x1008FF3Du32);
pub const KEY_XF86AudioRewind: Keysym =               Keysym(0x1008FF3Eu32);
pub const KEY_XF86BackForward: Keysym =               Keysym(0x1008FF3Fu32);
/// Launch Application         
pub const KEY_XF86Launch0: Keysym =                   Keysym(0x1008FF40u32);
/// Launch Application         
pub const KEY_XF86Launch1: Keysym =                   Keysym(0x1008FF41u32);
/// Launch Application         
pub const KEY_XF86Launch2: Keysym =                   Keysym(0x1008FF42u32);
/// Launch Application         
pub const KEY_XF86Launch3: Keysym =                   Keysym(0x1008FF43u32);
/// Launch Application         
pub const KEY_XF86Launch4: Keysym =                   Keysym(0x1008FF44u32);
/// Launch Application         
pub const KEY_XF86Launch5: Keysym =                   Keysym(0x1008FF45u32);
/// Launch Application         
pub const KEY_XF86Launch6: Keysym =                   Keysym(0x1008FF46u32);
/// Launch Application         
pub const KEY_XF86Launch7: Keysym =                   Keysym(0x1008FF47u32);
/// Launch Application         
pub const KEY_XF86Launch8: Keysym =                   Keysym(0x1008FF48u32);
/// Launch Application         
pub const KEY_XF86Launch9: Keysym =                   Keysym(0x1008FF49u32);
/// Launch Application         
pub const KEY_XF86LaunchA: Keysym =                   Keysym(0x1008FF4Au32);
/// Launch Application         
pub const KEY_XF86LaunchB: Keysym =                   Keysym(0x1008FF4Bu32);
/// Launch Application         
pub const KEY_XF86LaunchC: Keysym =                   Keysym(0x1008FF4Cu32);
/// Launch Application         
pub const KEY_XF86LaunchD: Keysym =                   Keysym(0x1008FF4Du32);
/// Launch Application         
pub const KEY_XF86LaunchE: Keysym =                   Keysym(0x1008FF4Eu32);
/// Launch Application         
pub const KEY_XF86LaunchF: Keysym =                   Keysym(0x1008FF4Fu32);

pub const KEY_XF86ApplicationLeft: Keysym =           Keysym(0x1008FF50u32);
pub const KEY_XF86ApplicationRight: Keysym =          Keysym(0x1008FF51u32);
/// Launch bookreader          
pub const KEY_XF86Book: Keysym =                      Keysym(0x1008FF52u32);
pub const KEY_XF86CD: Keysym =                        Keysym(0x1008FF53u32);
/// Launch Calculater          
pub const KEY_XF86Calculater: Keysym =                Keysym(0x1008FF54u32);
pub const KEY_XF86Clear: Keysym =                     Keysym(0x1008FF55u32);
/// Close window               
pub const KEY_XF86Close: Keysym =                     Keysym(0x1008FF56u32);
/// Copy selection             
pub const KEY_XF86Copy: Keysym =                      Keysym(0x1008FF57u32);
/// Cut selection              
pub const KEY_XF86Cut: Keysym =                       Keysym(0x1008FF58u32);
/// Output switch key          
pub const KEY_XF86Display: Keysym =                   Keysym(0x1008FF59u32);
pub const KEY_XF86DOS: Keysym =                       Keysym(0x1008FF5Au32);
/// Open documents window      
pub const KEY_XF86Documents: Keysym =                 Keysym(0x1008FF5Bu32);
/// Launch spread sheet        
pub const KEY_XF86Excel: Keysym =                     Keysym(0x1008FF5Cu32);
/// Launch file explorer       
pub const KEY_XF86Explorer: Keysym =                  Keysym(0x1008FF5Du32);
/// Launch game                
pub const KEY_XF86Game: Keysym =                      Keysym(0x1008FF5Eu32);
/// Go to URL                  
pub const KEY_XF86Go: Keysym =                        Keysym(0x1008FF5Fu32);
pub const KEY_XF86iTouch: Keysym =                    Keysym(0x1008FF60u32);
/// Log off system             
pub const KEY_XF86LogOff: Keysym =                    Keysym(0x1008FF61u32);
pub const KEY_XF86Market: Keysym =                    Keysym(0x1008FF62u32);
/// enter meeting in calendar  
pub const KEY_XF86Meeting: Keysym =                   Keysym(0x1008FF63u32);
/// distingush keyboard from PB
pub const KEY_XF86MenuKB: Keysym =                    Keysym(0x1008FF65u32);
/// distinuish PB from keyboard
pub const KEY_XF86MenuPB: Keysym =                    Keysym(0x1008FF66u32);
/// Favourites                 
pub const KEY_XF86MySites: Keysym =                   Keysym(0x1008FF67u32);
pub const KEY_XF86New: Keysym =                       Keysym(0x1008FF68u32);
/// News                       
pub const KEY_XF86News: Keysym =                      Keysym(0x1008FF69u32);
pub const KEY_XF86OfficeHome: Keysym =                Keysym(0x1008FF6Au32);
/// Open                       
pub const KEY_XF86Open: Keysym =                      Keysym(0x1008FF6Bu32);
pub const KEY_XF86Option: Keysym =                    Keysym(0x1008FF6Cu32);
/// Paste                      
pub const KEY_XF86Paste: Keysym =                     Keysym(0x1008FF6Du32);
pub const KEY_XF86Phone: Keysym =                     Keysym(0x1008FF6Eu32);
pub const KEY_XF86Q: Keysym =                         Keysym(0x1008FF70u32);
pub const KEY_XF86Reply: Keysym =                     Keysym(0x1008FF72u32);
pub const KEY_XF86Reload: Keysym =                    Keysym(0x1008FF73u32);
pub const KEY_XF86RotateWindows: Keysym =             Keysym(0x1008FF74u32);
pub const KEY_XF86RotationPB: Keysym =                Keysym(0x1008FF75u32);
pub const KEY_XF86RotationKB: Keysym =                Keysym(0x1008FF76u32);
pub const KEY_XF86Save: Keysym =                      Keysym(0x1008FF77u32);
pub const KEY_XF86ScrollUp: Keysym =                  Keysym(0x1008FF78u32);
pub const KEY_XF86ScrollDown: Keysym =                Keysym(0x1008FF79u32);
/// Use XKB mousekeys instead  
pub const KEY_XF86ScrollClick: Keysym =               Keysym(0x1008FF7Au32);
pub const KEY_XF86Send: Keysym =                      Keysym(0x1008FF7Bu32);
/// Spell checker              
pub const KEY_XF86Spell: Keysym =                     Keysym(0x1008FF7Cu32);
/// Split window or screen     
pub const KEY_XF86SplitScreen: Keysym =               Keysym(0x1008FF7Du32);
pub const KEY_XF86Support: Keysym =                   Keysym(0x1008FF7Eu32);
/// Show tasks
pub const KEY_XF86TaskPane: Keysym =                  Keysym(0x1008FF7Fu32);
/// Launch terminal emulator   
pub const KEY_XF86Terminal: Keysym =                  Keysym(0x1008FF80u32);
pub const KEY_XF86Tools: Keysym =                     Keysym(0x1008FF81u32);
pub const KEY_XF86Travel: Keysym =                    Keysym(0x1008FF82u32);
pub const KEY_XF86UserPB: Keysym =                    Keysym(0x1008FF84u32);
pub const KEY_XF86User1KB: Keysym =                   Keysym(0x1008FF85u32);
pub const KEY_XF86User2KB: Keysym =                   Keysym(0x1008FF86u32);
/// Launch video player      
pub const KEY_XF86Video: Keysym =                     Keysym(0x1008FF87u32);
/// button from a mouse wheel
pub const KEY_XF86WheelButton: Keysym =               Keysym(0x1008FF88u32);
/// Launch word processor    
pub const KEY_XF86Word: Keysym =                      Keysym(0x1008FF89u32);
pub const KEY_XF86Xfer: Keysym =                      Keysym(0x1008FF8Au32);
pub const KEY_XF86ZoomIn: Keysym =                    Keysym(0x1008FF8Bu32);
pub const KEY_XF86ZoomOut: Keysym =                   Keysym(0x1008FF8Cu32);

/// mark yourself as away    
pub const KEY_XF86Away: Keysym =                      Keysym(0x1008FF8Du32);
/// as in instant messaging  
pub const KEY_XF86Messenger: Keysym =                 Keysym(0x1008FF8Eu32);
pub const KEY_XF86WebCam: Keysym =                    Keysym(0x1008FF8Fu32);
/// Forward in mail          
pub const KEY_XF86MailForward: Keysym =               Keysym(0x1008FF90u32);
/// Show pictures            
pub const KEY_XF86Pictures: Keysym =                  Keysym(0x1008FF91u32);
/// Launch music application 
pub const KEY_XF86Music: Keysym =                     Keysym(0x1008FF92u32);

/// Display battery information
pub const KEY_XF86Battery: Keysym =                   Keysym(0x1008FF93u32);
pub const KEY_XF86Bluetooth: Keysym =                 Keysym(0x1008FF94u32);
pub const KEY_XF86WLAN: Keysym =                      Keysym(0x1008FF95u32);
pub const KEY_XF86UWB: Keysym =                       Keysym(0x1008FF96u32);

pub const KEY_XF86AudioForward: Keysym =              Keysym(0x1008FF97u32);
/// toggle repeat mode         
pub const KEY_XF86AudioRepeat: Keysym =               Keysym(0x1008FF98u32);
/// toggle shuffle mode        
pub const KEY_XF86AudioRandomPlay: Keysym =           Keysym(0x1008FF99u32);
/// cycle through subtitle     
pub const KEY_XF86Subtitle: Keysym =                  Keysym(0x1008FF9Au32);
/// cycle through audio tracks 
pub const KEY_XF86AudioCycleTrack: Keysym =           Keysym(0x1008FF9Bu32);
/// cycle through angles       
pub const KEY_XF86CycleAngle: Keysym =                Keysym(0x1008FF9Cu32);
pub const KEY_XF86FrameBack: Keysym =                 Keysym(0x1008FF9Du32);
pub const KEY_XF86FrameForward: Keysym =              Keysym(0x1008FF9Eu32);
pub const KEY_XF86Time: Keysym =                      Keysym(0x1008FF9Fu32);
/// Select button on joypads and remotes
pub const KEY_XF86Select: Keysym =                    Keysym(0x1008FFA0u32);
pub const KEY_XF86View: Keysym =                      Keysym(0x1008FFA1u32);
pub const KEY_XF86TopMenu: Keysym =                   Keysym(0x1008FFA2u32);

/// Red button                 
pub const KEY_XF86Red: Keysym =                       Keysym(0x1008FFA3u32);
/// Green button               
pub const KEY_XF86Green: Keysym =                     Keysym(0x1008FFA4u32);
/// Yellow button              
pub const KEY_XF86Yellow: Keysym =                    Keysym(0x1008FFA5u32);
/// Blue button                
pub const KEY_XF86Blue: Keysym =                      Keysym(0x1008FFA6u32);

/// Sleep to RAM               
pub const KEY_XF86Suspend: Keysym =                   Keysym(0x1008FFA7u32);
/// Sleep to disk              
pub const KEY_XF86Hibernate: Keysym =                 Keysym(0x1008FFA8u32);
pub const KEY_XF86TouchpadToggle: Keysym =            Keysym(0x1008FFA9u32);
/// The touchpad got switched on
pub const KEY_XF86TouchpadOn: Keysym =                Keysym(0x1008FFB0u32);
/// The touchpad got switched off
pub const KEY_XF86TouchpadOff: Keysym =               Keysym(0x1008FFB1u32);

/// Mute the Mic from the system
pub const KEY_XF86AudioMicMute: Keysym =              Keysym(0x1008FFB2u32);

/* Keys for special action keys (hot keys) */
/* Virtual terminals on some operating systems */
pub const KEY_XF86Switch_VT_1: Keysym =               Keysym(0x1008FE01u32);
pub const KEY_XF86Switch_VT_2: Keysym =               Keysym(0x1008FE02u32);
pub const KEY_XF86Switch_VT_3: Keysym =               Keysym(0x1008FE03u32);
pub const KEY_XF86Switch_VT_4: Keysym =               Keysym(0x1008FE04u32);
pub const KEY_XF86Switch_VT_5: Keysym =               Keysym(0x1008FE05u32);
pub const KEY_XF86Switch_VT_6: Keysym =               Keysym(0x1008FE06u32);
pub const KEY_XF86Switch_VT_7: Keysym =               Keysym(0x1008FE07u32);
pub const KEY_XF86Switch_VT_8: Keysym =               Keysym(0x1008FE08u32);
pub const KEY_XF86Switch_VT_9: Keysym =               Keysym(0x1008FE09u32);
pub const KEY_XF86Switch_VT_10: Keysym =              Keysym(0x1008FE0Au32);
pub const KEY_XF86Switch_VT_11: Keysym =              Keysym(0x1008FE0Bu32);
pub const KEY_XF86Switch_VT_12: Keysym =              Keysym(0x1008FE0Cu32);

/// force ungrab              
pub const KEY_XF86Ungrab: Keysym =                    Keysym(0x1008FE20u32);
/// kill application with grab
pub const KEY_XF86ClearGrab: Keysym =                 Keysym(0x1008FE21u32);
/// next video mode available 
pub const KEY_XF86Next_VMode: Keysym =                Keysym(0x1008FE22u32);
pub const KEY_XF86Prev_VMode: Keysym =                Keysym(0x1008FE23u32);
/// print window tree to log  
pub const KEY_XF86LogWindowTree: Keysym =             Keysym(0x1008FE24u32);
/// print all active grabs to log
pub const KEY_XF86LogGrabInfo: Keysym =               Keysym(0x1008FE25u32);
/*
 * Copyright (c) 1991, Oracle and/or its affiliates. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
/************************************************************

Copyright 1991, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

***********************************************************/

/*
 * Floating Accent
 */

pub const KEY_SunFA_Grave: Keysym =                   Keysym(0x1005FF00u32);
pub const KEY_SunFA_Circum: Keysym =                  Keysym(0x1005FF01u32);
pub const KEY_SunFA_Tilde: Keysym =                   Keysym(0x1005FF02u32);
pub const KEY_SunFA_Acute: Keysym =                   Keysym(0x1005FF03u32);
pub const KEY_SunFA_Diaeresis: Keysym =               Keysym(0x1005FF04u32);
pub const KEY_SunFA_Cedilla: Keysym =                 Keysym(0x1005FF05u32);

/*
 * Miscellaneous Functions
 */

/// Labeled F11
pub const KEY_SunF36: Keysym =                        Keysym(0x1005FF10u32);
/// Labeled F12
pub const KEY_SunF37: Keysym =                        Keysym(0x1005FF11u32);

pub const KEY_SunSys_Req: Keysym =                    Keysym(0x1005FF60u32);
/// Same as XK_Print
pub const KEY_SunPrint_Screen: Keysym =               Keysym(0x0000FF61u32);

/*
 * International & Multi-Key Character Composition
 */

/// Same as XK_Multi_key
pub const KEY_SunCompose: Keysym =                    Keysym(0x0000FF20u32);
/// Same as XK_Mode_switch
pub const KEY_SunAltGraph: Keysym =                   Keysym(0x0000FF7Eu32);

/*
 * Cursor Control
 */

/// Same as XK_Prior
pub const KEY_SunPageUp: Keysym =                     Keysym(0x0000FF55u32);
/// Same as XK_Next
pub const KEY_SunPageDown: Keysym =                   Keysym(0x0000FF56u32);

/*
 * Open Look Functions
 */

/// Same as XK_Undo
pub const KEY_SunUndo: Keysym =                       Keysym(0x0000FF65u32);
/// Same as XK_Redo
pub const KEY_SunAgain: Keysym =                      Keysym(0x0000FF66u32);
/// Same as XK_Find
pub const KEY_SunFind: Keysym =                       Keysym(0x0000FF68u32);
/// Same as XK_Cancel
pub const KEY_SunStop: Keysym =                       Keysym(0x0000FF69u32);
pub const KEY_SunProps: Keysym =                      Keysym(0x1005FF70u32);
pub const KEY_SunFront: Keysym =                      Keysym(0x1005FF71u32);
pub const KEY_SunCopy: Keysym =                       Keysym(0x1005FF72u32);
pub const KEY_SunOpen: Keysym =                       Keysym(0x1005FF73u32);
pub const KEY_SunPaste: Keysym =                      Keysym(0x1005FF74u32);
pub const KEY_SunCut: Keysym =                        Keysym(0x1005FF75u32);

pub const KEY_SunPowerSwitch: Keysym =                Keysym(0x1005FF76u32);
pub const KEY_SunAudioLowerVolume: Keysym =           Keysym(0x1005FF77u32);
pub const KEY_SunAudioMute: Keysym =                  Keysym(0x1005FF78u32);
pub const KEY_SunAudioRaiseVolume: Keysym =           Keysym(0x1005FF79u32);
pub const KEY_SunVideoDegauss: Keysym =               Keysym(0x1005FF7Au32);
pub const KEY_SunVideoLowerBrightness: Keysym =       Keysym(0x1005FF7Bu32);
pub const KEY_SunVideoRaiseBrightness: Keysym =       Keysym(0x1005FF7Cu32);
pub const KEY_SunPowerSwitchShift: Keysym =           Keysym(0x1005FF7Du32);
/***********************************************************

Copyright 1988, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.


Copyright 1988 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.  

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

/*
 * DEC private keysyms
 * (29th bit set)
 */

/* two-key compose sequence initiators, chosen to map to Latin1 characters */

pub const KEY_Dring_accent: Keysym =                  Keysym(0x1000FEB0u32);
pub const KEY_Dcircumflex_accent: Keysym =            Keysym(0x1000FE5Eu32);
pub const KEY_Dcedilla_accent: Keysym =               Keysym(0x1000FE2Cu32);
pub const KEY_Dacute_accent: Keysym =                 Keysym(0x1000FE27u32);
pub const KEY_Dgrave_accent: Keysym =                 Keysym(0x1000FE60u32);
pub const KEY_Dtilde: Keysym =                        Keysym(0x1000FE7Eu32);
pub const KEY_Ddiaeresis: Keysym =                    Keysym(0x1000FE22u32);

/* special keysym for LK2** "Remove" key on editing keypad */

/// Remove
pub const KEY_DRemove: Keysym =                       Keysym(0x1000FF00u32);
/*

Copyright 1987, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.

Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts,

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the names of Hewlett Packard
or Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

HEWLETT-PACKARD MAKES NO WARRANTY OF ANY KIND WITH REGARD
TO THIS SOFWARE, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  Hewlett-Packard shall not be liable for errors
contained herein or direct, indirect, special, incidental or
consequential damages in connection with the furnishing,
performance, or use of this material.

*/



pub const KEY_hpClearLine: Keysym =                   Keysym(0x1000FF6Fu32);
pub const KEY_hpInsertLine: Keysym =                  Keysym(0x1000FF70u32);
pub const KEY_hpDeleteLine: Keysym =                  Keysym(0x1000FF71u32);
pub const KEY_hpInsertChar: Keysym =                  Keysym(0x1000FF72u32);
pub const KEY_hpDeleteChar: Keysym =                  Keysym(0x1000FF73u32);
pub const KEY_hpBackTab: Keysym =                     Keysym(0x1000FF74u32);
pub const KEY_hpKP_BackTab: Keysym =                  Keysym(0x1000FF75u32);
pub const KEY_hpModelock1: Keysym =                   Keysym(0x1000FF48u32);
pub const KEY_hpModelock2: Keysym =                   Keysym(0x1000FF49u32);
pub const KEY_hpReset: Keysym =                       Keysym(0x1000FF6Cu32);
pub const KEY_hpSystem: Keysym =                      Keysym(0x1000FF6Du32);
pub const KEY_hpUser: Keysym =                        Keysym(0x1000FF6Eu32);
pub const KEY_hpmute_acute: Keysym =                  Keysym(0x100000A8u32);
pub const KEY_hpmute_grave: Keysym =                  Keysym(0x100000A9u32);
pub const KEY_hpmute_asciicircum: Keysym =            Keysym(0x100000AAu32);
pub const KEY_hpmute_diaeresis: Keysym =              Keysym(0x100000ABu32);
pub const KEY_hpmute_asciitilde: Keysym =             Keysym(0x100000ACu32);
pub const KEY_hplira: Keysym =                        Keysym(0x100000AFu32);
pub const KEY_hpguilder: Keysym =                     Keysym(0x100000BEu32);
pub const KEY_hpYdiaeresis: Keysym =                  Keysym(0x100000EEu32);
pub const KEY_hpIO: Keysym =                          Keysym(0x100000EEu32);
pub const KEY_hplongminus: Keysym =                   Keysym(0x100000F6u32);
pub const KEY_hpblock: Keysym =                       Keysym(0x100000FCu32);



pub const KEY_osfCopy: Keysym =                       Keysym(0x1004FF02u32);
pub const KEY_osfCut: Keysym =                        Keysym(0x1004FF03u32);
pub const KEY_osfPaste: Keysym =                      Keysym(0x1004FF04u32);
pub const KEY_osfBackTab: Keysym =                    Keysym(0x1004FF07u32);
pub const KEY_osfBackSpace: Keysym =                  Keysym(0x1004FF08u32);
pub const KEY_osfClear: Keysym =                      Keysym(0x1004FF0Bu32);
pub const KEY_osfEscape: Keysym =                     Keysym(0x1004FF1Bu32);
pub const KEY_osfAddMode: Keysym =                    Keysym(0x1004FF31u32);
pub const KEY_osfPrimaryPaste: Keysym =               Keysym(0x1004FF32u32);
pub const KEY_osfQuickPaste: Keysym =                 Keysym(0x1004FF33u32);
pub const KEY_osfPageLeft: Keysym =                   Keysym(0x1004FF40u32);
pub const KEY_osfPageUp: Keysym =                     Keysym(0x1004FF41u32);
pub const KEY_osfPageDown: Keysym =                   Keysym(0x1004FF42u32);
pub const KEY_osfPageRight: Keysym =                  Keysym(0x1004FF43u32);
pub const KEY_osfActivate: Keysym =                   Keysym(0x1004FF44u32);
pub const KEY_osfMenuBar: Keysym =                    Keysym(0x1004FF45u32);
pub const KEY_osfLeft: Keysym =                       Keysym(0x1004FF51u32);
pub const KEY_osfUp: Keysym =                         Keysym(0x1004FF52u32);
pub const KEY_osfRight: Keysym =                      Keysym(0x1004FF53u32);
pub const KEY_osfDown: Keysym =                       Keysym(0x1004FF54u32);
pub const KEY_osfEndLine: Keysym =                    Keysym(0x1004FF57u32);
pub const KEY_osfBeginLine: Keysym =                  Keysym(0x1004FF58u32);
pub const KEY_osfEndData: Keysym =                    Keysym(0x1004FF59u32);
pub const KEY_osfBeginData: Keysym =                  Keysym(0x1004FF5Au32);
pub const KEY_osfPrevMenu: Keysym =                   Keysym(0x1004FF5Bu32);
pub const KEY_osfNextMenu: Keysym =                   Keysym(0x1004FF5Cu32);
pub const KEY_osfPrevField: Keysym =                  Keysym(0x1004FF5Du32);
pub const KEY_osfNextField: Keysym =                  Keysym(0x1004FF5Eu32);
pub const KEY_osfSelect: Keysym =                     Keysym(0x1004FF60u32);
pub const KEY_osfInsert: Keysym =                     Keysym(0x1004FF63u32);
pub const KEY_osfUndo: Keysym =                       Keysym(0x1004FF65u32);
pub const KEY_osfMenu: Keysym =                       Keysym(0x1004FF67u32);
pub const KEY_osfCancel: Keysym =                     Keysym(0x1004FF69u32);
pub const KEY_osfHelp: Keysym =                       Keysym(0x1004FF6Au32);
pub const KEY_osfSelectAll: Keysym =                  Keysym(0x1004FF71u32);
pub const KEY_osfDeselectAll: Keysym =                Keysym(0x1004FF72u32);
pub const KEY_osfReselect: Keysym =                   Keysym(0x1004FF73u32);
pub const KEY_osfExtend: Keysym =                     Keysym(0x1004FF74u32);
pub const KEY_osfRestore: Keysym =                    Keysym(0x1004FF78u32);
pub const KEY_osfDelete: Keysym =                     Keysym(0x1004FFFFu32);



/**************************************************************
 * The use of the following macros is deprecated.
 * They are listed below only for backwards compatibility.
 */
pub const KEY_Reset: Keysym =                         Keysym(0x1000FF6Cu32);
pub const KEY_System: Keysym =                        Keysym(0x1000FF6Du32);
pub const KEY_User: Keysym =                          Keysym(0x1000FF6Eu32);
pub const KEY_ClearLine: Keysym =                     Keysym(0x1000FF6Fu32);
pub const KEY_InsertLine: Keysym =                    Keysym(0x1000FF70u32);
pub const KEY_DeleteLine: Keysym =                    Keysym(0x1000FF71u32);
pub const KEY_InsertChar: Keysym =                    Keysym(0x1000FF72u32);
pub const KEY_DeleteChar: Keysym =                    Keysym(0x1000FF73u32);
pub const KEY_BackTab: Keysym =                       Keysym(0x1000FF74u32);
pub const KEY_KP_BackTab: Keysym =                    Keysym(0x1000FF75u32);
pub const KEY_Ext16bit_L: Keysym =                    Keysym(0x1000FF76u32);
pub const KEY_Ext16bit_R: Keysym =                    Keysym(0x1000FF77u32);
pub const KEY_mute_acute: Keysym =                    Keysym(0x100000a8u32);
pub const KEY_mute_grave: Keysym =                    Keysym(0x100000a9u32);
pub const KEY_mute_asciicircum: Keysym =              Keysym(0x100000aau32);
pub const KEY_mute_diaeresis: Keysym =                Keysym(0x100000abu32);
pub const KEY_mute_asciitilde: Keysym =               Keysym(0x100000acu32);
pub const KEY_lira: Keysym =                          Keysym(0x100000afu32);
pub const KEY_guilder: Keysym =                       Keysym(0x100000beu32);
pub const KEY_IO: Keysym =                            Keysym(0x100000eeu32);
pub const KEY_longminus: Keysym =                     Keysym(0x100000f6u32);
pub const KEY_block: Keysym =                         Keysym(0x100000fcu32);



